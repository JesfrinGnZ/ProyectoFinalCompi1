/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package backend.generacionHtml;
import java_cup.runtime.*;
import backend.errores.*;
import static backend.generacionHtml.sym.*;
import java.util.ArrayList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>generacionDocumento.flex</tt>
 */
public class AnalizadorDeCodigoEmbebido implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\3\1\2\1\113\1\114\1\1\16\4\4\0\1\3\1\0"+
    "\1\110\1\0\1\4\1\52\1\104\1\107\1\40\1\41\1\32\1\30"+
    "\1\46\1\31\1\112\1\33\1\6\11\7\1\36\1\47\1\35\1\37"+
    "\1\34\1\0\1\0\1\13\1\22\1\67\1\42\1\20\1\27\1\21"+
    "\1\43\1\15\1\5\1\75\1\24\1\56\1\16\1\23\1\45\1\77"+
    "\1\14\1\25\1\17\1\26\1\12\1\44\1\101\1\66\1\102\1\50"+
    "\1\0\1\51\1\0\1\5\1\0\1\61\1\64\1\106\1\62\1\60"+
    "\1\76\1\100\1\54\1\63\1\5\1\75\1\57\1\105\1\70\1\65"+
    "\1\72\1\77\1\71\1\74\1\55\1\73\1\5\1\103\1\101\1\66"+
    "\1\102\1\0\1\53\2\0\6\4\1\115\32\4\2\0\4\4\4\0"+
    "\1\5\2\0\1\4\7\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0"+
    "\1\5\21\0\165\5\1\0\2\5\2\0\4\5\1\0\1\5\6\0"+
    "\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0"+
    "\213\5\1\0\5\5\2\111\246\5\1\0\46\5\2\0\1\5\7\0"+
    "\47\5\7\0\1\4\1\0\55\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\1\5\10\0\33\5\5\0\3\5\15\0\6\4\5\0"+
    "\1\4\4\0\13\5\1\0\1\4\3\0\100\5\12\11\4\0\146\5"+
    "\1\0\10\5\1\4\1\0\12\5\1\0\6\5\12\11\3\5\2\0"+
    "\1\5\17\0\1\4\73\5\2\0\145\5\16\0\12\11\54\5\4\0"+
    "\1\5\5\0\56\5\22\0\34\5\104\0\25\5\1\0\10\111\26\0"+
    "\16\111\1\0\201\5\2\0\12\11\1\0\23\5\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0"+
    "\11\5\2\0\2\5\2\0\4\5\10\0\1\5\4\0\2\5\1\0"+
    "\5\5\2\0\12\11\2\5\2\4\7\0\1\4\5\0\3\5\1\0"+
    "\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\2\0\1\5\1\0\5\5\4\0\2\5\2\0"+
    "\3\5\3\0\1\5\7\0\4\5\1\0\1\5\7\0\12\11\6\5"+
    "\13\0\3\5\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\12\5\1\0\3\5\1\0\3\5"+
    "\2\0\1\5\17\0\4\5\2\0\12\11\1\0\1\4\7\0\1\5"+
    "\7\0\3\5\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\11\5\2\0\2\5\2\0\3\5"+
    "\10\0\2\5\4\0\2\5\1\0\5\5\2\0\12\11\1\0\1\5"+
    "\20\0\2\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\4\0\5\5\3\0\3\5\1\0\4\5\2\0\1\5\6\0\1\5"+
    "\16\0\12\11\11\0\1\4\6\0\4\5\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\20\5\3\0\10\5\1\0\3\5\1\0\4\5"+
    "\7\0\2\5\1\0\3\5\5\0\4\5\2\0\12\11\20\0\1\111"+
    "\3\5\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\2\0\11\5\1\0\3\5\1\0\4\5\7\0\2\5\7\0"+
    "\1\5\1\0\4\5\2\0\12\11\1\0\2\5\16\0\3\5\1\0"+
    "\10\5\1\0\3\5\1\0\51\5\2\0\10\5\1\0\3\5\1\0"+
    "\5\5\5\0\3\111\1\5\7\0\5\5\2\0\12\11\12\0\6\5"+
    "\2\0\2\5\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5"+
    "\6\0\12\11\2\0\2\5\15\0\72\5\4\0\1\4\17\5\1\0"+
    "\12\11\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0"+
    "\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0"+
    "\1\5\2\0\2\5\1\0\15\5\1\0\3\5\2\0\5\5\1\0"+
    "\1\5\1\0\6\5\2\0\12\11\2\0\4\5\40\0\1\5\27\0"+
    "\2\5\6\0\12\11\13\0\1\5\1\0\1\5\1\0\1\5\4\0"+
    "\12\5\1\0\44\5\4\0\24\5\1\0\22\5\1\0\44\5\11\0"+
    "\1\5\71\0\100\5\12\11\6\0\100\5\12\11\4\5\2\0\46\5"+
    "\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0\4\5"+
    "\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5"+
    "\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5\2\0\3\5"+
    "\40\0\20\5\20\0\126\5\2\0\6\5\3\0\u026c\5\2\0\21\5"+
    "\1\0\32\5\5\0\113\5\3\0\13\5\7\0\15\5\1\0\7\5"+
    "\13\0\25\5\13\0\24\5\14\0\15\5\1\0\3\5\1\0\2\5"+
    "\14\0\124\5\3\0\1\5\3\0\1\4\2\5\2\0\12\11\41\0"+
    "\3\5\1\4\1\0\12\11\6\0\130\5\10\0\53\5\5\0\106\5"+
    "\12\0\37\5\1\0\14\5\4\0\14\5\12\0\12\11\36\5\2\0"+
    "\5\5\13\0\54\5\4\0\32\5\6\0\12\11\46\0\34\5\4\0"+
    "\77\5\1\0\35\5\2\0\1\5\12\11\6\0\12\11\15\0\1\5"+
    "\10\0\16\5\1\111\101\0\114\5\4\0\12\11\21\0\11\5\14\0"+
    "\60\5\12\11\72\5\14\0\70\5\10\0\12\11\3\0\3\5\12\11"+
    "\44\5\2\0\11\111\107\0\3\5\1\0\43\5\1\0\2\5\6\0"+
    "\366\5\5\0\1\111\u011a\5\2\0\6\5\2\0\46\5\2\0\6\5"+
    "\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5"+
    "\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5"+
    "\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5"+
    "\16\0\5\4\30\0\1\113\1\113\5\4\20\0\2\5\23\0\1\5"+
    "\13\0\5\4\1\0\12\4\1\0\1\5\15\0\1\5\20\0\15\5"+
    "\3\0\37\4\21\0\15\5\4\111\1\5\3\111\14\5\21\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5"+
    "\5\0\5\5\4\0\1\5\21\0\51\5\u032d\0\64\111\u0716\0\57\5"+
    "\1\0\57\5\1\0\205\5\6\0\11\5\14\0\46\5\1\0\1\5"+
    "\5\0\1\5\2\0\70\5\7\0\1\5\17\0\30\5\11\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\40\5\57\0\1\5\u01d5\0\3\5"+
    "\31\0\17\5\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\5"+
    "\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0\136\5"+
    "\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51d6\5\52\0\u048d\5"+
    "\103\0\56\5\2\0\u010d\5\3\0\20\5\12\11\2\5\24\0\60\5"+
    "\3\111\1\0\12\5\1\0\163\5\45\0\11\5\2\0\147\5\2\0"+
    "\43\5\1\111\1\0\10\5\77\0\61\5\20\0\1\4\7\0\64\5"+
    "\14\0\105\5\1\111\12\0\12\11\6\0\30\5\3\0\1\5\1\0"+
    "\1\5\2\0\12\11\44\5\2\0\44\5\14\0\35\5\3\0\101\5"+
    "\16\0\1\5\12\11\6\0\20\5\12\11\5\5\1\0\67\5\11\0"+
    "\16\5\2\0\12\11\6\0\27\5\3\0\111\5\30\0\3\5\2\0"+
    "\20\5\2\0\5\5\12\0\6\5\2\0\6\5\2\0\6\5\11\0"+
    "\7\5\1\0\7\5\1\0\53\5\1\0\12\5\12\0\173\5\1\0"+
    "\2\5\2\0\12\11\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0"+
    "\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\14\5\1\0"+
    "\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0"+
    "\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\14\5\1\4"+
    "\3\0\20\5\20\0\20\5\3\0\2\5\30\0\3\5\31\0\1\4"+
    "\6\0\5\5\1\0\207\5\2\0\1\4\4\0\1\4\13\0\12\11"+
    "\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\4\3\0\2\4"+
    "\22\0\3\4\4\0\14\5\1\0\32\5\1\0\23\5\1\0\2\5"+
    "\1\0\17\5\2\0\16\5\42\0\173\5\105\0\65\5\210\0\1\5"+
    "\202\0\35\5\3\0\61\5\17\0\1\5\37\0\40\5\20\0\33\5"+
    "\5\0\53\5\5\0\36\5\2\0\44\5\4\0\10\5\1\0\5\5"+
    "\52\0\236\5\2\0\12\11\6\0\44\111\4\0\44\111\4\0\50\5"+
    "\10\0\64\5\234\0\u0137\5\11\0\26\5\12\0\10\5\230\0\6\5"+
    "\2\0\1\5\1\0\54\5\1\0\2\5\3\0\1\5\2\0\27\5"+
    "\12\0\27\5\11\0\37\5\101\0\23\5\1\0\2\5\12\0\26\5"+
    "\12\0\32\5\106\0\70\5\6\0\2\5\100\0\4\5\1\0\2\5"+
    "\5\0\10\5\1\0\3\5\1\0\33\5\4\0\3\5\4\0\1\5"+
    "\40\0\35\5\3\0\35\5\43\0\10\5\1\0\36\5\31\0\66\5"+
    "\12\0\26\5\12\0\23\5\15\0\22\5\156\0\111\5\67\0\63\5"+
    "\15\0\63\5\u030d\0\107\5\37\0\12\11\17\0\74\5\2\0\1\4"+
    "\22\0\31\5\7\0\12\11\6\0\65\5\1\0\12\11\20\0\44\5"+
    "\2\0\1\5\11\0\105\5\5\0\3\5\3\0\12\11\1\5\1\0"+
    "\1\5\43\0\22\5\1\0\45\5\6\0\1\111\101\0\7\5\1\0"+
    "\1\5\1\0\4\5\1\0\17\5\1\0\12\5\7\0\73\5\5\0"+
    "\12\11\6\0\4\5\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\11\5\2\0\2\5\2\0"+
    "\3\5\2\0\1\5\6\0\1\5\5\0\7\5\2\0\7\5\3\0"+
    "\5\5\213\0\113\111\5\0\12\10\46\0\106\5\1\0\1\5\10\0"+
    "\12\11\246\0\66\5\2\0\11\5\27\0\6\5\42\0\101\5\3\0"+
    "\1\5\13\0\12\11\46\0\70\5\10\0\12\11\66\0\32\5\3\0"+
    "\17\5\4\0\12\11\u0166\0\100\5\12\11\25\0\1\5\u01c0\0\71\5"+
    "\u0107\0\11\111\1\0\55\111\1\0\11\111\17\0\12\10\30\0\36\111"+
    "\2\0\26\111\1\0\16\111\u0349\0\u039a\5\146\0\157\5\21\0\304\5"+
    "\u0abc\0\u042f\5\u0fd1\0\u0247\5\u21b9\0\u0239\5\7\0\37\5\1\0\12\11"+
    "\146\0\36\5\2\0\5\5\13\0\67\5\11\0\4\5\14\0\12\11"+
    "\11\0\25\5\5\0\23\5\u0370\0\105\5\13\0\57\5\20\0\21\5"+
    "\100\0\1\111\37\0\u17ed\111\23\0\u02f3\111\u250d\0\2\5\u0bfe\0\153\5"+
    "\5\0\15\5\3\0\11\5\7\0\12\5\3\0\2\5\1\0\4\4"+
    "\u14c1\0\5\5\3\0\6\5\10\4\10\5\2\0\7\5\36\0\4\5"+
    "\224\0\3\5\u01bb\0\125\5\1\0\107\5\1\0\2\5\2\0\1\5"+
    "\2\0\2\5\2\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5"+
    "\1\0\101\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\34\5"+
    "\1\0\4\5\1\0\5\5\1\0\1\5\3\0\7\5\1\0\u0154\5"+
    "\2\0\31\5\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5"+
    "\1\0\31\5\1\0\37\5\1\0\31\5\1\0\37\5\1\0\31\5"+
    "\1\0\10\5\2\0\62\11\u0200\0\67\5\4\0\62\5\10\0\1\5"+
    "\16\0\1\5\26\0\5\5\1\0\17\5\u0550\0\7\111\1\0\21\111"+
    "\2\0\7\111\1\0\2\111\1\0\5\111\u07d5\0\305\5\13\0\7\5"+
    "\51\0\113\111\5\0\12\10\u04a6\0\4\5\1\0\33\5\1\0\2\5"+
    "\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5"+
    "\1\0\1\5\6\0\1\5\4\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5"+
    "\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5"+
    "\1\0\12\5\1\0\21\5\5\0\3\5\1\0\5\5\1\0\21\5"+
    "\u0274\0\32\111\6\0\32\111\6\0\32\111\u0e76\0\ua6d7\5\51\0\u1035\5"+
    "\13\0\336\5\2\0\u1682\5\u295e\0\u021e\5\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\4\36\0\140\4\200\0\360\5\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\4\1\3\1\5\1\6"+
    "\3\3\1\7\3\3\1\10\1\3\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\2\3"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\23\1\3"+
    "\1\5\1\6\1\7\2\3\1\23\3\3\3\1\1\4"+
    "\3\3\1\0\1\3\1\31\2\3\1\0\3\3\1\32"+
    "\1\3\1\0\3\3\1\33\4\3\1\33\1\3\1\34"+
    "\2\35\2\36\3\3\1\0\1\3\2\37\2\3\1\0"+
    "\2\3\1\40\2\3\1\40\2\3\1\0\1\3\2\0"+
    "\1\33\1\36\4\0\1\37\1\0\1\37\1\0\2\3"+
    "\13\0\1\41\1\0\1\42\1\43\1\44\1\3\1\0"+
    "\1\3\1\0\2\3\2\0\2\3\2\0\2\3\2\0"+
    "\1\3\1\45\2\3\1\0\3\3\1\0\2\3\4\0"+
    "\1\3\2\0\3\3\1\0\1\3\1\46\1\47\1\46"+
    "\2\0\1\47\1\46\1\3\1\0\1\3\1\50\1\3"+
    "\2\0\1\3\2\0\2\3\2\0\1\3\1\0\2\3"+
    "\13\0\1\46\1\0\1\47\1\46\2\0\2\3\2\0"+
    "\1\51\7\0\1\52\1\3\1\0\1\3\2\53\2\54"+
    "\1\55\1\3\1\0\2\56\1\57\1\60\1\56\1\60"+
    "\1\61\1\3\1\0\2\3\2\62\1\3\2\0\1\3"+
    "\1\0\1\62\2\63\2\64\1\3\1\0\1\3\1\0"+
    "\1\3\1\0\1\64\1\3\2\65\2\66\2\67\2\70"+
    "\2\71\1\3\1\0\2\3\1\0\1\63\1\70\1\0"+
    "\1\56\1\71\1\0\1\62\2\0\1\71\1\66\1\62"+
    "\1\54\1\66\1\0\2\70\1\65\2\3\4\0\1\72"+
    "\4\0\2\73\1\3\2\74\1\75\1\0\2\3\2\76"+
    "\1\0\1\3\2\76\2\77\1\3\1\0\1\3\1\77"+
    "\1\100\2\101\1\102\1\103\2\0\1\104\1\101\1\104"+
    "\2\74\1\76\1\3\2\104\7\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\105\2\106\2\0\2\107\1\106"+
    "\1\107\7\0\1\110\2\111\1\112\1\0\1\3\1\111"+
    "\1\0\1\113\1\114\1\115\1\116\1\117\1\120\1\121"+
    "\1\0\1\3\2\0\1\3\1\0\2\122\2\0\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\116\0\234\0\116\0\352\0\352\0\u0138\0\u0186"+
    "\0\u01d4\0\u0222\0\u0270\0\u02be\0\u030c\0\u035a\0\u03a8\0\u03f6"+
    "\0\u0444\0\u0492\0\u04e0\0\116\0\116\0\116\0\116\0\116"+
    "\0\116\0\116\0\116\0\116\0\116\0\u052e\0\u057c\0\u05ca"+
    "\0\116\0\116\0\u0618\0\116\0\116\0\u0666\0\u06b4\0\u0702"+
    "\0\352\0\u0750\0\u079e\0\u07ec\0\352\0\u083a\0\u0888\0\u08d6"+
    "\0\u0924\0\u0972\0\u09c0\0\u0a0e\0\u0a5c\0\u0aaa\0\u0af8\0\u0b46"+
    "\0\u0b94\0\352\0\u0be2\0\u0c30\0\u0c7e\0\u0ccc\0\u0d1a\0\u0d68"+
    "\0\352\0\u0db6\0\u0e04\0\u0e52\0\u0ea0\0\u0eee\0\352\0\u0f3c"+
    "\0\u0f8a\0\u0fd8\0\u1026\0\u1074\0\u10c2\0\352\0\352\0\116"+
    "\0\u1110\0\u115e\0\u11ac\0\u11fa\0\u1248\0\u1296\0\u12e4\0\352"+
    "\0\116\0\u1332\0\u1380\0\u13ce\0\u141c\0\u146a\0\u14b8\0\u1506"+
    "\0\u1554\0\u15a2\0\u15f0\0\u163e\0\u168c\0\u16da\0\u1728\0\u1776"+
    "\0\u17c4\0\u1812\0\u1860\0\u18ae\0\u18fc\0\u194a\0\u1998\0\u19e6"+
    "\0\u1a34\0\u1a82\0\u1ad0\0\u1b1e\0\u1b6c\0\u1bba\0\u1c08\0\u1c56"+
    "\0\u1ca4\0\u1cf2\0\u1d40\0\u1d8e\0\u1ddc\0\u1e2a\0\u0972\0\116"+
    "\0\u09c0\0\116\0\352\0\352\0\u1e78\0\u1ec6\0\u1f14\0\u1f62"+
    "\0\u1fb0\0\u1ffe\0\u204c\0\u209a\0\u20e8\0\u2136\0\u2184\0\u21d2"+
    "\0\u2220\0\u226e\0\u22bc\0\u230a\0\u2358\0\352\0\u23a6\0\u23f4"+
    "\0\u2442\0\u2490\0\u24de\0\u252c\0\u257a\0\u25c8\0\u2616\0\u2664"+
    "\0\u26b2\0\u2700\0\u274e\0\u279c\0\u27ea\0\u2838\0\u2886\0\u28d4"+
    "\0\u2922\0\u2970\0\u29be\0\352\0\352\0\116\0\u2a0c\0\u2a5a"+
    "\0\116\0\u2aa8\0\u2af6\0\u2b44\0\u2b92\0\352\0\u2be0\0\u2c2e"+
    "\0\u2c7c\0\u2cca\0\u2d18\0\u2d66\0\u2db4\0\u2e02\0\u2e50\0\u2e9e"+
    "\0\u2eec\0\u2f3a\0\u2f88\0\u2fd6\0\u3024\0\u3072\0\u30c0\0\u310e"+
    "\0\u315c\0\u31aa\0\u31f8\0\u3246\0\u3294\0\u32e2\0\u3330\0\u204c"+
    "\0\u337e\0\u22bc\0\u33cc\0\u341a\0\u3468\0\u34b6\0\u3504\0\u3552"+
    "\0\u35a0\0\116\0\u35ee\0\u363c\0\u368a\0\u36d8\0\u3726\0\u3774"+
    "\0\u37c2\0\116\0\u3810\0\u385e\0\u38ac\0\116\0\352\0\352"+
    "\0\116\0\352\0\u38fa\0\u3948\0\116\0\352\0\352\0\116"+
    "\0\u3948\0\352\0\352\0\u3996\0\u39e4\0\u3a32\0\u3a80\0\116"+
    "\0\352\0\u3ace\0\u3b1c\0\u3b6a\0\u3bb8\0\u3c06\0\u3c54\0\116"+
    "\0\352\0\116\0\352\0\u3ca2\0\u3cf0\0\u3d3e\0\u3d8c\0\u3dda"+
    "\0\u3e28\0\u3e28\0\u3e76\0\116\0\352\0\352\0\116\0\352"+
    "\0\116\0\116\0\352\0\352\0\116\0\u3ec4\0\u3f12\0\u3f60"+
    "\0\u3fae\0\u3ffc\0\u404a\0\u3e28\0\u4098\0\u4098\0\u4098\0\u40e6"+
    "\0\u40e6\0\u4134\0\u4182\0\u3cf0\0\u4098\0\u3f12\0\u3cf0\0\u41d0"+
    "\0\u421e\0\u3948\0\u426c\0\u39e4\0\u42ba\0\u4308\0\u4356\0\u43a4"+
    "\0\u43f2\0\u4440\0\116\0\u448e\0\u44dc\0\u452a\0\u4578\0\352"+
    "\0\116\0\u45c6\0\352\0\116\0\352\0\u4614\0\u4662\0\u46b0"+
    "\0\116\0\352\0\u46fe\0\u474c\0\u46fe\0\u479a\0\352\0\116"+
    "\0\u47e8\0\u4836\0\u4884\0\u4836\0\352\0\352\0\116\0\352"+
    "\0\352\0\u48d2\0\u4920\0\116\0\u4920\0\u4614\0\u4920\0\u496e"+
    "\0\u49bc\0\u4a0a\0\352\0\u4920\0\u4a58\0\u4aa6\0\u4af4\0\u4b42"+
    "\0\u4b90\0\u4bde\0\u4c2c\0\u4c7a\0\u4cc8\0\u4d16\0\u4d64\0\u4db2"+
    "\0\u4e00\0\u4e4e\0\352\0\116\0\352\0\u4e9c\0\u4eea\0\116"+
    "\0\u4e4e\0\u4db2\0\352\0\u4f38\0\u4f86\0\u4fd4\0\u5022\0\u5070"+
    "\0\u50be\0\u510c\0\352\0\116\0\352\0\352\0\u515a\0\u51a8"+
    "\0\u515a\0\u51f6\0\116\0\116\0\116\0\116\0\116\0\116"+
    "\0\116\0\u5244\0\u5292\0\u52e0\0\u532e\0\u537c\0\u53ca\0\116"+
    "\0\352\0\u5418\0\u5466\0\u5466";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\2\5\1\6\1\7\1\2\1\5"+
    "\1\10\1\11\1\5\1\12\1\13\1\14\1\15\1\5"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\5\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\36\1\47\1\5\1\20\1\5\1\50"+
    "\1\5\1\51\1\52\1\53\1\5\1\54\1\13\1\5"+
    "\1\55\1\22\1\56\1\5\1\57\4\5\1\60\1\61"+
    "\1\5\1\54\1\62\1\63\3\2\1\4\1\5\120\0"+
    "\1\4\117\0\4\5\1\0\17\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\4\0\2\5\2\7"+
    "\1\64\1\7\16\5\12\0\4\5\6\0\30\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\2\5\1\65"+
    "\14\5\12\0\4\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\5\5\1\66\5\5\1\67"+
    "\3\5\12\0\4\5\5\0\1\70\3\5\1\67\24\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\5\5"+
    "\1\71\10\5\1\72\12\0\4\5\6\0\30\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\2\5\1\73"+
    "\7\5\1\74\4\5\12\0\4\5\5\0\1\75\5\5"+
    "\1\73\3\5\1\74\16\5\1\0\2\5\6\0\1\5"+
    "\4\0\4\5\1\0\3\5\1\76\1\77\2\5\1\100"+
    "\2\5\1\101\4\5\12\0\1\5\1\102\2\5\5\0"+
    "\1\103\4\5\1\100\2\5\1\77\2\5\1\104\15\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\5\5"+
    "\1\105\5\5\1\106\3\5\12\0\4\5\6\0\30\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\3\5"+
    "\1\107\3\5\1\110\1\111\1\5\1\112\1\113\3\5"+
    "\12\0\4\5\5\0\1\114\3\5\1\113\5\5\1\115"+
    "\3\5\1\107\6\5\1\111\3\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\3\5\1\116\7\5\1\117"+
    "\3\5\12\0\4\5\5\0\1\120\3\5\1\117\24\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\4\5"+
    "\1\121\12\5\12\0\4\5\5\0\1\122\7\5\1\121"+
    "\20\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\4\5\1\123\1\5\1\124\6\5\1\125\1\5\12\0"+
    "\4\5\5\0\1\126\1\5\1\127\5\5\1\123\7\5"+
    "\1\125\10\5\1\0\2\5\6\0\1\5\4\0\4\5"+
    "\1\0\13\5\1\130\3\5\12\0\4\5\5\0\1\131"+
    "\3\5\1\130\24\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\2\5\1\132\7\5\1\133\4\5\12\0"+
    "\4\5\5\0\1\134\5\5\1\135\3\5\1\136\16\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\3\5"+
    "\1\137\2\5\1\140\1\141\7\5\12\0\4\5\5\0"+
    "\1\142\1\5\1\140\2\5\1\141\10\5\1\137\12\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\4\5"+
    "\1\143\12\5\12\0\1\5\1\144\2\5\5\0\1\145"+
    "\7\5\1\143\20\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\3\5\1\146\13\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\54\0\1\147\54\0"+
    "\1\150\1\151\1\152\1\0\1\153\1\154\1\155\1\0"+
    "\1\156\1\157\1\0\1\160\24\0\1\161\1\0\1\153"+
    "\1\0\1\157\1\154\1\150\1\0\1\152\1\0\1\156"+
    "\1\162\2\0\1\151\1\0\1\160\4\0\1\155\21\0"+
    "\4\5\1\0\4\5\1\77\2\5\1\100\7\5\12\0"+
    "\4\5\5\0\1\103\4\5\1\100\2\5\1\77\2\5"+
    "\1\104\15\5\1\0\2\5\6\0\1\5\4\0\4\5"+
    "\1\0\13\5\1\67\3\5\12\0\4\5\5\0\1\70"+
    "\3\5\1\67\24\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\3\5\1\107\4\5\1\111\1\5\1\115"+
    "\1\113\3\5\12\0\4\5\5\0\1\114\3\5\1\113"+
    "\5\5\1\115\3\5\1\107\6\5\1\111\3\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\13\5\1\117"+
    "\3\5\12\0\4\5\5\0\1\120\3\5\1\117\24\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\7\5"+
    "\1\163\2\5\1\164\4\5\12\0\4\5\5\0\1\165"+
    "\4\5\1\163\4\5\1\164\16\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\4\5\1\123\1\5\1\127"+
    "\6\5\1\125\1\5\12\0\4\5\5\0\1\126\1\5"+
    "\1\127\5\5\1\123\7\5\1\125\10\5\1\0\2\5"+
    "\6\0\1\5\4\0\4\5\1\0\2\5\1\135\7\5"+
    "\1\136\4\5\12\0\4\5\5\0\1\134\5\5\1\135"+
    "\3\5\1\136\16\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\4\5\1\143\12\5\12\0\4\5\5\0"+
    "\1\145\7\5\1\143\20\5\1\0\2\5\6\0\1\5"+
    "\16\0\1\166\40\0\1\167\1\170\1\171\1\0\1\172"+
    "\1\0\1\173\2\0\1\174\2\0\1\175\4\0\1\176"+
    "\15\0\107\177\1\200\6\177\110\201\1\202\5\201\6\0"+
    "\4\64\110\0\4\5\1\0\3\5\1\203\13\5\12\0"+
    "\4\5\6\0\30\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\17\5\12\0\1\204\3\5\6\0\30\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\4\5"+
    "\1\205\12\5\12\0\4\5\5\0\1\206\7\5\1\205"+
    "\20\5\1\0\2\5\6\0\1\5\15\0\1\206\35\0"+
    "\1\206\7\0\1\206\36\0\4\5\1\0\6\5\1\207"+
    "\10\5\12\0\4\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\17\5\12\0\4\5\5\0"+
    "\1\210\2\5\1\211\25\5\1\0\1\211\1\5\6\0"+
    "\1\5\4\0\4\5\1\0\11\5\1\212\5\5\12\0"+
    "\4\5\5\0\1\213\10\5\1\212\17\5\1\0\2\5"+
    "\6\0\1\5\22\0\1\213\30\0\1\214\2\0\1\210"+
    "\5\0\1\213\20\0\1\210\14\0\4\5\1\0\15\5"+
    "\1\215\1\5\12\0\4\5\6\0\30\5\1\0\2\5"+
    "\6\0\1\5\4\0\4\5\1\0\6\5\1\216\10\5"+
    "\12\0\4\5\5\0\1\217\1\5\1\216\26\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\17\5\12\0"+
    "\4\5\5\0\1\220\25\5\1\221\2\5\1\0\2\5"+
    "\6\0\1\5\4\0\4\5\1\0\7\5\1\222\7\5"+
    "\12\0\4\5\6\0\30\5\1\0\2\5\6\0\1\5"+
    "\17\0\1\217\25\0\1\223\5\0\1\224\1\0\1\217"+
    "\14\0\1\223\6\0\1\220\20\0\4\5\1\0\17\5"+
    "\12\0\3\5\1\225\5\0\1\223\16\5\1\225\11\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\17\5"+
    "\12\0\1\226\3\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\14\5\1\227\2\5\12\0"+
    "\4\5\6\0\30\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\10\5\1\230\6\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\17\5\12\0\4\5\5\0\1\231\13\5\1\232\14\5"+
    "\1\0\1\5\1\232\6\0\1\5\4\0\4\5\1\0"+
    "\12\5\1\233\4\5\12\0\1\234\3\5\5\0\1\235"+
    "\6\5\1\234\21\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\4\5\1\236\5\5\1\237\4\5\12\0"+
    "\4\5\5\0\1\240\7\5\1\236\1\5\1\237\16\5"+
    "\1\0\2\5\6\0\1\5\15\0\1\241\5\0\1\242"+
    "\16\0\1\235\10\0\1\243\6\0\1\235\1\241\1\0"+
    "\1\242\1\0\1\231\16\0\1\231\13\0\4\5\1\0"+
    "\17\5\12\0\1\234\3\5\5\0\1\235\6\5\1\234"+
    "\21\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\5\5\1\244\11\5\12\0\4\5\5\0\1\245\14\5"+
    "\1\244\13\5\1\0\2\5\6\0\1\5\16\0\1\245"+
    "\34\0\1\245\14\0\1\245\31\0\4\5\1\0\17\5"+
    "\12\0\4\5\5\0\1\246\26\5\1\247\1\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\2\5\1\250"+
    "\1\251\13\5\12\0\4\5\5\0\1\252\5\5\1\250"+
    "\7\5\1\253\12\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\11\5\1\254\5\5\12\0\3\5\1\255"+
    "\5\0\1\256\10\5\1\254\5\5\1\255\11\5\1\0"+
    "\2\5\6\0\1\5\13\0\1\257\1\260\5\0\1\256"+
    "\22\0\1\261\5\0\1\262\5\0\1\257\2\0\1\256"+
    "\4\0\1\260\1\261\7\0\1\246\17\0\4\5\1\0"+
    "\2\5\1\250\1\253\13\5\12\0\4\5\5\0\1\252"+
    "\5\5\1\250\7\5\1\253\12\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\13\5\1\263\3\5\12\0"+
    "\4\5\5\0\1\264\13\5\1\265\14\5\1\0\1\5"+
    "\1\265\6\0\1\5\4\0\4\5\1\0\3\5\1\266"+
    "\1\5\1\267\11\5\12\0\4\5\5\0\1\270\14\5"+
    "\1\267\13\5\1\0\2\5\6\0\1\5\16\0\1\270"+
    "\34\0\1\271\13\0\1\264\1\270\15\0\1\264\13\0"+
    "\4\5\1\0\17\5\12\0\4\5\5\0\1\264\13\5"+
    "\1\265\14\5\1\0\1\5\1\265\6\0\1\5\4\0"+
    "\4\5\1\0\5\5\1\267\11\5\12\0\4\5\5\0"+
    "\1\270\14\5\1\267\13\5\1\0\2\5\6\0\1\5"+
    "\4\0\4\5\1\0\7\5\1\272\7\5\12\0\4\5"+
    "\5\0\1\273\4\5\1\272\23\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\17\5\12\0\4\5\5\0"+
    "\1\274\2\5\1\275\25\5\1\0\1\275\1\5\6\0"+
    "\1\5\4\0\4\5\1\0\2\5\1\276\14\5\12\0"+
    "\4\5\5\0\1\277\5\5\1\276\22\5\1\0\2\5"+
    "\6\0\1\5\13\0\1\277\4\0\1\273\32\0\1\300"+
    "\2\0\1\274\1\0\1\273\1\277\23\0\1\274\14\0"+
    "\4\5\1\0\17\5\12\0\1\301\3\5\5\0\1\302"+
    "\6\5\1\301\21\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\4\5\1\303\12\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\42\0\1\302\10\0"+
    "\1\302\6\0\1\302\37\0\4\5\1\0\4\5\1\304"+
    "\12\5\12\0\4\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\55\0\1\305\113\0\1\264\2\0\1\210\10\0"+
    "\1\264\15\0\1\210\1\264\27\0\1\273\32\0\1\273"+
    "\4\0\1\273\53\0\1\245\1\217\22\0\1\302\10\0"+
    "\1\306\1\0\1\217\4\0\1\302\5\0\1\245\11\0"+
    "\1\246\26\0\1\257\1\260\36\0\1\307\2\0\1\274"+
    "\2\0\1\257\7\0\1\260\13\0\1\274\23\0\1\277"+
    "\2\0\1\310\34\0\1\311\5\0\1\277\6\0\1\310"+
    "\10\0\1\220\67\0\1\231\13\0\1\231\16\0\1\231"+
    "\25\0\1\270\3\0\1\213\1\0\1\312\15\0\1\235"+
    "\10\0\1\313\3\0\1\312\2\0\1\235\1\0\1\213"+
    "\3\0\1\270\42\0\1\314\5\0\1\242\27\0\1\315"+
    "\7\0\1\314\1\0\1\242\52\0\1\256\22\0\1\261"+
    "\5\0\1\256\10\0\1\256\5\0\1\261\36\0\1\316"+
    "\1\260\1\314\1\317\1\217\1\273\1\0\1\320\1\242"+
    "\1\312\15\0\1\321\2\0\1\322\5\0\1\323\1\0"+
    "\1\217\1\324\1\312\1\273\1\316\1\321\1\314\1\320"+
    "\1\242\1\0\1\325\1\317\1\260\1\322\6\0\1\220"+
    "\1\246\2\0\1\324\1\325\54\0\1\223\5\0\1\223"+
    "\16\0\1\223\27\0\4\5\1\0\5\5\1\326\11\5"+
    "\12\0\4\5\5\0\1\310\14\5\1\326\13\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\13\5\1\327"+
    "\3\5\12\0\4\5\5\0\1\312\3\5\1\327\24\5"+
    "\1\0\2\5\6\0\1\5\16\0\1\310\5\0\1\312"+
    "\26\0\1\330\3\0\1\312\10\0\1\310\102\0\1\331"+
    "\115\0\1\332\121\0\1\333\115\0\1\334\23\0\1\335"+
    "\71\0\1\336\115\0\1\337\111\0\1\340\121\0\1\341"+
    "\111\0\1\342\44\0\4\5\1\0\10\5\1\343\6\5"+
    "\12\0\4\5\5\0\1\344\24\5\1\343\3\5\1\0"+
    "\2\5\6\0\1\5\21\0\1\344\31\0\1\344\24\0"+
    "\1\344\21\0\4\5\1\0\7\5\1\345\7\5\12\0"+
    "\4\5\6\0\30\5\1\0\2\5\6\0\1\5\20\0"+
    "\1\346\32\0\1\346\4\0\1\346\41\0\4\5\1\0"+
    "\7\5\1\347\7\5\12\0\4\5\5\0\1\346\4\5"+
    "\1\347\23\5\1\0\2\5\6\0\1\5\4\0\4\5"+
    "\1\0\3\5\1\350\13\5\12\0\4\5\5\0\1\351"+
    "\15\5\1\350\12\5\1\0\2\5\6\0\1\5\14\0"+
    "\1\351\36\0\1\351\15\0\1\351\40\0\1\351\3\0"+
    "\1\346\32\0\1\351\4\0\1\346\10\0\1\351\30\0"+
    "\4\5\1\0\7\5\1\352\7\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\13\5\1\353\3\5\12\0\4\5\5\0\1\354\3\5"+
    "\1\353\24\5\1\0\2\5\6\0\1\5\24\0\1\354"+
    "\26\0\1\354\3\0\1\354\55\0\1\355\33\0\1\355"+
    "\1\0\1\355\44\0\4\5\1\0\6\5\1\356\10\5"+
    "\12\0\4\5\5\0\1\355\1\5\1\356\26\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\5\5\1\357"+
    "\11\5\12\0\4\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\20\0\1\360\32\0\1\360\4\0\1\360\54\0"+
    "\1\355\1\360\3\0\1\354\26\0\1\361\1\0\1\355"+
    "\1\0\1\354\1\360\41\0\4\5\1\0\7\5\1\362"+
    "\7\5\12\0\4\5\5\0\1\360\4\5\1\362\23\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\7\5"+
    "\1\363\7\5\12\0\4\5\6\0\30\5\1\0\2\5"+
    "\6\0\1\5\4\0\4\5\1\0\4\5\1\364\12\5"+
    "\12\0\4\5\6\0\30\5\1\0\2\5\6\0\1\5"+
    "\23\0\1\365\27\0\1\365\11\0\1\365\34\0\4\5"+
    "\1\0\12\5\1\366\4\5\12\0\4\5\5\0\1\365"+
    "\11\5\1\366\16\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\13\5\1\367\3\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\17\5\12\0\4\5\5\0\1\370\12\5\1\371\15\5"+
    "\1\0\2\5\6\0\1\5\53\0\1\370\12\0\1\370"+
    "\33\0\4\5\1\0\5\5\1\372\11\5\12\0\4\5"+
    "\5\0\1\373\14\5\1\372\13\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\17\5\12\0\4\5\5\0"+
    "\1\374\13\5\1\375\14\5\1\0\1\5\1\375\6\0"+
    "\1\5\16\0\1\373\34\0\1\376\13\0\1\374\1\373"+
    "\15\0\1\374\25\0\1\373\34\0\1\373\14\0\1\373"+
    "\100\0\1\374\13\0\1\374\16\0\1\374\25\0\1\373"+
    "\4\0\1\365\27\0\1\377\11\0\1\365\1\370\1\374"+
    "\1\373\15\0\1\374\13\0\4\5\1\0\17\5\12\0"+
    "\4\5\5\0\1\u0100\21\5\1\u0101\6\5\1\0\2\5"+
    "\6\0\1\5\53\0\1\u0100\21\0\1\u0100\40\0\1\u0102"+
    "\32\0\1\u0102\4\0\1\u0102\41\0\4\5\1\0\7\5"+
    "\1\u0103\7\5\12\0\4\5\5\0\1\u0102\4\5\1\u0103"+
    "\23\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\3\5\1\u0104\13\5\12\0\4\5\5\0\1\u0105\15\5"+
    "\1\u0104\12\5\1\0\2\5\6\0\1\5\4\0\4\5"+
    "\1\0\4\5\1\u0106\12\5\12\0\4\5\5\0\1\u0107"+
    "\7\5\1\u0108\20\5\1\0\2\5\6\0\1\5\14\0"+
    "\1\u0105\1\u0107\35\0\1\u0109\7\0\1\u0107\5\0\1\u0105"+
    "\30\0\4\5\1\0\4\5\1\u0108\12\5\12\0\4\5"+
    "\5\0\1\u0107\7\5\1\u0108\20\5\1\0\2\5\6\0"+
    "\1\5\14\0\1\u0105\36\0\1\u0105\15\0\1\u0105\41\0"+
    "\1\u0107\35\0\1\u0107\7\0\1\u0107\46\0\1\u0105\1\u0107"+
    "\2\0\1\u0102\32\0\1\u010a\4\0\1\u0102\2\0\1\u0107"+
    "\5\0\1\u0105\30\0\4\5\1\0\14\5\1\u010b\2\5"+
    "\12\0\4\5\6\0\30\5\1\0\2\5\6\0\1\5"+
    "\20\0\1\u010c\32\0\1\u010c\4\0\1\u010c\41\0\4\5"+
    "\1\0\7\5\1\u010d\7\5\12\0\4\5\5\0\1\u010c"+
    "\4\5\1\u010d\23\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\6\5\1\u010e\10\5\12\0\4\5\5\0"+
    "\1\u010f\1\5\1\u010e\26\5\1\0\2\5\6\0\1\5"+
    "\17\0\1\u010f\33\0\1\u010f\1\0\1\u010f\57\0\1\u010f"+
    "\1\u010c\32\0\1\u010f\1\0\1\u010f\2\0\1\u010c\41\0"+
    "\4\5\1\0\16\5\1\u0110\12\0\4\5\5\0\1\u0111"+
    "\22\5\1\u0110\5\5\1\0\2\5\6\0\1\5\27\0"+
    "\1\u0111\23\0\1\u0111\22\0\1\u0111\43\0\1\u0112\26\0"+
    "\1\u0112\3\0\1\u0112\42\0\4\5\1\0\13\5\1\u0113"+
    "\3\5\12\0\4\5\5\0\1\u0112\3\5\1\u0113\24\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\17\5"+
    "\12\0\1\u0114\3\5\5\0\1\u0115\6\5\1\u0114\21\5"+
    "\1\0\2\5\6\0\1\5\42\0\1\u0115\10\0\1\u0115"+
    "\6\0\1\u0115\57\0\1\u0112\2\0\1\u0111\12\0\1\u0115"+
    "\10\0\1\u0112\3\0\1\u0112\2\0\1\u0115\13\0\1\u0111"+
    "\23\0\4\5\1\0\6\5\1\u0116\10\5\12\0\4\5"+
    "\5\0\1\u0117\1\5\1\u0116\26\5\1\0\2\5\6\0"+
    "\1\5\17\0\1\u0117\33\0\1\u0117\1\0\1\u0117\44\0"+
    "\4\5\1\0\13\5\1\u0118\3\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\5\5\1\u0119\11\5\12\0\4\5\6\0\30\5\1\0"+
    "\2\5\6\0\1\5\55\0\1\u011a\57\0\1\u0117\1\u0102"+
    "\3\0\1\354\26\0\1\u011b\1\0\1\u0117\1\0\1\354"+
    "\1\u0102\14\0\1\u0100\34\0\1\u0105\1\u0107\6\0\1\u0112"+
    "\26\0\1\u011c\3\0\1\u0112\3\0\1\u0107\5\0\1\u0105"+
    "\43\0\1\u011d\33\0\1\u011d\1\0\1\u011d\57\0\1\u011e"+
    "\22\0\1\u0115\10\0\1\u011f\1\0\1\u011e\4\0\1\u0115"+
    "\56\0\1\u0120\27\0\1\u0120\11\0\1\u0120\44\0\1\351"+
    "\2\0\1\u010f\3\0\1\u0120\27\0\1\u0121\1\0\1\u010f"+
    "\7\0\1\u0120\1\370\2\0\1\351\42\0\1\373\2\0"+
    "\1\344\31\0\1\u0122\14\0\1\373\7\0\1\344\33\0"+
    "\1\373\2\0\1\344\31\0\1\u0123\13\0\1\374\1\373"+
    "\7\0\1\344\5\0\1\374\23\0\1\u0105\25\0\1\u0115"+
    "\10\0\1\u0124\6\0\1\u0115\6\0\1\u0105\43\0\1\u0125"+
    "\33\0\1\u0125\1\0\1\u0125\17\0\1\u0100\37\0\1\u0117"+
    "\33\0\1\u0126\1\0\1\u0117\10\0\1\370\43\0\1\u0127"+
    "\1\u0107\1\373\1\u0128\1\u0102\1\344\1\0\1\u0129\1\u012a"+
    "\2\0\1\u0111\12\0\1\u0115\10\0\1\u012b\1\0\1\u0128"+
    "\1\0\1\u012a\1\u0102\1\0\1\u0115\1\u0107\1\0\1\u0129"+
    "\1\370\1\374\1\373\1\u0127\3\0\1\u0100\1\u0111\1\0"+
    "\1\344\5\0\1\374\27\0\1\346\3\0\1\u0112\26\0"+
    "\1\u0112\3\0\1\u0112\1\346\55\0\1\u010c\2\0\1\365"+
    "\27\0\1\u012c\4\0\1\u010c\4\0\1\365\34\0\4\5"+
    "\1\0\6\5\1\u012d\10\5\12\0\4\5\5\0\1\u011d"+
    "\1\5\1\u012d\26\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\12\5\1\u012e\4\5\12\0\4\5\5\0"+
    "\1\u0120\11\5\1\u012e\16\5\1\0\2\5\6\0\1\5"+
    "\17\0\1\u011d\3\0\1\u0120\27\0\1\u012f\1\0\1\u011d"+
    "\7\0\1\u0120\113\0\1\u0130\140\0\1\u0131\115\0\1\u0132"+
    "\101\0\1\u0133\131\0\1\u0134\115\0\1\u0135\72\0\1\u0136"+
    "\140\0\1\u0137\13\0\4\5\1\0\5\5\1\u0138\11\5"+
    "\12\0\4\5\5\0\1\u0139\14\5\1\u0138\13\5\1\0"+
    "\2\5\6\0\1\5\16\0\1\u0139\34\0\1\u0139\14\0"+
    "\1\u0139\31\0\4\5\1\0\10\5\1\u013a\6\5\12\0"+
    "\4\5\6\0\30\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\7\5\1\u013b\7\5\12\0\4\5\5\0"+
    "\1\u013c\4\5\1\u013b\23\5\1\0\2\5\6\0\1\5"+
    "\20\0\1\u013c\32\0\1\u013c\4\0\1\u013c\41\0\4\5"+
    "\1\0\5\5\1\u013d\11\5\12\0\4\5\6\0\30\5"+
    "\1\0\2\5\6\0\1\5\24\0\1\u013e\26\0\1\u013e"+
    "\3\0\1\u013e\42\0\4\5\1\0\13\5\1\u013f\3\5"+
    "\12\0\4\5\5\0\1\u013e\3\5\1\u013f\24\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\7\5\1\u0140"+
    "\7\5\12\0\4\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\4\0\4\5\1\0\17\5\12\0\4\5\5\0"+
    "\1\u0141\21\5\1\u0142\6\5\1\0\2\5\6\0\1\5"+
    "\53\0\1\u0141\21\0\1\u0141\73\0\1\u0143\21\0\1\u0143"+
    "\24\0\4\5\1\0\17\5\12\0\4\5\5\0\1\u0143"+
    "\21\5\1\u0144\6\5\1\0\2\5\6\0\1\5\53\0"+
    "\1\u0145\21\0\1\u0145\44\0\1\u013e\26\0\1\u0146\3\0"+
    "\1\u013e\15\0\1\u0145\24\0\4\5\1\0\6\5\1\u0147"+
    "\10\5\12\0\4\5\5\0\1\u0148\1\5\1\u0147\26\5"+
    "\1\0\2\5\6\0\1\5\17\0\1\u0148\33\0\1\u0148"+
    "\1\0\1\u0148\44\0\4\5\1\0\5\5\1\u0149\11\5"+
    "\12\0\4\5\5\0\1\u014a\21\5\1\u014b\6\5\1\0"+
    "\2\5\6\0\1\5\53\0\1\u014a\21\0\1\u014a\24\0"+
    "\4\5\1\0\17\5\12\0\4\5\5\0\1\u014a\21\5"+
    "\1\u014b\6\5\1\0\2\5\6\0\1\5\17\0\1\u0148"+
    "\33\0\1\u014c\1\0\1\u0148\17\0\1\u014a\24\0\4\5"+
    "\1\0\7\5\1\u014d\7\5\12\0\4\5\6\0\30\5"+
    "\1\0\2\5\6\0\1\5\4\0\4\5\1\0\17\5"+
    "\12\0\1\5\1\u014e\2\5\5\0\1\u014f\1\u014e\27\5"+
    "\1\0\2\5\6\0\1\5\43\0\1\u014f\7\0\2\u014f"+
    "\45\0\4\5\1\0\7\5\1\u0150\7\5\12\0\4\5"+
    "\6\0\30\5\1\0\2\5\6\0\1\5\4\0\4\5"+
    "\1\0\6\5\1\u0151\10\5\12\0\4\5\6\0\30\5"+
    "\1\0\2\5\6\0\1\5\72\0\1\u0152\43\0\1\u013c"+
    "\22\0\1\u014f\7\0\1\u013c\1\u014f\3\0\1\u013c\55\0"+
    "\1\u0153\32\0\1\u0153\4\0\1\u0153\51\0\1\u0154\36\0"+
    "\1\u0154\15\0\1\u0154\42\0\1\u0139\34\0\1\u0141\14\0"+
    "\1\u0139\4\0\1\u0141\36\0\1\u0139\34\0\1\u0145\14\0"+
    "\1\u0139\4\0\1\u0145\40\0\1\u0153\22\0\1\u014f\7\0"+
    "\1\u0155\1\u014f\3\0\1\u0153\51\0\1\u0154\7\0\1\u013e"+
    "\26\0\1\u0156\3\0\1\u013e\11\0\1\u0154\40\0\1\u0154"+
    "\1\0\1\u0139\1\u0148\1\u0157\3\0\1\u013e\16\0\1\u014f"+
    "\7\0\1\u0158\1\u014f\1\u0148\1\0\1\u013e\1\u0157\7\0"+
    "\1\u0139\1\u0154\3\0\1\u0159\24\0\4\5\1\0\7\5"+
    "\1\u015a\7\5\12\0\4\5\5\0\1\u0153\4\5\1\u015a"+
    "\23\5\1\0\2\5\6\0\1\5\4\0\4\5\1\0"+
    "\3\5\1\u015b\13\5\12\0\4\5\5\0\1\u0154\15\5"+
    "\1\u015b\12\5\1\0\2\5\6\0\1\5\14\0\1\u0154"+
    "\3\0\1\u0153\32\0\1\u015c\4\0\1\u0153\10\0\1\u0154"+
    "\103\0\1\u015d\131\0\1\u015e\115\0\1\u015f\115\0\1\u0160"+
    "\115\0\1\u0161\101\0\1\u0162\131\0\1\u0163\26\0\4\5"+
    "\1\0\7\5\1\u0164\7\5\12\0\4\5\6\0\30\5"+
    "\1\0\2\5\6\0\1\5\23\0\1\u0165\27\0\1\u0165"+
    "\11\0\1\u0165\34\0\4\5\1\0\12\5\1\u0166\4\5"+
    "\12\0\4\5\5\0\1\u0165\11\5\1\u0166\16\5\1\0"+
    "\2\5\6\0\1\5\4\0\4\5\1\0\2\5\1\u0167"+
    "\14\5\12\0\4\5\6\0\30\5\1\0\2\5\6\0"+
    "\1\5\53\0\1\u0168\23\0\1\u0168\22\0\4\5\1\0"+
    "\17\5\12\0\4\5\5\0\1\u0168\23\5\1\u0169\4\5"+
    "\1\0\2\5\6\0\1\5\23\0\1\u0165\27\0\1\u016a"+
    "\11\0\1\u0165\11\0\1\u0168\22\0\4\5\1\0\10\5"+
    "\1\u016b\6\5\12\0\4\5\6\0\30\5\1\0\2\5"+
    "\6\0\1\5\20\0\1\u016c\32\0\1\u016c\4\0\1\u016c"+
    "\41\0\4\5\1\0\7\5\1\u016d\7\5\12\0\4\5"+
    "\5\0\1\u016c\4\5\1\u016d\23\5\1\0\2\5\6\0"+
    "\1\5\36\0\1\u016e\35\0\1\u016f\35\0\1\u0170\36\0"+
    "\1\u0170\15\0\1\u0170\40\0\1\u0170\3\0\1\u016c\2\0"+
    "\1\u0165\27\0\1\u0171\4\0\1\u016c\4\0\1\u0165\3\0"+
    "\1\u0170\5\0\1\u0168\36\0\1\u016c\32\0\1\u0172\4\0"+
    "\1\u016c\16\0\1\u0168\22\0\4\5\1\0\3\5\1\u0173"+
    "\13\5\12\0\4\5\5\0\1\u0170\15\5\1\u0173\12\5"+
    "\1\0\2\5\6\0\1\5\62\0\1\u0174\110\0\1\u0175"+
    "\115\0\1\u0176\115\0\1\u0177\115\0\1\u0178\122\0\1\u0179"+
    "\110\0\1\u017a\44\0\4\5\1\0\3\5\1\u017b\13\5"+
    "\12\0\4\5\6\0\30\5\1\0\2\5\6\0\1\5"+
    "\14\0\1\u017c\36\0\1\u017c\15\0\1\u017c\30\0\4\5"+
    "\1\0\3\5\1\u017d\13\5\12\0\4\5\5\0\1\u017c"+
    "\15\5\1\u017d\12\5\1\0\2\5\6\0\1\5\4\0"+
    "\4\5\1\0\5\5\1\u017e\11\5\12\0\4\5\6\0"+
    "\30\5\1\0\2\5\6\0\1\5\26\0\1\u017f\24\0"+
    "\1\u017f\17\0\1\u017f\26\0\4\5\1\0\15\5\1\u0180"+
    "\1\5\12\0\4\5\5\0\1\u017f\17\5\1\u0180\10\5"+
    "\1\0\2\5\6\0\1\5\14\0\1\u017c\11\0\1\u017f"+
    "\24\0\1\u0181\15\0\1\u017c\1\0\1\u017f\55\0\1\u0182"+
    "\120\0\1\u016e\137\0\1\u0183\115\0\1\u0184\115\0\1\u0185"+
    "\115\0\1\u0186\115\0\1\u0187\115\0\1\u0188\115\0\1\u0189"+
    "\60\0\1\u018a\27\0\1\u018a\11\0\1\u018a\34\0\4\5"+
    "\1\0\12\5\1\u018b\4\5\12\0\4\5\5\0\1\u018a"+
    "\11\5\1\u018b\16\5\1\0\2\5\6\0\1\5\33\0"+
    "\1\u018c\101\0\1\u018d\33\0\1\u018d\1\0\1\u018d\44\0"+
    "\4\5\1\0\6\5\1\u018e\10\5\12\0\4\5\5\0"+
    "\1\u018d\1\5\1\u018e\26\5\1\0\2\5\6\0\1\5"+
    "\5\0\23\u018f\1\0\1\u018f\10\0\4\u018f\6\0\30\u018f"+
    "\1\0\2\u018f\2\0\1\u018f\24\0\1\u0190\32\0\1\u0190"+
    "\4\0\1\u0190\41\0\4\5\1\0\7\5\1\u0191\7\5"+
    "\12\0\4\5\5\0\1\u0190\4\5\1\u0191\23\5\1\0"+
    "\2\5\6\0\1\5\5\0\23\u018f\1\0\1\u018f\10\0"+
    "\4\u018f\6\0\30\u018f\1\0\2\u018f\2\0\1\u018f\1\u0192"+
    "\10\0\23\u0193\1\0\1\u0193\10\0\4\u0193\6\0\30\u0193"+
    "\1\0\2\u0193\2\0\1\u0193\4\0\1\u0193\2\0\46\u0193"+
    "\1\u0194\41\u0193\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21684];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\17\1\12\11\3\1\2\11"+
    "\1\1\2\11\22\1\1\0\4\1\1\0\5\1\1\0"+
    "\14\1\1\11\5\1\1\0\2\1\1\11\2\1\1\0"+
    "\10\1\1\0\1\1\2\0\2\1\4\0\1\1\1\0"+
    "\1\1\1\0\2\1\13\0\1\11\1\0\1\11\3\1"+
    "\1\0\1\1\1\0\2\1\2\0\2\1\2\0\2\1"+
    "\2\0\4\1\1\0\3\1\1\0\2\1\4\0\1\1"+
    "\2\0\3\1\1\0\3\1\1\11\2\0\1\11\2\1"+
    "\1\0\3\1\2\0\1\1\2\0\2\1\2\0\1\1"+
    "\1\0\2\1\13\0\1\1\1\0\2\1\2\0\2\1"+
    "\2\0\1\11\7\0\1\11\1\1\1\0\1\1\1\11"+
    "\2\1\1\11\2\1\1\0\1\11\2\1\1\11\4\1"+
    "\1\0\2\1\1\11\2\1\2\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\11\2\1\1\11\1\1\2\11\2\1"+
    "\1\11\1\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\2\0\5\1\1\0\5\1\4\0\1\11"+
    "\4\0\1\1\1\11\2\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\4\1\1\11\1\1\1\0\4\1"+
    "\1\11\2\1\2\0\1\11\10\1\7\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1\2\0"+
    "\1\11\3\1\7\0\1\1\1\11\2\1\1\0\2\1"+
    "\1\0\7\11\1\0\1\1\2\0\1\1\1\0\1\11"+
    "\1\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[404];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  
  private String cadena="";
  private ArrayList<ErrorAnalisis> erroresEnAnalisis;
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  public void iniciarListaDeErrores(ArrayList<ErrorAnalisis> erroresEnAnalisis){
        this.erroresEnAnalisis=erroresEnAnalisis;
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorDeCodigoEmbebido(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3112) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ErrorLexico nuevoError = new ErrorLexico(yyline,yycolumn,"Token no valido:"+yytext());
              erroresEnAnalisis.add(nuevoError);
            } 
            // fall through
          case 84: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 85: break;
          case 3: 
            { return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 86: break;
          case 4: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 87: break;
          case 5: 
            { return symbol(E_A,yytext());
            } 
            // fall through
          case 88: break;
          case 6: 
            { return symbol(E_ITALICA,yytext());
            } 
            // fall through
          case 89: break;
          case 7: 
            { return symbol(E_NEGRILLA,yytext());
            } 
            // fall through
          case 90: break;
          case 8: 
            { return symbol(E_SUBRAYADO,yytext());
            } 
            // fall through
          case 91: break;
          case 9: 
            { return symbol(MAS,yytext());
            } 
            // fall through
          case 92: break;
          case 10: 
            { return symbol(MENOS,yytext());
            } 
            // fall through
          case 93: break;
          case 11: 
            { return symbol(POR,yytext());
            } 
            // fall through
          case 94: break;
          case 12: 
            { return symbol(DIV,yytext());
            } 
            // fall through
          case 95: break;
          case 13: 
            { return symbol(MAYOR,yytext());
            } 
            // fall through
          case 96: break;
          case 14: 
            { return symbol(MENOR,yytext());
            } 
            // fall through
          case 97: break;
          case 15: 
            { return symbol(DOS_PUNTOS,yytext());
            } 
            // fall through
          case 98: break;
          case 16: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 99: break;
          case 17: 
            { return symbol(PARENTESIS_ABIERTO,yytext());
            } 
            // fall through
          case 100: break;
          case 18: 
            { return symbol(PARENTESIS_CERRADO,yytext());
            } 
            // fall through
          case 101: break;
          case 19: 
            { return symbol(E_PARRAFO,yytext());
            } 
            // fall through
          case 102: break;
          case 20: 
            { return symbol(COMA,yytext());
            } 
            // fall through
          case 103: break;
          case 21: 
            { return symbol(PUNTO_COMA,yytext());
            } 
            // fall through
          case 104: break;
          case 22: 
            { return symbol(CORCHETE_ABIERTO,yytext());
            } 
            // fall through
          case 105: break;
          case 23: 
            { return symbol(CORCHETE_CERRADO,yytext());
            } 
            // fall through
          case 106: break;
          case 24: 
            { return symbol(PORCENTAJE,yytext());
            } 
            // fall through
          case 107: break;
          case 25: 
            { return symbol(IF,yytext());
            } 
            // fall through
          case 108: break;
          case 26: 
            { return symbol(TO,yytext());
            } 
            // fall through
          case 109: break;
          case 27: 
            { return symbol(E_BR,yytext());
            } 
            // fall through
          case 110: break;
          case 28: 
            { return symbol(OR,yytext());
            } 
            // fall through
          case 111: break;
          case 29: 
            { return symbol(E_OL,yytext());
            } 
            // fall through
          case 112: break;
          case 30: 
            { return symbol(E_LI,yytext());
            } 
            // fall through
          case 113: break;
          case 31: 
            { return symbol(E_UL,yytext());
            } 
            // fall through
          case 114: break;
          case 32: 
            { return symbol(E_HR,yytext());
            } 
            // fall through
          case 115: break;
          case 33: 
            { System.out.println("ORACION EN LEX:"+yytext());return symbol(ORACION,yytext());
            } 
            // fall through
          case 116: break;
          case 34: 
            { return symbol(ORACION_TIPO_ATRIBUTO,yytext());
            } 
            // fall through
          case 117: break;
          case 35: 
            { return symbol(VAR,yytext());
            } 
            // fall through
          case 118: break;
          case 36: 
            { return symbol(AND,yytext());
            } 
            // fall through
          case 119: break;
          case 37: 
            { return symbol(END,yytext());
            } 
            // fall through
          case 120: break;
          case 38: 
            { return symbol(E_SUB,yytext());
            } 
            // fall through
          case 121: break;
          case 39: 
            { return symbol(E_SUP,yytext());
            } 
            // fall through
          case 122: break;
          case 40: 
            { return symbol(FOR,yytext());
            } 
            // fall through
          case 123: break;
          case 41: 
            { return symbol(LT,"<");
            } 
            // fall through
          case 124: break;
          case 42: 
            { return symbol(GT,">");
            } 
            // fall through
          case 125: break;
          case 43: 
            { return symbol(NAME,yytext());
            } 
            // fall through
          case 126: break;
          case 44: 
            { return symbol(E_NOBR,yytext());
            } 
            // fall through
          case 127: break;
          case 45: 
            { return symbol(TRUE,yytext());
            } 
            // fall through
          case 128: break;
          case 46: 
            { return symbol(TEXT,yytext());
            } 
            // fall through
          case 129: break;
          case 47: 
            { return symbol(THEN,yytext());
            } 
            // fall through
          case 130: break;
          case 48: 
            { return symbol(TYPE,yytext());
            } 
            // fall through
          case 131: break;
          case 49: 
            { return symbol(ELSE,yytext());
            } 
            // fall through
          case 132: break;
          case 50: 
            { return symbol(E_BODY,yytext());
            } 
            // fall through
          case 133: break;
          case 51: 
            { return symbol(LINK,yytext());
            } 
            // fall through
          case 134: break;
          case 52: 
            { return symbol(SIZE,yytext());
            } 
            // fall through
          case 135: break;
          case 53: 
            { return symbol(FACE,yytext());
            } 
            // fall through
          case 136: break;
          case 54: 
            { return symbol(E_FONT,yytext());
            } 
            // fall through
          case 137: break;
          case 55: 
            { return symbol(E_HREF,yytext());
            } 
            // fall through
          case 138: break;
          case 56: 
            { return symbol(E_HTML,yytext());
            } 
            // fall through
          case 139: break;
          case 57: 
            { return symbol(E_HEAD,yytext());
            } 
            // fall through
          case 140: break;
          case 58: 
            { return symbol(AMP,"&");
            } 
            // fall through
          case 141: break;
          case 59: 
            { return symbol(ALIGN,yytext());
            } 
            // fall through
          case 142: break;
          case 60: 
            { return symbol(E_TITLE,yytext());
            } 
            // fall through
          case 143: break;
          case 61: 
            { return symbol(BEGIN,yytext());
            } 
            // fall through
          case 144: break;
          case 62: 
            { return symbol(E_BLINK,yytext());
            } 
            // fall through
          case 145: break;
          case 63: 
            { return symbol(START,yytext());
            } 
            // fall through
          case 146: break;
          case 64: 
            { return symbol(FALSE,yytext());
            } 
            // fall through
          case 147: break;
          case 65: 
            { return symbol(WIDTH,yytext());
            } 
            // fall through
          case 148: break;
          case 66: 
            { return symbol(WHILE,yytext());
            } 
            // fall through
          case 149: break;
          case 67: 
            { return symbol(PRINT,yytext());
            } 
            // fall through
          case 150: break;
          case 68: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 151: break;
          case 69: 
            { return symbol(STRING,yytext());
            } 
            // fall through
          case 152: break;
          case 70: 
            { return symbol(E_STRIKE,yytext());
            } 
            // fall through
          case 153: break;
          case 71: 
            { return symbol(E_CENTER,yytext());
            } 
            // fall through
          case 154: break;
          case 72: 
            { return symbol(INTEGER,yytext());
            } 
            // fall through
          case 155: break;
          case 73: 
            { return symbol(BGCOLOR,yytext());
            } 
            // fall through
          case 156: break;
          case 74: 
            { return symbol(BOOLEAN,yytext());
            } 
            // fall through
          case 157: break;
          case 75: 
            { return symbol(NTILDEM,"Ñ");
            } 
            // fall through
          case 158: break;
          case 76: 
            { return symbol(EACUTE,"é");
            } 
            // fall through
          case 159: break;
          case 77: 
            { return symbol(AACUTE,"á");
            } 
            // fall through
          case 160: break;
          case 78: 
            { return symbol(IACUTE,"í");
            } 
            // fall through
          case 161: break;
          case 79: 
            { return symbol(OACUTE,"ó");
            } 
            // fall through
          case 162: break;
          case 80: 
            { return symbol(NTILDE,"ñ");
            } 
            // fall through
          case 163: break;
          case 81: 
            { return symbol(UACUTE," ú");
            } 
            // fall through
          case 164: break;
          case 82: 
            { return symbol(E_BLOCKQUOTE,yytext());
            } 
            // fall through
          case 165: break;
          case 83: 
            { return symbol(URL,yytext());
            } 
            // fall through
          case 166: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorDeCodigoEmbebido [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorDeCodigoEmbebido scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorDeCodigoEmbebido(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
