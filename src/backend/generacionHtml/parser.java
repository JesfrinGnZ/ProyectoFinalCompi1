
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.generacionHtml;

import java_cup.runtime.*;
import backend.arbolAST.*;
import backend.AccionesMatematicas.*;
import backend.asignacionCreacionDeVariables.*;
import backend.Escritura.*;
import backend.condiciones.*;
import backend.expresiones.*;
import backend.expresionesAritmeticas.*;
import backend.expesionesBooleanas.*;
import backend.expresionesConCadenas.*;
import backend.tablaDeSimbolos.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\030\004\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\002\010\000\002\002\010\000" +
    "\002\003\010\000\002\003\003\000\002\005\004\000\002" +
    "\005\003\000\002\006\007\000\002\006\007\000\002\006" +
    "\007\000\002\006\007\000\002\006\007\000\002\004\010" +
    "\000\002\004\003\000\002\007\004\000\002\007\003\000" +
    "\002\010\007\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\013\010\000\002\013" +
    "\007\000\002\014\004\000\002\014\003\000\002\015\004" +
    "\000\002\015\004\000\002\016\003\000\002\016\003\000" +
    "\002\011\007\000\002\011\007\000\002\011\007\000\002" +
    "\012\007\000\002\012\007\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\006\000\002" +
    "\022\006\000\002\022\005\000\002\022\006\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\005\000\002\020\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\012\062\010\063\015\073\011\101\012\001" +
    "\002\000\014\002\ufffc\062\ufffc\063\ufffc\073\ufffc\101\ufffc" +
    "\001\002\000\014\002\ufffd\062\ufffd\063\ufffd\073\ufffd\101" +
    "\ufffd\001\002\000\014\002\ufffe\062\ufffe\063\ufffe\073\ufffe" +
    "\101\ufffe\001\002\000\014\002\216\062\010\063\015\073" +
    "\011\101\012\001\002\000\004\063\206\001\002\000\014" +
    "\061\023\063\113\067\020\070\024\102\026\001\002\000" +
    "\004\116\073\001\002\000\014\002\uffff\062\uffff\063\uffff" +
    "\073\uffff\101\uffff\001\002\000\014\002\ufffb\062\ufffb\063" +
    "\ufffb\073\ufffb\101\ufffb\001\002\000\004\114\016\001\002" +
    "\000\004\115\017\001\002\000\014\061\023\063\030\067" +
    "\020\070\024\102\026\001\002\000\030\071\uffc2\072\uffc2" +
    "\074\uffc2\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\113" +
    "\uffc2\115\uffc2\121\uffc2\001\002\000\030\071\uffc6\072\uffc6" +
    "\074\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\112\uffc6\113" +
    "\uffc6\115\uffc6\121\uffc6\001\002\000\010\071\047\072\050" +
    "\121\072\001\002\000\030\071\uffc4\072\uffc4\074\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\113\uffc4\115\uffc4" +
    "\121\uffc4\001\002\000\030\071\uffc1\072\uffc1\074\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\111\uffc1\112\uffc1\113\uffc1\115\uffc1" +
    "\121\uffc1\001\002\000\022\071\036\072\044\106\035\107" +
    "\041\112\043\113\042\115\037\121\040\001\002\000\030" +
    "\071\uffc3\072\uffc3\074\uffc3\106\uffc3\107\uffc3\110\uffc3\111" +
    "\uffc3\112\uffc3\113\uffc3\115\uffc3\121\uffc3\001\002\000\030" +
    "\071\uffc9\072\uffc9\074\uffc9\106\uffc9\107\uffc9\110\032\111" +
    "\031\112\uffc9\113\uffc9\115\uffc9\121\uffc9\001\002\000\030" +
    "\071\uffc5\072\uffc5\074\uffc5\106\uffc5\107\uffc5\110\uffc5\111" +
    "\uffc5\112\uffc5\113\uffc5\115\uffc5\121\uffc5\001\002\000\014" +
    "\061\023\063\030\067\020\070\024\102\026\001\002\000" +
    "\014\061\023\063\030\067\020\070\024\102\026\001\002" +
    "\000\030\071\uffc8\072\uffc8\074\uffc8\106\uffc8\107\uffc8\110" +
    "\uffc8\111\uffc8\112\uffc8\113\uffc8\115\uffc8\121\uffc8\001\002" +
    "\000\030\071\uffc7\072\uffc7\074\uffc7\106\uffc7\107\uffc7\110" +
    "\uffc7\111\uffc7\112\uffc7\113\uffc7\115\uffc7\121\uffc7\001\002" +
    "\000\014\061\023\063\030\067\020\070\024\102\026\001" +
    "\002\000\014\061\023\063\030\067\020\070\024\102\026" +
    "\001\002\000\014\061\023\063\030\067\020\070\024\102" +
    "\026\001\002\000\014\002\uffdb\062\uffdb\063\uffdb\073\uffdb" +
    "\101\uffdb\001\002\000\014\061\023\063\030\067\020\070" +
    "\024\102\026\001\002\000\020\061\023\063\030\067\020" +
    "\070\024\102\026\112\061\115\062\001\002\000\016\061" +
    "\023\063\030\067\020\070\024\102\026\115\056\001\002" +
    "\000\014\061\023\063\030\067\020\070\024\102\026\001" +
    "\002\000\012\071\047\072\uffd3\074\uffd3\121\uffd3\001\002" +
    "\000\024\071\036\072\uffd5\074\uffd5\106\035\107\041\112" +
    "\043\113\042\115\037\121\uffd5\001\002\000\014\061\023" +
    "\063\030\067\020\070\024\102\026\001\002\000\014\061" +
    "\023\063\030\067\020\070\024\102\026\001\002\000\012" +
    "\071\047\072\uffd7\074\uffd7\121\uffd7\001\002\000\024\071" +
    "\036\072\uffd9\074\uffd9\106\035\107\041\112\043\113\042" +
    "\115\037\121\uffd9\001\002\000\012\071\uffd6\072\uffd6\074" +
    "\uffd6\121\uffd6\001\002\000\024\071\uffd8\072\uffd8\074\uffd8" +
    "\106\035\107\041\112\043\113\042\115\037\121\uffd8\001" +
    "\002\000\016\071\uffd1\072\uffd1\074\uffd1\106\035\107\041" +
    "\121\uffd1\001\002\000\014\061\023\063\030\067\020\070" +
    "\024\102\026\001\002\000\016\071\uffcf\072\uffcf\074\uffcf" +
    "\106\035\107\041\121\uffcf\001\002\000\016\071\uffd0\072" +
    "\uffd0\074\uffd0\106\035\107\041\121\uffd0\001\002\000\014" +
    "\061\023\063\030\067\020\070\024\102\026\001\002\000" +
    "\014\061\023\063\030\067\020\070\024\102\026\001\002" +
    "\000\016\071\uffce\072\uffce\074\uffce\106\035\107\041\121" +
    "\uffce\001\002\000\016\071\uffcc\072\uffcc\074\uffcc\106\035" +
    "\107\041\121\uffcc\001\002\000\030\071\uffca\072\uffca\074" +
    "\uffca\106\uffca\107\uffca\110\032\111\031\112\uffca\113\uffca" +
    "\115\uffca\121\uffca\001\002\000\016\071\uffcd\072\uffcd\074" +
    "\uffcd\106\035\107\041\121\uffcd\001\002\000\012\071\uffd2" +
    "\072\uffd2\074\uffd2\121\uffd2\001\002\000\024\071\uffd4\072" +
    "\uffd4\074\uffd4\106\035\107\041\112\043\113\042\115\037" +
    "\121\uffd4\001\002\000\030\071\uffcb\072\uffcb\074\uffcb\106" +
    "\uffcb\107\uffcb\110\032\111\031\112\uffcb\113\uffcb\115\uffcb" +
    "\121\uffcb\001\002\000\014\002\uffda\062\uffda\063\uffda\073" +
    "\uffda\101\uffda\001\002\000\006\063\075\102\077\001\002" +
    "\000\006\063\075\102\077\001\002\000\006\117\uffdf\120" +
    "\104\001\002\000\004\117\102\001\002\000\006\117\uffe0" +
    "\120\101\001\002\000\006\063\uffe3\102\uffe3\001\002\000" +
    "\006\063\uffe2\102\uffe2\001\002\000\004\121\103\001\002" +
    "\000\014\002\uffe5\062\uffe5\063\uffe5\073\uffe5\101\uffe5\001" +
    "\002\000\006\063\uffe1\102\uffe1\001\002\000\004\117\107" +
    "\001\002\000\006\063\uffe4\102\uffe4\001\002\000\004\121" +
    "\110\001\002\000\014\002\uffe6\062\uffe6\063\uffe6\073\uffe6" +
    "\101\uffe6\001\002\000\010\071\047\072\050\074\202\001" +
    "\002\000\020\071\036\072\044\106\035\107\041\112\043" +
    "\113\042\115\037\001\002\000\026\071\uffc5\072\uffc5\074" +
    "\114\106\uffc5\107\uffc5\110\uffc5\111\uffc5\112\uffc5\113\uffc5" +
    "\115\uffc5\001\002\000\010\062\116\063\117\104\120\001" +
    "\002\000\004\075\ufff7\001\002\000\004\063\172\001\002" +
    "\000\004\114\164\001\002\000\004\122\155\001\002\000" +
    "\004\075\122\001\002\000\010\062\123\063\125\104\126" +
    "\001\002\000\004\063\145\001\002\000\014\002\ufffa\062" +
    "\ufffa\063\ufffa\073\ufffa\101\ufffa\001\002\000\004\114\137" +
    "\001\002\000\004\122\130\001\002\000\014\002\uffee\062" +
    "\uffee\063\uffee\073\uffee\101\uffee\001\002\000\006\062\123" +
    "\063\125\001\002\000\010\062\123\063\125\123\133\001" +
    "\002\000\010\062\uffec\063\uffec\123\uffec\001\002\000\004" +
    "\105\135\001\002\000\010\062\uffed\063\uffed\123\uffed\001" +
    "\002\000\004\121\136\001\002\000\014\002\uffef\062\uffef" +
    "\063\uffef\073\uffef\101\uffef\001\002\000\004\115\140\001" +
    "\002\000\014\061\023\063\030\067\020\070\024\102\026" +
    "\001\002\000\010\071\047\072\050\121\144\001\002\000" +
    "\022\071\036\072\044\106\035\107\041\112\043\113\042" +
    "\115\037\121\143\001\002\000\016\002\uffe8\062\uffe8\063" +
    "\uffe8\073\uffe8\101\uffe8\123\uffe8\001\002\000\016\002\uffe7" +
    "\062\uffe7\063\uffe7\073\uffe7\101\uffe7\123\uffe7\001\002\000" +
    "\004\114\146\001\002\000\010\064\147\065\151\066\150" +
    "\001\002\000\004\121\154\001\002\000\004\121\153\001" +
    "\002\000\004\121\152\001\002\000\016\002\uffea\062\uffea" +
    "\063\uffea\073\uffea\101\uffea\123\uffea\001\002\000\016\002" +
    "\uffe9\062\uffe9\063\uffe9\073\uffe9\101\uffe9\123\uffe9\001\002" +
    "\000\016\002\uffeb\062\uffeb\063\uffeb\073\uffeb\101\uffeb\123" +
    "\uffeb\001\002\000\006\062\116\063\117\001\002\000\010" +
    "\062\ufff5\063\ufff5\123\ufff5\001\002\000\010\062\116\063" +
    "\117\123\161\001\002\000\010\062\ufff6\063\ufff6\123\ufff6" +
    "\001\002\000\004\105\162\001\002\000\004\121\163\001" +
    "\002\000\004\075\ufff8\001\002\000\004\115\165\001\002" +
    "\000\014\061\023\063\030\067\020\070\024\102\026\001" +
    "\002\000\010\071\047\072\050\121\171\001\002\000\022" +
    "\071\036\072\044\106\035\107\041\112\043\113\042\115" +
    "\037\121\170\001\002\000\012\062\ufff1\063\ufff1\075\ufff1" +
    "\123\ufff1\001\002\000\012\062\ufff0\063\ufff0\075\ufff0\123" +
    "\ufff0\001\002\000\004\114\173\001\002\000\010\064\174" +
    "\065\176\066\175\001\002\000\004\121\201\001\002\000" +
    "\004\121\200\001\002\000\004\121\177\001\002\000\012" +
    "\062\ufff3\063\ufff3\075\ufff3\123\ufff3\001\002\000\012\062" +
    "\ufff2\063\ufff2\075\ufff2\123\ufff2\001\002\000\012\062\ufff4" +
    "\063\ufff4\075\ufff4\123\ufff4\001\002\000\010\062\116\063" +
    "\117\104\120\001\002\000\004\075\204\001\002\000\010" +
    "\062\123\063\125\104\126\001\002\000\014\002\ufff9\062" +
    "\ufff9\063\ufff9\073\ufff9\101\ufff9\001\002\000\004\114\207" +
    "\001\002\000\010\064\210\065\212\066\211\001\002\000" +
    "\004\121\215\001\002\000\004\121\214\001\002\000\004" +
    "\121\213\001\002\000\014\002\uffdd\062\uffdd\063\uffdd\073" +
    "\uffdd\101\uffdd\001\002\000\014\002\uffdc\062\uffdc\063\uffdc" +
    "\073\uffdc\101\uffdc\001\002\000\014\002\uffde\062\uffde\063" +
    "\uffde\073\uffde\101\uffde\001\002\000\004\002\001\001\002" +
    "\000\014\002\000\062\000\063\000\073\000\101\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\016\002\003\011\005\012\004\013\013\030" +
    "\006\031\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\003\011\005\012\004\013" +
    "\013\031\216\001\001\000\002\001\001\000\012\017\111" +
    "\020\026\021\020\022\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\024\020\026\021\020\022\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\033\001\001\000\004\021\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\070\021\020\001\001" +
    "\000\012\017\067\020\026\021\020\022\066\001\001\000" +
    "\010\017\065\020\026\021\020\001\001\000\002\001\001" +
    "\000\006\020\064\021\020\001\001\000\010\017\057\020" +
    "\026\021\020\001\001\000\010\017\054\020\026\021\020" +
    "\001\001\000\012\017\045\020\026\021\020\022\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\053" +
    "\020\026\021\020\022\052\001\001\000\012\017\051\020" +
    "\026\021\020\022\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\056\020\026\021\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\063\020\026\021" +
    "\020\001\001\000\010\017\062\020\026\021\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\073\015\077\016" +
    "\075\001\001\000\006\015\105\016\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\120\006\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\123\010" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\130\010\131\001\001\000\004\010\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\141" +
    "\020\026\021\020\022\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\156\006\155\001\001\000" +
    "\002\001\001\000\004\006\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\166\020\026\021\020\022\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\202\006\114\001\001\000\002\001\001\000\006\004" +
    "\204\010\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Variable> tablaDeSimbolos;
    private ManejadorDeTablaDeSimbolos manejadorDeVariables;//----->Quizas no lo necesitemos
    ArrayList<Nodo> instruccionesParaIf;
    ArrayList<Nodo> instruccionesElseParaIf;
    ArrayList<Nodo> instruccionesPrint;

    // Connect this parser to a scanner!
    public parser(AnalizadorDeCodigoEmbebido lex,ArrayList<Variable> tablaDeSimbolos) {
	super(lex);
        this.tablaDeSimbolos=tablaDeSimbolos;
        this.manejadorDeVariables = new ManejadorDeTablaDeSimbolos(tablaDeSimbolos);
        this.instruccionesParaIf=new ArrayList<>();
        this.instruccionesElseParaIf=new ArrayList<>();
        this.instruccionesPrint=new ArrayList<>();
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        System.out.println("ERROR EN ESTRUCTURA:"+s);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
                System.out.println("ERROR EN ESTRUCTURA:"+s);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conjuntoDeInstrucciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // unaInstruccion ::= declaracionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // unaInstruccion ::= asignacionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // unaInstruccion ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // unaInstruccion ::= escritura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // condicional ::= IF IDENTIFICADOR THEN bloque ELSE bloque2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
              Identificador id=new Identificador(eleft,eright,e);
              Condicion condicion= new Condicion(ileft,iright,id,instruccionesParaIf,instruccionesElseParaIf);
              ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
              manejador.realizarOperaciones();
              instruccionesParaIf=new ArrayList<>();
              instruccionesElseParaIf=new ArrayList<>();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // condicional ::= IF expresionesBooleanas THEN bloque ELSE bloque2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		
                Condicion condicion= new Condicion(ileft,iright,e,instruccionesParaIf,instruccionesElseParaIf);
                ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
                manejador.realizarOperaciones();
                instruccionesParaIf=new ArrayList<>();
                instruccionesElseParaIf=new ArrayList<>();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque ::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas CORCHETE_CERRADO END PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque ::= unaInstruccionCompleja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conjuntoDeInstruccionesComplejas ::= conjuntoDeInstruccionesComplejas unaInstruccionCompleja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conjuntoDeInstruccionesComplejas ::= unaInstruccionCompleja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		instruccionesParaIf.add(new Variable(ileft,iright,i,"entera","0"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesParaIf.add(new Variable(ileft,iright,i,"booleana","true"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesParaIf.add(new Variable(ileft,iright,i,"cadena",""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unaInstruccionCompleja ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesParaIf.add(new Asignacion(i, e, manejadorDeVariables));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unaInstruccionCompleja ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesParaIf.add(new Asignacion(i, e, manejadorDeVariables));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloque2 ::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas2 CORCHETE_CERRADO END PUNTO_COMA 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloque2 ::= unaInstruccionCompleja2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque2",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // conjuntoDeInstruccionesComplejas2 ::= conjuntoDeInstruccionesComplejas2 unaInstruccionCompleja2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conjuntoDeInstruccionesComplejas2 ::= unaInstruccionCompleja2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas2",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unaInstruccionCompleja2 ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		instruccionesElseParaIf.add(new Variable(ileft,iright,i,"entera","0"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unaInstruccionCompleja2 ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesElseParaIf.add(new Variable(ileft,iright,i,"booleana","true"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unaInstruccionCompleja2 ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesElseParaIf.add(new Variable(ileft,iright,i,"cadena",""));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unaInstruccionCompleja2 ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesElseParaIf.add(new Asignacion(i, e, manejadorDeVariables));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // unaInstruccionCompleja2 ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesElseParaIf.add(new Asignacion(i, e, manejadorDeVariables));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // escritura ::= PRINT PARENTESIS_ABIERTO conjuntoDeTexto ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Escritura escritura=new Escritura(ileft,iright,instruccionesPrint);
             ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables);
             man.manejarEscritura();
             instruccionesPrint=new ArrayList<>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // escritura ::= PRINT PARENTESIS_ABIERTO ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		System.out.println("PRINT RECONOCIDO");
 Escritura escritura=new Escritura(ileft,iright,instruccionesPrint);
             ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables);
             man.manejarEscritura();
             instruccionesPrint=new ArrayList<>();
             //Systme.out.println("Tamano de lista:"+instruccionesPrint.size());
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conjuntoDeTexto ::= conjuntoDeTexto unTexto 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // conjuntoDeTexto ::= unTexto 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // unTexto ::= ORACION COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesPrint.add(new Oracion(ileft,iright,i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unTexto ::= IDENTIFICADOR COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		instruccionesPrint.add(new Identificador(ileft, iright,i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ultimaInstruccion ::= ORACION 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		instruccionesPrint.add(new Oracion(ileft,iright,i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimaInstruccion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ultimaInstruccion ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		instruccionesPrint.add(new Identificador(ileft, iright,i));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimaInstruccion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Variable variable = new Variable(ileft,iright,i,"entera","0");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Variable variable = new Variable(ileft,iright,i,"booleana","true");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Variable variable = new Variable(ileft,iright,i,"cadena","");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // asignacionDeVariable ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // asignacionDeVariable ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion a booleana");
                        Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresionesBooleanas ::= expresionesBooleanas OR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresionesBooleanas ::= expresionesBooleanas AND expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresionesBooleanas ::= expresionesBooleanas OR expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresionesBooleanas ::= expresionesBooleanas AND expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresionesBooleanas ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresionesBooleanas ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresionesBooleanas ::= expresion OR expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresionesBooleanas ::= expresion AND expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresionesBooleanas ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,">",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresionesBooleanas ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresionesBooleanas ::= expresion MAYOR IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,">=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresionesBooleanas ::= expresion MENOR IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresionesBooleanas ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresionesBooleanas ::= expresion MENOR MAYOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<>",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion MAS t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MENOS t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // t ::= t POR f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // t ::= t DIV f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // t ::= f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // f ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identificador(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // f ::= NUMERO 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Operando(iright,ileft, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // f ::= ORACION 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Cadena(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // f ::= TRUE 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ValorDeVerdad(ileft,iright,"true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // f ::= FALSE 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ValorDeVerdad(ileft,iright,"false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
