
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.generacionHtml;

import java_cup.runtime.*;
import backend.arbolAST.*;
import backend.AccionesMatematicas.*;
import backend.asignacionCreacionDeVariables.*;
import backend.Escritura.*;
import backend.Etiquetas.*;
import backend.errores.*;
import backend.condiciones.*;
import backend.ciclos.*;
import backend.expresiones.*;
import backend.expresionesAritmeticas.*;
import backend.expesionesBooleanas.*;
import backend.expresionesConCadenas.*;
import backend.tablaDeSimbolos.*;
import frontend.manejadoresDeGui.ManejadorDeTextArea;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\231\000\002\002\004\000\002\040\012\000\002\040" +
    "\012\000\002\040\003\000\002\042\012\000\002\042\022" +
    "\000\002\043\012\000\002\043\003\000\002\044\013\000" +
    "\002\044\012\000\002\044\013\000\002\044\012\000\002" +
    "\044\013\000\002\044\012\000\002\044\010\000\002\044" +
    "\007\000\002\044\003\000\002\045\006\000\002\045\005" +
    "\000\002\045\013\000\002\045\012\000\002\045\013\000" +
    "\002\045\012\000\002\045\013\000\002\045\012\000\002" +
    "\045\013\000\002\045\012\000\002\045\013\000\002\045" +
    "\012\000\002\045\013\000\002\045\012\000\002\045\013" +
    "\000\002\045\012\000\002\045\013\000\002\045\012\000" +
    "\002\045\013\000\002\045\012\000\002\045\016\000\002" +
    "\045\015\000\002\045\014\000\002\045\013\000\002\045" +
    "\013\000\002\045\012\000\002\045\010\000\002\045\007" +
    "\000\002\045\003\000\002\047\003\000\002\047\006\000" +
    "\002\046\003\000\002\046\004\000\002\055\004\000\002" +
    "\055\003\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\050\003\000\002\050\004\000\002\056\004" +
    "\000\002\056\003\000\002\056\005\000\002\056\005\000" +
    "\002\056\005\000\002\056\005\000\002\051\003\000\002" +
    "\051\004\000\002\057\004\000\002\057\003\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\045\003" +
    "\000\002\060\004\000\002\060\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\027\004\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\002\005\000\002\002\005\000\002\003\012" +
    "\000\002\004\010\000\002\004\010\000\002\005\010\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\007\000\002\007\012\000" +
    "\002\007\005\000\002\007\005\000\002\012\010\000\002" +
    "\012\007\000\002\015\004\000\002\015\003\000\002\013" +
    "\004\000\002\013\004\000\002\014\003\000\002\014\003" +
    "\000\002\010\007\000\002\010\007\000\002\010\007\000" +
    "\002\011\007\000\002\011\007\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\006\000" +
    "\002\021\006\000\002\021\005\000\002\021\006\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ff\000\006\003\004\113\005\001\002\000\004\002" +
    "\ufffe\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\112\011\001" +
    "\002\000\006\003\012\113\013\001\002\000\004\113\ufffa" +
    "\001\002\000\006\005\027\007\026\001\002\000\004\113" +
    "\022\001\002\000\004\113\016\001\002\000\004\111\017" +
    "\001\002\000\004\004\020\001\002\000\004\112\021\001" +
    "\002\000\004\002\000\001\002\000\004\111\023\001\002" +
    "\000\004\004\024\001\002\000\004\112\025\001\002\000" +
    "\004\002\uffff\001\002\000\012\033\u01fa\034\u01f8\035\u01f6" +
    "\112\uffd1\001\002\000\004\112\u01e3\001\002\000\004\112" +
    "\031\001\002\000\006\003\032\113\034\001\002\000\004" +
    "\113\ufff1\001\002\000\004\113\u01c6\001\002\000\012\010" +
    "\042\011\040\021\037\124\041\001\002\000\004\112\u01c0" +
    "\001\002\000\004\112\u01ba\001\002\000\014\036\u01b0\037" +
    "\u01af\040\u01ab\041\u01ac\112\uffca\001\002\000\006\036\u01a8" +
    "\112\uffd3\001\002\000\020\003\161\062\157\063\166\073" +
    "\160\076\151\077\153\101\162\001\002\000\004\112\043" +
    "\001\002\000\036\003\054\046\061\047\053\050\057\051" +
    "\063\052\044\053\052\054\050\055\046\056\047\057\051" +
    "\063\064\113\045\114\055\001\002\000\034\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\063\uffb2\113\uffb2\114\uffb2\001\002\000" +
    "\036\012\u0150\013\u0154\014\u014d\015\u0151\016\u014c\017\u0153" +
    "\020\u014b\025\u014a\026\u0147\027\067\030\u0148\031\u0149\032" +
    "\u0152\124\u014f\001\002\000\034\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\063\uffaf\113\uffaf\114\uffaf\001\002\000\034\046\uffae" +
    "\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055" +
    "\uffae\056\uffae\057\uffae\063\uffae\113\uffae\114\uffae\001\002" +
    "\000\034\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\063\uffb0\113\uffb0" +
    "\114\uffb0\001\002\000\034\046\uffad\047\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\063\uffad\113\uffad\114\uffad\001\002\000\034\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\063\uffb1\113\uffb1\114\uffb1\001\002\000" +
    "\034\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\063\uffb5\113\uffb5\114" +
    "\uffb5\001\002\000\004\113\uffd4\001\002\000\034\046\uffb7" +
    "\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055" +
    "\uffb7\056\uffb7\057\uffb7\063\uffb7\113\uffb7\114\uffb7\001\002" +
    "\000\004\113\066\001\002\000\034\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4" +
    "\057\uffb4\063\uffb4\113\uffb4\114\uffb4\001\002\000\034\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\056\uffb9\057\uffb9\063\uffb9\113\uffb9\114\uffb9\001" +
    "\002\000\034\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6" +
    "\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\063\uffb6\113" +
    "\uffb6\114\uffb6\001\002\000\034\046\061\047\053\050\057" +
    "\051\063\052\044\053\052\054\050\055\046\056\047\057" +
    "\051\063\064\113\uffbb\114\055\001\002\000\034\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\063\uffb3\113\uffb3\114\uffb3\001\002" +
    "\000\034\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8\063\uffb8\113\uffb8" +
    "\114\uffb8\001\002\000\034\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\063\uffba\113\uffba\114\uffba\001\002\000\040\012\102\013" +
    "\105\014\077\015\103\016\075\017\106\020\074\025\072" +
    "\026\070\027\067\030\071\031\073\032\104\111\101\124" +
    "\100\001\002\000\012\036\u013f\037\u013e\044\u013b\112\uffc2" +
    "\001\002\000\004\112\u0135\001\002\000\004\112\u012f\001" +
    "\002\000\004\112\u012e\001\002\000\004\045\u0125\001\002" +
    "\000\004\112\u011f\001\002\000\004\112\u0119\001\002\000" +
    "\004\112\u0113\001\002\000\004\112\u010d\001\002\000\020" +
    "\003\161\062\157\063\166\073\160\076\151\077\153\101" +
    "\162\001\002\000\004\010\146\001\002\000\004\112\140" +
    "\001\002\000\004\112\132\001\002\000\004\060\123\001" +
    "\002\000\004\112\115\001\002\000\004\112\107\001\002" +
    "\000\036\003\054\046\061\047\053\050\057\051\063\052" +
    "\044\053\052\054\050\055\046\056\047\057\051\063\064" +
    "\113\045\114\055\001\002\000\004\113\111\001\002\000" +
    "\040\012\102\013\105\014\077\015\103\016\075\017\106" +
    "\020\074\025\072\026\070\027\067\030\071\031\073\032" +
    "\104\111\112\124\100\001\002\000\004\017\113\001\002" +
    "\000\004\112\114\001\002\000\004\113\uffe2\001\002\000" +
    "\036\003\054\046\061\047\053\050\057\051\063\052\044" +
    "\053\052\054\050\055\046\056\047\057\051\063\064\113" +
    "\045\114\055\001\002\000\004\113\117\001\002\000\040" +
    "\012\102\013\105\014\077\015\103\016\075\017\106\020" +
    "\074\025\072\026\070\027\067\030\071\031\073\032\104" +
    "\111\120\124\100\001\002\000\004\013\121\001\002\000" +
    "\004\112\122\001\002\000\004\113\uffea\001\002\000\004" +
    "\112\124\001\002\000\036\003\054\046\061\047\053\050" +
    "\057\051\063\052\044\053\052\054\050\055\046\056\047" +
    "\057\051\063\064\113\045\114\055\001\002\000\004\113" +
    "\126\001\002\000\040\012\102\013\105\014\077\015\103" +
    "\016\075\017\106\020\074\025\072\026\070\027\067\030" +
    "\071\031\073\032\104\111\127\124\100\001\002\000\004" +
    "\032\130\001\002\000\004\112\131\001\002\000\004\113" +
    "\uffda\001\002\000\036\003\054\046\061\047\053\050\057" +
    "\051\063\052\044\053\052\054\050\055\046\056\047\057" +
    "\051\063\064\113\045\114\055\001\002\000\004\113\134" +
    "\001\002\000\040\012\102\013\105\014\077\015\103\016" +
    "\075\017\106\020\074\025\072\026\070\027\067\030\071" +
    "\031\073\032\104\111\135\124\100\001\002\000\004\015" +
    "\136\001\002\000\004\112\137\001\002\000\004\113\uffe6" +
    "\001\002\000\036\003\054\046\061\047\053\050\057\051" +
    "\063\052\044\053\052\054\050\055\046\056\047\057\051" +
    "\063\064\113\045\114\055\001\002\000\004\113\142\001" +
    "\002\000\040\012\102\013\105\014\077\015\103\016\075" +
    "\017\106\020\074\025\072\026\070\027\067\030\071\031" +
    "\073\032\104\111\143\124\100\001\002\000\004\012\144" +
    "\001\002\000\004\112\145\001\002\000\004\113\uffec\001" +
    "\002\000\004\112\147\001\002\000\004\113\ufff6\001\002" +
    "\000\022\003\uffa8\062\uffa8\063\uffa8\073\uffa8\076\uffa8\077" +
    "\uffa8\101\uffa8\124\uffa8\001\002\000\014\061\174\063\u010a" +
    "\067\171\070\176\102\177\001\002\000\022\003\uffa9\062" +
    "\uffa9\063\uffa9\073\uffa9\076\uffa9\077\uffa9\101\uffa9\124\uffa9" +
    "\001\002\000\004\063\u0102\001\002\000\022\003\uffaa\062" +
    "\uffaa\063\uffaa\073\uffaa\076\uffaa\077\uffaa\101\uffaa\124\uffaa" +
    "\001\002\000\022\003\161\062\157\063\166\073\160\076" +
    "\151\077\153\101\162\124\377\001\002\000\022\003\uffa5" +
    "\062\uffa5\063\uffa5\073\uffa5\076\uffa5\077\uffa5\101\uffa5\124" +
    "\uffa5\001\002\000\004\063\367\001\002\000\014\061\174" +
    "\063\264\067\171\070\176\102\177\001\002\000\022\003" +
    "\uffa4\062\uffa4\063\uffa4\073\uffa4\076\uffa4\077\uffa4\101\uffa4" +
    "\124\uffa4\001\002\000\004\116\244\001\002\000\022\003" +
    "\uffab\062\uffab\063\uffab\073\uffab\076\uffab\077\uffab\101\uffab" +
    "\124\uffab\001\002\000\022\003\uffa7\062\uffa7\063\uffa7\073" +
    "\uffa7\076\uffa7\077\uffa7\101\uffa7\124\uffa7\001\002\000\022" +
    "\003\uffa6\062\uffa6\063\uffa6\073\uffa6\076\uffa6\077\uffa6\101" +
    "\uffa6\124\uffa6\001\002\000\004\114\167\001\002\000\004" +
    "\115\170\001\002\000\014\061\174\063\200\067\171\070" +
    "\176\102\177\001\002\000\046\062\uff6a\063\uff6a\071\uff6a" +
    "\072\uff6a\073\uff6a\074\uff6a\076\uff6a\077\uff6a\101\uff6a\104" +
    "\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a\113\uff6a" +
    "\115\uff6a\121\uff6a\001\002\000\046\062\uff6e\063\uff6e\071" +
    "\uff6e\072\uff6e\073\uff6e\074\uff6e\076\uff6e\077\uff6e\101\uff6e" +
    "\104\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e\112\uff6e\113" +
    "\uff6e\115\uff6e\121\uff6e\001\002\000\010\071\220\072\221" +
    "\121\243\001\002\000\046\062\uff6c\063\uff6c\071\uff6c\072" +
    "\uff6c\073\uff6c\074\uff6c\076\uff6c\077\uff6c\101\uff6c\104\uff6c" +
    "\106\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\113\uff6c\115" +
    "\uff6c\121\uff6c\001\002\000\022\071\207\072\215\106\206" +
    "\107\212\112\214\113\213\115\211\121\210\001\002\000" +
    "\046\062\uff69\063\uff69\071\uff69\072\uff69\073\uff69\074\uff69" +
    "\076\uff69\077\uff69\101\uff69\104\uff69\106\uff69\107\uff69\110" +
    "\uff69\111\uff69\112\uff69\113\uff69\115\uff69\121\uff69\001\002" +
    "\000\046\062\uff6b\063\uff6b\071\uff6b\072\uff6b\073\uff6b\074" +
    "\uff6b\076\uff6b\077\uff6b\101\uff6b\104\uff6b\106\uff6b\107\uff6b" +
    "\110\uff6b\111\uff6b\112\uff6b\113\uff6b\115\uff6b\121\uff6b\001" +
    "\002\000\046\062\uff6d\063\uff6d\071\uff6d\072\uff6d\073\uff6d" +
    "\074\uff6d\076\uff6d\077\uff6d\101\uff6d\104\uff6d\106\uff6d\107" +
    "\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\115\uff6d\121\uff6d" +
    "\001\002\000\046\062\uff71\063\uff71\071\uff71\072\uff71\073" +
    "\uff71\074\uff71\076\uff71\077\uff71\101\uff71\104\uff71\106\uff71" +
    "\107\uff71\110\203\111\202\112\uff71\113\uff71\115\uff71\121" +
    "\uff71\001\002\000\014\061\174\063\200\067\171\070\176" +
    "\102\177\001\002\000\014\061\174\063\200\067\171\070" +
    "\176\102\177\001\002\000\046\062\uff70\063\uff70\071\uff70" +
    "\072\uff70\073\uff70\074\uff70\076\uff70\077\uff70\101\uff70\104" +
    "\uff70\106\uff70\107\uff70\110\uff70\111\uff70\112\uff70\113\uff70" +
    "\115\uff70\121\uff70\001\002\000\046\062\uff6f\063\uff6f\071" +
    "\uff6f\072\uff6f\073\uff6f\074\uff6f\076\uff6f\077\uff6f\101\uff6f" +
    "\104\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f\113" +
    "\uff6f\115\uff6f\121\uff6f\001\002\000\014\061\174\063\200" +
    "\067\171\070\176\102\177\001\002\000\014\061\174\063" +
    "\200\067\171\070\176\102\177\001\002\000\022\003\uff83" +
    "\062\uff83\063\uff83\073\uff83\076\uff83\077\uff83\101\uff83\124" +
    "\uff83\001\002\000\014\061\174\063\200\067\171\070\176" +
    "\102\177\001\002\000\014\061\174\063\200\067\171\070" +
    "\176\102\177\001\002\000\020\061\174\063\200\067\171" +
    "\070\176\102\177\112\232\115\233\001\002\000\016\061" +
    "\174\063\200\067\171\070\176\102\177\115\227\001\002" +
    "\000\014\061\174\063\200\067\171\070\176\102\177\001" +
    "\002\000\030\062\uff7b\063\uff7b\071\220\072\uff7b\073\uff7b" +
    "\074\uff7b\076\uff7b\077\uff7b\101\uff7b\104\uff7b\121\uff7b\001" +
    "\002\000\042\062\uff7d\063\uff7d\071\207\072\uff7d\073\uff7d" +
    "\074\uff7d\076\uff7d\077\uff7d\101\uff7d\104\uff7d\106\206\107" +
    "\212\112\214\113\213\115\211\121\uff7d\001\002\000\014" +
    "\061\174\063\200\067\171\070\176\102\177\001\002\000" +
    "\014\061\174\063\200\067\171\070\176\102\177\001\002" +
    "\000\030\062\uff7f\063\uff7f\071\220\072\uff7f\073\uff7f\074" +
    "\uff7f\076\uff7f\077\uff7f\101\uff7f\104\uff7f\121\uff7f\001\002" +
    "\000\042\062\uff81\063\uff81\071\207\072\uff81\073\uff81\074" +
    "\uff81\076\uff81\077\uff81\101\uff81\104\uff81\106\206\107\212" +
    "\112\214\113\213\115\211\121\uff81\001\002\000\030\062" +
    "\uff7e\063\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\076\uff7e" +
    "\077\uff7e\101\uff7e\104\uff7e\121\uff7e\001\002\000\042\062" +
    "\uff80\063\uff80\071\uff80\072\uff80\073\uff80\074\uff80\076\uff80" +
    "\077\uff80\101\uff80\104\uff80\106\206\107\212\112\214\113" +
    "\213\115\211\121\uff80\001\002\000\034\062\uff79\063\uff79" +
    "\071\uff79\072\uff79\073\uff79\074\uff79\076\uff79\077\uff79\101" +
    "\uff79\104\uff79\106\206\107\212\121\uff79\001\002\000\014" +
    "\061\174\063\200\067\171\070\176\102\177\001\002\000" +
    "\034\062\uff77\063\uff77\071\uff77\072\uff77\073\uff77\074\uff77" +
    "\076\uff77\077\uff77\101\uff77\104\uff77\106\206\107\212\121" +
    "\uff77\001\002\000\034\062\uff78\063\uff78\071\uff78\072\uff78" +
    "\073\uff78\074\uff78\076\uff78\077\uff78\101\uff78\104\uff78\106" +
    "\206\107\212\121\uff78\001\002\000\014\061\174\063\200" +
    "\067\171\070\176\102\177\001\002\000\014\061\174\063" +
    "\200\067\171\070\176\102\177\001\002\000\034\062\uff76" +
    "\063\uff76\071\uff76\072\uff76\073\uff76\074\uff76\076\uff76\077" +
    "\uff76\101\uff76\104\uff76\106\206\107\212\121\uff76\001\002" +
    "\000\034\062\uff74\063\uff74\071\uff74\072\uff74\073\uff74\074" +
    "\uff74\076\uff74\077\uff74\101\uff74\104\uff74\106\206\107\212" +
    "\121\uff74\001\002\000\046\062\uff72\063\uff72\071\uff72\072" +
    "\uff72\073\uff72\074\uff72\076\uff72\077\uff72\101\uff72\104\uff72" +
    "\106\uff72\107\uff72\110\203\111\202\112\uff72\113\uff72\115" +
    "\uff72\121\uff72\001\002\000\034\062\uff75\063\uff75\071\uff75" +
    "\072\uff75\073\uff75\074\uff75\076\uff75\077\uff75\101\uff75\104" +
    "\uff75\106\206\107\212\121\uff75\001\002\000\030\062\uff7a" +
    "\063\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\076\uff7a\077" +
    "\uff7a\101\uff7a\104\uff7a\121\uff7a\001\002\000\042\062\uff7c" +
    "\063\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\076\uff7c\077" +
    "\uff7c\101\uff7c\104\uff7c\106\206\107\212\112\214\113\213" +
    "\115\211\121\uff7c\001\002\000\046\062\uff73\063\uff73\071" +
    "\uff73\072\uff73\073\uff73\074\uff73\076\uff73\077\uff73\101\uff73" +
    "\104\uff73\106\uff73\107\uff73\110\203\111\202\112\uff73\113" +
    "\uff73\115\uff73\121\uff73\001\002\000\022\003\uff82\062\uff82" +
    "\063\uff82\073\uff82\076\uff82\077\uff82\101\uff82\124\uff82\001" +
    "\002\000\006\063\246\102\250\001\002\000\006\063\246" +
    "\102\250\001\002\000\006\117\uff87\120\255\001\002\000" +
    "\004\117\253\001\002\000\006\117\uff88\120\252\001\002" +
    "\000\006\063\uff8b\102\uff8b\001\002\000\006\063\uff8a\102" +
    "\uff8a\001\002\000\004\121\254\001\002\000\022\003\uff8d" +
    "\062\uff8d\063\uff8d\073\uff8d\076\uff8d\077\uff8d\101\uff8d\124" +
    "\uff8d\001\002\000\006\063\uff89\102\uff89\001\002\000\004" +
    "\117\260\001\002\000\006\063\uff8c\102\uff8c\001\002\000" +
    "\004\121\261\001\002\000\022\003\uff8e\062\uff8e\063\uff8e" +
    "\073\uff8e\076\uff8e\077\uff8e\101\uff8e\124\uff8e\001\002\000" +
    "\010\071\220\072\221\074\363\001\002\000\020\071\207" +
    "\072\215\106\206\107\212\112\214\113\213\115\211\001" +
    "\002\000\026\071\uff6d\072\uff6d\074\265\106\uff6d\107\uff6d" +
    "\110\uff6d\111\uff6d\112\uff6d\113\uff6d\115\uff6d\001\002\000" +
    "\020\062\271\063\275\073\272\076\266\077\267\101\273" +
    "\104\274\001\002\000\014\061\174\063\360\067\171\070" +
    "\176\102\177\001\002\000\004\063\350\001\002\000\004" +
    "\075\346\001\002\000\004\063\336\001\002\000\014\061" +
    "\174\063\325\067\171\070\176\102\177\001\002\000\004" +
    "\116\314\001\002\000\004\122\305\001\002\000\004\114" +
    "\277\001\002\000\026\003\uff9d\062\uff9d\063\uff9d\073\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\101\uff9d\123\uff9d\124\uff9d\001" +
    "\002\000\004\115\300\001\002\000\014\061\174\063\200" +
    "\067\171\070\176\102\177\001\002\000\010\071\220\072" +
    "\221\121\304\001\002\000\022\071\207\072\215\106\206" +
    "\107\212\112\214\113\213\115\211\121\303\001\002\000" +
    "\026\003\uff97\062\uff97\063\uff97\073\uff97\075\uff97\076\uff97" +
    "\077\uff97\101\uff97\123\uff97\124\uff97\001\002\000\026\003" +
    "\uff96\062\uff96\063\uff96\073\uff96\075\uff96\076\uff96\077\uff96" +
    "\101\uff96\123\uff96\124\uff96\001\002\000\016\062\271\063" +
    "\275\073\272\076\266\077\267\101\273\001\002\000\020" +
    "\062\uff9b\063\uff9b\073\uff9b\076\uff9b\077\uff9b\101\uff9b\123" +
    "\uff9b\001\002\000\020\062\271\063\275\073\272\076\266" +
    "\077\267\101\273\123\311\001\002\000\020\062\uff9c\063" +
    "\uff9c\073\uff9c\076\uff9c\077\uff9c\101\uff9c\123\uff9c\001\002" +
    "\000\004\105\312\001\002\000\004\121\313\001\002\000" +
    "\026\003\uff9e\062\uff9e\063\uff9e\073\uff9e\075\uff9e\076\uff9e" +
    "\077\uff9e\101\uff9e\123\uff9e\124\uff9e\001\002\000\006\063" +
    "\246\102\250\001\002\000\006\063\246\102\250\001\002" +
    "\000\004\117\317\001\002\000\004\121\320\001\002\000" +
    "\026\003\uff92\062\uff92\063\uff92\073\uff92\075\uff92\076\uff92" +
    "\077\uff92\101\uff92\123\uff92\124\uff92\001\002\000\004\117" +
    "\322\001\002\000\004\121\323\001\002\000\026\003\uff93" +
    "\062\uff93\063\uff93\073\uff93\075\uff93\076\uff93\077\uff93\101" +
    "\uff93\123\uff93\124\uff93\001\002\000\010\071\220\072\221" +
    "\074\332\001\002\000\026\071\uff6d\072\uff6d\074\326\106" +
    "\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\115\uff6d" +
    "\001\002\000\020\062\271\063\275\073\272\076\266\077" +
    "\267\101\273\104\274\001\002\000\004\075\330\001\002" +
    "\000\020\062\271\063\275\073\272\076\266\077\267\101" +
    "\273\104\274\001\002\000\026\003\uff95\062\uff95\063\uff95" +
    "\073\uff95\075\uff95\076\uff95\077\uff95\101\uff95\123\uff95\124" +
    "\uff95\001\002\000\020\062\271\063\275\073\272\076\266" +
    "\077\267\101\273\104\274\001\002\000\004\075\334\001" +
    "\002\000\020\062\271\063\275\073\272\076\266\077\267" +
    "\101\273\104\274\001\002\000\026\003\uff94\062\uff94\063" +
    "\uff94\073\uff94\075\uff94\076\uff94\077\uff94\101\uff94\123\uff94" +
    "\124\uff94\001\002\000\004\114\337\001\002\000\010\064" +
    "\340\065\342\066\341\001\002\000\004\121\345\001\002" +
    "\000\004\121\344\001\002\000\004\121\343\001\002\000" +
    "\026\003\uff99\062\uff99\063\uff99\073\uff99\075\uff99\076\uff99" +
    "\077\uff99\101\uff99\123\uff99\124\uff99\001\002\000\026\003" +
    "\uff98\062\uff98\063\uff98\073\uff98\075\uff98\076\uff98\077\uff98" +
    "\101\uff98\123\uff98\124\uff98\001\002\000\026\003\uff9a\062" +
    "\uff9a\063\uff9a\073\uff9a\075\uff9a\076\uff9a\077\uff9a\101\uff9a" +
    "\123\uff9a\124\uff9a\001\002\000\020\062\271\063\275\073" +
    "\272\076\266\077\267\101\273\104\274\001\002\000\022" +
    "\003\uffa0\062\uffa0\063\uffa0\073\uffa0\076\uffa0\077\uffa0\101" +
    "\uffa0\124\uffa0\001\002\000\004\114\351\001\002\000\004" +
    "\115\352\001\002\000\004\061\353\001\002\000\004\100" +
    "\354\001\002\000\004\061\355\001\002\000\020\062\271" +
    "\063\275\073\272\076\266\077\267\101\273\104\274\001" +
    "\002\000\026\003\uff91\062\uff91\063\uff91\073\uff91\075\uff91" +
    "\076\uff91\077\uff91\101\uff91\123\uff91\124\uff91\001\002\000" +
    "\024\062\271\063\275\071\220\072\221\073\272\076\266" +
    "\077\267\101\273\104\274\001\002\000\042\062\271\063" +
    "\275\071\uff6d\072\uff6d\073\272\076\266\077\267\101\273" +
    "\104\274\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113" +
    "\uff6d\115\uff6d\001\002\000\026\003\uff8f\062\uff8f\063\uff8f" +
    "\073\uff8f\075\uff8f\076\uff8f\077\uff8f\101\uff8f\123\uff8f\124" +
    "\uff8f\001\002\000\026\003\uff90\062\uff90\063\uff90\073\uff90" +
    "\075\uff90\076\uff90\077\uff90\101\uff90\123\uff90\124\uff90\001" +
    "\002\000\020\062\271\063\275\073\272\076\266\077\267" +
    "\101\273\104\274\001\002\000\004\075\365\001\002\000" +
    "\020\062\271\063\275\073\272\076\266\077\267\101\273" +
    "\104\274\001\002\000\022\003\uff9f\062\uff9f\063\uff9f\073" +
    "\uff9f\076\uff9f\077\uff9f\101\uff9f\124\uff9f\001\002\000\004" +
    "\114\370\001\002\000\010\064\371\065\373\066\372\001" +
    "\002\000\004\121\376\001\002\000\004\121\375\001\002" +
    "\000\004\121\374\001\002\000\022\003\uff85\062\uff85\063" +
    "\uff85\073\uff85\076\uff85\077\uff85\101\uff85\124\uff85\001\002" +
    "\000\022\003\uff84\062\uff84\063\uff84\073\uff84\076\uff84\077" +
    "\uff84\101\uff84\124\uff84\001\002\000\022\003\uff86\062\uff86" +
    "\063\uff86\073\uff86\076\uff86\077\uff86\101\uff86\124\uff86\001" +
    "\002\000\004\112\u0101\001\002\000\022\003\uffac\062\uffac" +
    "\063\uffac\073\uffac\076\uffac\077\uffac\101\uffac\124\uffac\001" +
    "\002\000\004\113\uffd6\001\002\000\004\114\u0103\001\002" +
    "\000\004\115\u0104\001\002\000\004\061\u0105\001\002\000" +
    "\004\100\u0106\001\002\000\004\061\u0107\001\002\000\020" +
    "\062\271\063\275\073\272\076\266\077\267\101\273\104" +
    "\274\001\002\000\022\003\uffa1\062\uffa1\063\uffa1\073\uffa1" +
    "\076\uffa1\077\uffa1\101\uffa1\124\uffa1\001\002\000\024\062" +
    "\271\063\275\071\220\072\221\073\272\076\266\077\267" +
    "\101\273\104\274\001\002\000\042\062\271\063\275\071" +
    "\uff6d\072\uff6d\073\272\076\266\077\267\101\273\104\274" +
    "\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\115" +
    "\uff6d\001\002\000\022\003\uffa2\062\uffa2\063\uffa2\073\uffa2" +
    "\076\uffa2\077\uffa2\101\uffa2\124\uffa2\001\002\000\022\003" +
    "\uffa3\062\uffa3\063\uffa3\073\uffa3\076\uffa3\077\uffa3\101\uffa3" +
    "\124\uffa3\001\002\000\036\003\054\046\061\047\053\050" +
    "\057\051\063\052\044\053\052\054\050\055\046\056\047" +
    "\057\051\063\064\113\045\114\055\001\002\000\004\113" +
    "\u010f\001\002\000\040\012\102\013\105\014\077\015\103" +
    "\016\075\017\106\020\074\025\072\026\070\027\067\030" +
    "\071\031\073\032\104\111\u0110\124\100\001\002\000\004" +
    "\014\u0111\001\002\000\004\112\u0112\001\002\000\004\113" +
    "\uffe8\001\002\000\036\003\054\046\061\047\053\050\057" +
    "\051\063\052\044\053\052\054\050\055\046\056\047\057" +
    "\051\063\064\113\045\114\055\001\002\000\004\113\u0115" +
    "\001\002\000\040\012\102\013\105\014\077\015\103\016" +
    "\075\017\106\020\074\025\072\026\070\027\067\030\071" +
    "\031\073\032\104\111\u0116\124\100\001\002\000\004\027" +
    "\u0117\001\002\000\004\112\u0118\001\002\000\004\113\uffd8" +
    "\001\002\000\036\003\054\046\061\047\053\050\057\051" +
    "\063\052\044\053\052\054\050\055\046\056\047\057\051" +
    "\063\064\113\045\114\055\001\002\000\004\113\u011b\001" +
    "\002\000\040\012\102\013\105\014\077\015\103\016\075" +
    "\017\106\020\074\025\072\026\070\027\067\030\071\031" +
    "\073\032\104\111\u011c\124\100\001\002\000\004\016\u011d" +
    "\001\002\000\004\112\u011e\001\002\000\004\113\uffe4\001" +
    "\002\000\036\003\054\046\061\047\053\050\057\051\063" +
    "\052\044\053\052\054\050\055\046\056\047\057\051\063" +
    "\064\113\045\114\055\001\002\000\004\113\u0121\001\002" +
    "\000\040\012\102\013\105\014\077\015\103\016\075\017" +
    "\106\020\074\025\072\026\070\027\067\030\071\031\073" +
    "\032\104\111\u0122\124\100\001\002\000\004\020\u0123\001" +
    "\002\000\004\112\u0124\001\002\000\004\113\uffe0\001\002" +
    "\000\004\115\u0126\001\002\000\004\060\u0127\001\002\000" +
    "\004\112\u0128\001\002\000\036\003\054\046\061\047\053" +
    "\050\057\051\063\052\044\053\052\054\050\055\046\056" +
    "\047\057\051\063\064\113\045\114\055\001\002\000\004" +
    "\113\u012a\001\002\000\040\012\102\013\105\014\077\015" +
    "\103\016\075\017\106\020\074\025\072\026\070\027\067" +
    "\030\071\031\073\032\104\111\u012b\124\100\001\002\000" +
    "\004\031\u012c\001\002\000\004\112\u012d\001\002\000\004" +
    "\113\uffdc\001\002\000\004\113\ufff0\001\002\000\036\003" +
    "\054\046\061\047\053\050\057\051\063\052\044\053\052" +
    "\054\050\055\046\056\047\057\051\063\064\113\045\114" +
    "\055\001\002\000\004\113\u0131\001\002\000\040\012\102" +
    "\013\105\014\077\015\103\016\075\017\106\020\074\025" +
    "\072\026\070\027\067\030\071\031\073\032\104\111\u0132" +
    "\124\100\001\002\000\004\030\u0133\001\002\000\004\112" +
    "\u0134\001\002\000\004\113\uffde\001\002\000\036\003\054" +
    "\046\061\047\053\050\057\051\063\052\044\053\052\054" +
    "\050\055\046\056\047\057\051\063\064\113\045\114\055" +
    "\001\002\000\004\113\u0137\001\002\000\040\012\102\013" +
    "\105\014\077\015\103\016\075\017\106\020\074\025\072" +
    "\026\070\027\067\030\071\031\073\032\104\111\u0138\124" +
    "\100\001\002\000\004\026\u0139\001\002\000\004\112\u013a" +
    "\001\002\000\004\113\uffee\001\002\000\004\115\u0145\001" +
    "\002\000\012\036\u013f\037\u013e\044\u013b\112\uffc1\001\002" +
    "\000\012\036\uffbf\037\uffbf\044\uffbf\112\uffbf\001\002\000" +
    "\004\115\u0142\001\002\000\004\115\u0140\001\002\000\004" +
    "\060\u0141\001\002\000\012\036\uffbe\037\uffbe\044\uffbe\112" +
    "\uffbe\001\002\000\004\060\u0143\001\002\000\012\036\uffbc" +
    "\037\uffbc\044\uffbc\112\uffbc\001\002\000\012\036\uffc0\037" +
    "\uffc0\044\uffc0\112\uffc0\001\002\000\004\060\u0146\001\002" +
    "\000\012\036\uffbd\037\uffbd\044\uffbd\112\uffbd\001\002\000" +
    "\004\112\u019f\001\002\000\004\112\u0199\001\002\000\004" +
    "\045\u0190\001\002\000\004\112\u018f\001\002\000\004\112" +
    "\u0189\001\002\000\004\112\u0183\001\002\000\004\112\u017d" +
    "\001\002\000\004\112\u0177\001\002\000\020\003\161\062" +
    "\157\063\166\073\160\076\151\077\153\101\162\001\002" +
    "\000\004\112\u016e\001\002\000\004\112\u0168\001\002\000" +
    "\004\060\u0161\001\002\000\004\112\u015b\001\002\000\004" +
    "\112\u0155\001\002\000\036\003\054\046\061\047\053\050" +
    "\057\051\063\052\044\053\052\054\050\055\046\056\047" +
    "\057\051\063\064\113\045\114\055\001\002\000\004\113" +
    "\u0157\001\002\000\040\012\102\013\105\014\077\015\103" +
    "\016\075\017\106\020\074\025\072\026\070\027\067\030" +
    "\071\031\073\032\104\111\u0158\124\100\001\002\000\004" +
    "\013\u0159\001\002\000\004\112\u015a\001\002\000\004\113" +
    "\uffe9\001\002\000\036\003\054\046\061\047\053\050\057" +
    "\051\063\052\044\053\052\054\050\055\046\056\047\057" +
    "\051\063\064\113\045\114\055\001\002\000\004\113\u015d" +
    "\001\002\000\040\012\102\013\105\014\077\015\103\016" +
    "\075\017\106\020\074\025\072\026\070\027\067\030\071" +
    "\031\073\032\104\111\u015e\124\100\001\002\000\004\017" +
    "\u015f\001\002\000\004\112\u0160\001\002\000\004\113\uffe1" +
    "\001\002\000\004\112\u0162\001\002\000\036\003\054\046" +
    "\061\047\053\050\057\051\063\052\044\053\052\054\050" +
    "\055\046\056\047\057\051\063\064\113\045\114\055\001" +
    "\002\000\004\113\u0164\001\002\000\040\012\102\013\105" +
    "\014\077\015\103\016\075\017\106\020\074\025\072\026" +
    "\070\027\067\030\071\031\073\032\104\111\u0165\124\100" +
    "\001\002\000\004\032\u0166\001\002\000\004\112\u0167\001" +
    "\002\000\004\113\uffd9\001\002\000\036\003\054\046\061" +
    "\047\053\050\057\051\063\052\044\053\052\054\050\055" +
    "\046\056\047\057\051\063\064\113\045\114\055\001\002" +
    "\000\004\113\u016a\001\002\000\040\012\102\013\105\014" +
    "\077\015\103\016\075\017\106\020\074\025\072\026\070" +
    "\027\067\030\071\031\073\032\104\111\u016b\124\100\001" +
    "\002\000\004\015\u016c\001\002\000\004\112\u016d\001\002" +
    "\000\004\113\uffe5\001\002\000\036\003\054\046\061\047" +
    "\053\050\057\051\063\052\044\053\052\054\050\055\046" +
    "\056\047\057\051\063\064\113\045\114\055\001\002\000" +
    "\004\113\u0170\001\002\000\040\012\102\013\105\014\077" +
    "\015\103\016\075\017\106\020\074\025\072\026\070\027" +
    "\067\030\071\031\073\032\104\111\u0171\124\100\001\002" +
    "\000\004\012\u0172\001\002\000\004\112\u0173\001\002\000" +
    "\004\113\uffeb\001\002\000\022\003\161\062\157\063\166" +
    "\073\160\076\151\077\153\101\162\124\u0175\001\002\000" +
    "\004\112\u0176\001\002\000\004\113\uffd5\001\002\000\036" +
    "\003\054\046\061\047\053\050\057\051\063\052\044\053" +
    "\052\054\050\055\046\056\047\057\051\063\064\113\045" +
    "\114\055\001\002\000\004\113\u0179\001\002\000\040\012" +
    "\102\013\105\014\077\015\103\016\075\017\106\020\074" +
    "\025\072\026\070\027\067\030\071\031\073\032\104\111" +
    "\u017a\124\100\001\002\000\004\027\u017b\001\002\000\004" +
    "\112\u017c\001\002\000\004\113\uffd7\001\002\000\036\003" +
    "\054\046\061\047\053\050\057\051\063\052\044\053\052" +
    "\054\050\055\046\056\047\057\051\063\064\113\045\114" +
    "\055\001\002\000\004\113\u017f\001\002\000\040\012\102" +
    "\013\105\014\077\015\103\016\075\017\106\020\074\025" +
    "\072\026\070\027\067\030\071\031\073\032\104\111\u0180" +
    "\124\100\001\002\000\004\014\u0181\001\002\000\004\112" +
    "\u0182\001\002\000\004\113\uffe7\001\002\000\036\003\054" +
    "\046\061\047\053\050\057\051\063\052\044\053\052\054" +
    "\050\055\046\056\047\057\051\063\064\113\045\114\055" +
    "\001\002\000\004\113\u0185\001\002\000\040\012\102\013" +
    "\105\014\077\015\103\016\075\017\106\020\074\025\072" +
    "\026\070\027\067\030\071\031\073\032\104\111\u0186\124" +
    "\100\001\002\000\004\016\u0187\001\002\000\004\112\u0188" +
    "\001\002\000\004\113\uffe3\001\002\000\036\003\054\046" +
    "\061\047\053\050\057\051\063\052\044\053\052\054\050" +
    "\055\046\056\047\057\051\063\064\113\045\114\055\001" +
    "\002\000\004\113\u018b\001\002\000\040\012\102\013\105" +
    "\014\077\015\103\016\075\017\106\020\074\025\072\026" +
    "\070\027\067\030\071\031\073\032\104\111\u018c\124\100" +
    "\001\002\000\004\020\u018d\001\002\000\004\112\u018e\001" +
    "\002\000\004\113\uffdf\001\002\000\004\113\uffef\001\002" +
    "\000\004\115\u0191\001\002\000\004\060\u0192\001\002\000" +
    "\004\112\u0193\001\002\000\036\003\054\046\061\047\053" +
    "\050\057\051\063\052\044\053\052\054\050\055\046\056" +
    "\047\057\051\063\064\113\045\114\055\001\002\000\004" +
    "\113\u0195\001\002\000\040\012\102\013\105\014\077\015" +
    "\103\016\075\017\106\020\074\025\072\026\070\027\067" +
    "\030\071\031\073\032\104\111\u0196\124\100\001\002\000" +
    "\004\031\u0197\001\002\000\004\112\u0198\001\002\000\004" +
    "\113\uffdb\001\002\000\036\003\054\046\061\047\053\050" +
    "\057\051\063\052\044\053\052\054\050\055\046\056\047" +
    "\057\051\063\064\113\045\114\055\001\002\000\004\113" +
    "\u019b\001\002\000\040\012\102\013\105\014\077\015\103" +
    "\016\075\017\106\020\074\025\072\026\070\027\067\030" +
    "\071\031\073\032\104\111\u019c\124\100\001\002\000\004" +
    "\030\u019d\001\002\000\004\112\u019e\001\002\000\004\113" +
    "\uffdd\001\002\000\036\003\054\046\061\047\053\050\057" +
    "\051\063\052\044\053\052\054\050\055\046\056\047\057" +
    "\051\063\064\113\045\114\055\001\002\000\004\113\u01a1" +
    "\001\002\000\040\012\102\013\105\014\077\015\103\016" +
    "\075\017\106\020\074\025\072\026\070\027\067\030\071" +
    "\031\073\032\104\111\u01a2\124\100\001\002\000\004\026" +
    "\u01a3\001\002\000\004\112\u01a4\001\002\000\004\113\uffed" +
    "\001\002\000\022\003\161\062\157\063\166\073\160\076" +
    "\151\077\153\101\162\124\u01a6\001\002\000\004\112\u01a7" +
    "\001\002\000\004\113\ufff2\001\002\000\004\115\u01a9\001" +
    "\002\000\004\060\u01aa\001\002\000\004\112\uffd2\001\002" +
    "\000\004\115\u01b8\001\002\000\004\115\u01b6\001\002\000" +
    "\004\112\uffc7\001\002\000\004\112\uffc9\001\002\000\004" +
    "\115\u01b3\001\002\000\004\115\u01b1\001\002\000\004\060" +
    "\u01b2\001\002\000\004\112\uffc5\001\002\000\004\060\u01b4" +
    "\001\002\000\004\112\uffc6\001\002\000\004\112\uffc8\001" +
    "\002\000\004\060\u01b7\001\002\000\004\112\uffc3\001\002" +
    "\000\004\060\u01b9\001\002\000\004\112\uffc4\001\002\000" +
    "\036\003\054\046\061\047\053\050\057\051\063\052\044" +
    "\053\052\054\050\055\046\056\047\057\051\063\064\113" +
    "\045\114\055\001\002\000\004\113\u01bc\001\002\000\040" +
    "\012\102\013\105\014\077\015\103\016\075\017\106\020" +
    "\074\025\072\026\070\027\067\030\071\031\073\032\104" +
    "\111\u01bd\124\100\001\002\000\004\021\u01be\001\002\000" +
    "\004\112\u01bf\001\002\000\004\113\ufff4\001\002\000\036" +
    "\003\054\046\061\047\053\050\057\051\063\052\044\053" +
    "\052\054\050\055\046\056\047\057\051\063\064\113\045" +
    "\114\055\001\002\000\004\113\u01c2\001\002\000\040\012" +
    "\102\013\105\014\077\015\103\016\075\017\106\020\074" +
    "\025\072\026\070\027\067\030\071\031\073\032\104\111" +
    "\u01c3\124\100\001\002\000\004\011\u01c4\001\002\000\004" +
    "\112\u01c5\001\002\000\004\113\ufff8\001\002\000\014\010" +
    "\u01cb\011\040\021\037\111\u01ca\124\u01c9\001\002\000\004" +
    "\112\u01dd\001\002\000\004\112\u01d7\001\002\000\020\003" +
    "\161\062\157\063\166\073\160\076\151\077\153\101\162" +
    "\001\002\000\004\007\u01d2\001\002\000\004\112\u01cc\001" +
    "\002\000\036\003\054\046\061\047\053\050\057\051\063" +
    "\052\044\053\052\054\050\055\046\056\047\057\051\063" +
    "\064\113\045\114\055\001\002\000\004\113\u01ce\001\002" +
    "\000\040\012\102\013\105\014\077\015\103\016\075\017" +
    "\106\020\074\025\072\026\070\027\067\030\071\031\073" +
    "\032\104\111\u01cf\124\100\001\002\000\004\010\u01d0\001" +
    "\002\000\004\112\u01d1\001\002\000\004\113\ufff7\001\002" +
    "\000\004\112\u01d3\001\002\000\004\113\ufffb\001\002\000" +
    "\022\003\161\062\157\063\166\073\160\076\151\077\153" +
    "\101\162\124\u01d5\001\002\000\004\112\u01d6\001\002\000" +
    "\004\113\ufff3\001\002\000\036\003\054\046\061\047\053" +
    "\050\057\051\063\052\044\053\052\054\050\055\046\056" +
    "\047\057\051\063\064\113\045\114\055\001\002\000\004" +
    "\113\u01d9\001\002\000\040\012\102\013\105\014\077\015" +
    "\103\016\075\017\106\020\074\025\072\026\070\027\067" +
    "\030\071\031\073\032\104\111\u01da\124\100\001\002\000" +
    "\004\021\u01db\001\002\000\004\112\u01dc\001\002\000\004" +
    "\113\ufff5\001\002\000\036\003\054\046\061\047\053\050" +
    "\057\051\063\052\044\053\052\054\050\055\046\056\047" +
    "\057\051\063\064\113\045\114\055\001\002\000\004\113" +
    "\u01df\001\002\000\040\012\102\013\105\014\077\015\103" +
    "\016\075\017\106\020\074\025\072\026\070\027\067\030" +
    "\071\031\073\032\104\111\u01e0\124\100\001\002\000\004" +
    "\011\u01e1\001\002\000\004\112\u01e2\001\002\000\004\113" +
    "\ufff9\001\002\000\004\113\u01e4\001\002\000\006\006\u01e5" +
    "\111\u01e6\001\002\000\004\112\u01eb\001\002\000\004\005" +
    "\u01e7\001\002\000\004\112\u01e8\001\002\000\006\003\012" +
    "\113\u01e9\001\002\000\004\007\026\001\002\000\004\113" +
    "\ufffd\001\002\000\032\046\061\047\053\050\057\051\063" +
    "\052\044\053\052\054\050\055\046\056\047\057\051\063" +
    "\064\114\055\001\002\000\034\046\061\047\053\050\057" +
    "\051\063\052\044\053\052\054\050\055\046\056\047\057" +
    "\051\063\064\113\u01ed\114\055\001\002\000\004\111\u01ee" +
    "\001\002\000\004\006\u01ef\001\002\000\004\112\u01f0\001" +
    "\002\000\004\113\u01f1\001\002\000\004\111\u01f2\001\002" +
    "\000\004\005\u01f3\001\002\000\004\112\u01f4\001\002\000" +
    "\006\003\012\113\u01e9\001\002\000\004\113\ufffc\001\002" +
    "\000\004\115\u0200\001\002\000\012\033\uffce\034\uffce\035" +
    "\uffce\112\uffce\001\002\000\004\115\u01fe\001\002\000\012" +
    "\033\u01fa\034\u01f8\035\u01f6\112\uffd0\001\002\000\004\115" +
    "\u01fb\001\002\000\004\060\u01fc\001\002\000\012\033\uffcd" +
    "\034\uffcd\035\uffcd\112\uffcd\001\002\000\012\033\uffcf\034" +
    "\uffcf\035\uffcf\112\uffcf\001\002\000\004\060\u01ff\001\002" +
    "\000\012\033\uffcc\034\uffcc\035\uffcc\112\uffcc\001\002\000" +
    "\004\060\u0201\001\002\000\012\033\uffcb\034\uffcb\035\uffcb" +
    "\112\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ff\000\004\040\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\014\043\013\001\001\000\002\001" +
    "\001\000\004\046\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\052\u01f6\055" +
    "\u01f8\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\047\034\050\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\053\u01ac\056\u01ad\001\001\000\002\001" +
    "\001\000\022\002\155\003\164\004\147\010\153\011\151" +
    "\012\163\027\u01a4\030\162\001\001\000\002\001\001\000" +
    "\010\045\055\060\061\061\057\001\001\000\002\001\001" +
    "\000\004\051\u014d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\051\075\001\001" +
    "\000\006\054\u013c\057\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\155\003\164\004\147\010\153\011\151" +
    "\012\163\027\154\030\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\107\060\061\061" +
    "\057\001\001\000\002\001\001\000\004\051\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\045\115\060\061\061\057\001\001\000\002\001\001" +
    "\000\004\051\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\124" +
    "\060\061\061\057\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\132\060\061\061\057\001\001\000" +
    "\002\001\001\000\004\051\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\140\060" +
    "\061\061\057\001\001\000\002\001\001\000\004\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\262\017\200\020\171\021\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\155\003\164\004\147\010\153\011\151\012\163\030" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\262\017\200\020\171\021\261\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\174\017\200\020\171\021\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\204\001" +
    "\001\000\004\020\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\241\020\171\001\001\000\012\016" +
    "\240\017\200\020\171\021\237\001\001\000\002\001\001" +
    "\000\010\016\236\017\200\020\171\001\001\000\006\017" +
    "\235\020\171\001\001\000\010\016\230\017\200\020\171" +
    "\001\001\000\010\016\225\017\200\020\171\001\001\000" +
    "\012\016\216\017\200\020\171\021\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\224\017\200\020" +
    "\171\021\223\001\001\000\012\016\222\017\200\020\171" +
    "\021\221\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\016\227\017\200\020\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\234\017\200\020\171\001\001" +
    "\000\010\016\233\017\200\020\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\250\014\246\015\244\001\001" +
    "\000\006\013\256\014\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\267\007\275\001\001\000\012" +
    "\016\262\017\200\020\171\021\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\262" +
    "\017\200\020\171\021\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\301\017\200\020\171\021\300\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\306\007\305\001\001\000" +
    "\002\001\001\000\004\007\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\250\014\315\015\314\001\001\000\006\013\256" +
    "\014\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\326\007\275\001\001\000\002\001\001\000\006\005\330" +
    "\007\275\001\001\000\002\001\001\000\006\005\332\007" +
    "\275\001\001\000\002\001\001\000\006\005\334\007\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\346\007\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\355\007\275\001\001" +
    "\000\002\001\001\000\006\005\361\007\275\001\001\000" +
    "\006\005\360\007\275\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\363\007\275\001\001\000\002\001" +
    "\001\000\006\005\365\007\275\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\u0107\007\275\001\001\000\002\001\001\000\006" +
    "\005\u010b\007\275\001\001\000\006\005\u010a\007\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u010d" +
    "\060\061\061\057\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\u0113\060\061\061\057\001\001\000" +
    "\002\001\001\000\004\051\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\u0119\060" +
    "\061\061\057\001\001\000\002\001\001\000\004\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\u011f\060\061\061\057\001\001\000\002" +
    "\001\001\000\004\051\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\045\u0128\060\061\061" +
    "\057\001\001\000\002\001\001\000\004\051\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\u012f\060\061\061\057\001\001" +
    "\000\002\001\001\000\004\051\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u0135" +
    "\060\061\061\057\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\155\003\164\004" +
    "\147\010\153\011\151\012\163\027\u0173\030\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\u0155\060\061" +
    "\061\057\001\001\000\002\001\001\000\004\051\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\045\u015b\060\061\061\057\001\001\000\002\001" +
    "\001\000\004\051\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\045" +
    "\u0162\060\061\061\057\001\001\000\002\001\001\000\004" +
    "\051\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\u0168\060\061\061\057\001\001" +
    "\000\002\001\001\000\004\051\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u016e" +
    "\060\061\061\057\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\002\155\003\164\004\147\010\153\011" +
    "\151\012\163\030\377\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\u0177\060\061\061\057\001\001\000" +
    "\002\001\001\000\004\051\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\u017d\060" +
    "\061\061\057\001\001\000\002\001\001\000\004\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\u0183\060\061\061\057\001\001\000\002" +
    "\001\001\000\004\051\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\u0189\060\061" +
    "\061\057\001\001\000\002\001\001\000\004\051\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\u0193\060\061\061\057\001\001" +
    "\000\002\001\001\000\004\051\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u0199" +
    "\060\061\061\057\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\u019f\060\061\061\057\001\001\000" +
    "\002\001\001\000\004\051\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\155\003" +
    "\164\004\147\010\153\011\151\012\163\030\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\u01b4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\045\u01ba\060\061\061\057\001" +
    "\001\000\002\001\001\000\004\051\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\045" +
    "\u01c0\060\061\061\057\001\001\000\002\001\001\000\004" +
    "\051\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u01c6\050\u01c7\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\155\003\164\004" +
    "\147\010\153\011\151\012\163\027\u01d3\030\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\045\u01cc\060" +
    "\061\061\057\001\001\000\002\001\001\000\004\051\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\155" +
    "\003\164\004\147\010\153\011\151\012\163\030\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\045\u01d7" +
    "\060\061\061\057\001\001\000\002\001\001\000\004\051" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\u01dd\060\061\061\057\001\001\000" +
    "\002\001\001\000\004\051\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\u01e9\001\001\000\004\046\027\001" +
    "\001\000\002\001\001\000\006\060\u01eb\061\057\001\001" +
    "\000\004\061\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\u01f4\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u01fc\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ManejadorDeTextArea manejadorDeTextArea;
    private ArrayList<Variable> tablaDeSimbolos;
    private ArrayList<ErrorAnalisis> erroresEnAnalisis;
    private String texto;
    private ManejadorDeTablaDeSimbolos manejadorDeVariables;//----->Quizas no lo necesitemos
    ArrayList<Nodo> instruccionesParaIf;
    ArrayList<Nodo> instruccionesElseParaIf;
    ArrayList<Nodo> instruccionesPrint;
    ArrayList<String> textoAEscribir;
    ArrayList<AtributoDeEtiqueta> atributos;
    ArrayList<Etiqueta> etiquetas;

    // Connect this parser to a scanner!
    public parser(AnalizadorDeCodigoEmbebido lex,ArrayList<Variable> tablaDeSimbolos,ManejadorDeTextArea manejadorDeTextArea,ArrayList<ErrorAnalisis> erroresEnAnalisis) {
	super(lex);
        this.manejadorDeTextArea=manejadorDeTextArea;
        this.tablaDeSimbolos=tablaDeSimbolos;
        this.manejadorDeVariables = new ManejadorDeTablaDeSimbolos(tablaDeSimbolos);
        this.erroresEnAnalisis=erroresEnAnalisis;
        this.texto="";
        
        this.instruccionesParaIf=new ArrayList<>();
        this.instruccionesElseParaIf=new ArrayList<>();
        this.instruccionesPrint=new ArrayList<>();
        this.textoAEscribir=new ArrayList<>();
        this.atributos=new ArrayList<>();
        this.etiquetas=new ArrayList<>();
    }

    public String getTexto(){
        return this.texto;
    }

//Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        System.out.println("ERROR EN ESTRUCTURA:"+s.value.toString()+" "+s.left+" "+s.right);
        String lexema = s.value.toString();
        int linea = s.left;
        int columna = s.right;
        ErrorSintactico nuevoError = new ErrorSintactico(linea,columna,"Error sintactico,token:"+lexema);
        erroresEnAnalisis.add(nuevoError);
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
                //System.out.println("ERROR EN ESTRUCTURA:"+s);
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= p EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // p ::= MENOR E_HTML MAYOR p1 MENOR DIV E_HTML MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String total="<html>"+e+"</html>";
    System.out.println("******************************************");
    System.out.println(total);
    texto=total;
    System.out.println("******************************************");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // p ::= MENOR E_HTML MAYOR p2 MENOR DIV E_HTML MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		String total="<html>"+e+"</html>";
    System.out.println("******************************************");
    System.out.println(total);
    texto=total;
    System.out.println("******************************************");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // p ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // p1 ::= MENOR E_HEAD MAYOR MENOR DIV E_HEAD MAYOR p2 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<head></head>"+i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // p1 ::= MENOR E_HEAD MAYOR MENOR E_TITLE MAYOR conjuntoDeTexto2 MENOR DIV E_TITLE MAYOR MENOR DIV E_HEAD MAYOR p2 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="<head><title>"+i+"</title></head>"+e+"\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // p2 ::= MENOR etiquetaBody MAYOR s1 MENOR DIV E_BODY MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<"+i+">"+e+"</body>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // p2 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s1 ::= s1 MENOR etiquetaParrafo MAYOR s2 MENOR DIV E_PARRAFO MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<"+i+">"+f+"</p>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s1 ::= MENOR etiquetaParrafo MAYOR s2 MENOR DIV E_PARRAFO MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<"+i+">"+f+"</p>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s1 ::= s1 MENOR E_CENTER MAYOR s2 MENOR DIV E_CENTER MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<center>"+f+"</center>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s1 ::= MENOR E_CENTER MAYOR s2 MENOR DIV E_CENTER MAYOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<center>"+f+"</center>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s1 ::= s1 MENOR etiquetaFont MAYOR s2 MENOR DIV E_FONT MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<"+i+">"+f+"</font>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s1 ::= MENOR etiquetaFont MAYOR s2 MENOR DIV E_FONT MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<"+i+">"+f+"</font>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s1 ::= s1 MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=e+i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s1 ::= MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s1 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s2 ::= s2 MENOR E_BR MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=e+"<br>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s2 ::= MENOR E_BR MAYOR 
            {
              String RESULT =null;
		RESULT="<br>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s2 ::= s2 MENOR E_NOBR MAYOR s2 MENOR DIV E_NOBR MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<nobr>"+f+"</nobr>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s2 ::= MENOR E_NOBR MAYOR s2 MENOR DIV E_NOBR MAYOR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<nobr>"+f+"</nobr>\n";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s2 ::= s2 MENOR E_NEGRILLA MAYOR s2 MENOR DIV E_NEGRILLA MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<b>"+i+"</b>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s2 ::= MENOR E_NEGRILLA MAYOR s2 MENOR DIV E_NEGRILLA MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<b>"+i+"</b>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s2 ::= s2 MENOR E_SUBRAYADO MAYOR s2 MENOR DIV E_SUBRAYADO MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<u>"+i+"</u>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s2 ::= MENOR E_SUBRAYADO MAYOR s2 MENOR DIV E_SUBRAYADO MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<u>"+i+"</u>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s2 ::= s2 MENOR E_ITALICA MAYOR s2 MENOR DIV E_ITALICA MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<i>"+i+"</i>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s2 ::= MENOR E_ITALICA MAYOR s2 MENOR DIV E_ITALICA MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<i>"+i+"</i>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s2 ::= s2 MENOR E_STRIKE MAYOR s2 MENOR DIV E_STRIKE MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<strike>"+i+"</strike>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s2 ::= MENOR E_STRIKE MAYOR s2 MENOR DIV E_STRIKE MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<strike>"+i+"</strike>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s2 ::= s2 MENOR E_BLINK MAYOR s2 MENOR DIV E_BLINK MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<blink>"+i+"</blink>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s2 ::= MENOR E_BLINK MAYOR s2 MENOR DIV E_BLINK MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<blink>"+i+"</blink>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s2 ::= s2 MENOR E_SUB MAYOR s2 MENOR DIV E_SUB MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<sub>"+i+"</sub>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s2 ::= MENOR E_SUB MAYOR s2 MENOR DIV E_SUB MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<sub>"+i+"</sub>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s2 ::= s2 MENOR E_SUP MAYOR s2 MENOR DIV E_SUP MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<sup>"+i+"</sup>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s2 ::= MENOR E_SUP MAYOR s2 MENOR DIV E_SUP MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<sup>"+i+"</sup>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s2 ::= s2 MENOR E_BLOCKQUOTE MAYOR s2 MENOR DIV E_BLOCKQUOTE MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<blockquote>"+i+"</blockquote>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s2 ::= MENOR E_BLOCKQUOTE MAYOR s2 MENOR DIV E_BLOCKQUOTE MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<blockquote>"+i+"</blockquote>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s2 ::= s2 MENOR E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_A MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<a name ="+i+">"+f+"</a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s2 ::= MENOR E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_A MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<a name ="+i+">"+f+"</a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s2 ::= s2 MENOR E_HREF ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_HREF MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<a href ="+i+">"+f+"</a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s2 ::= MENOR E_HREF ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_HREF MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<a name ="+i+">"+f+"</a>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s2 ::= s2 MENOR etiquetaHR MAYOR s2 MENOR DIV E_HR MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT=e+"<"+i+">"+f+"</hr>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s2 ::= MENOR etiquetaHR MAYOR s2 MENOR DIV E_HR MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT="<"+i+">"+f+"</hr>";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s2 ::= s2 MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=e+i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // s2 ::= MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // s2 ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetaParrafo ::= E_PARRAFO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaParrafo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetaParrafo ::= E_PARRAFO ALIGN IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e+f+g;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaParrafo",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiquetaBody ::= E_BODY 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaBody",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiquetaBody ::= E_BODY atributosBody 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaBody",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributosBody ::= atributosBody unAtributoBody 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosBody",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributosBody ::= unAtributoBody 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosBody",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unAtributoBody ::= BGCOLOR IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="bgcolor ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributoBody",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unAtributoBody ::= TEXT IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="text ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributoBody",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unAtributoBody ::= LINK IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="link ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributoBody",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // etiquetaFont ::= E_FONT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaFont",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // etiquetaFont ::= E_FONT atributosFont 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaFont",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributosFont ::= atributosFont unAtributoFont 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributosFont ::= unAtributoFont 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributosFont ::= SIZE IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="size ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributosFont ::= ALIGN IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="align ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // atributosFont ::= FACE IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="face ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // atributosFont ::= COLOR IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="color ="+i+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // etiquetaHR ::= E_HR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaHR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // etiquetaHR ::= E_HR atributosHR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaHR",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributosHR ::= atributosHR unAtributosHr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosHR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atributosHR ::= unAtributosHr 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosHR",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unAtributosHr ::= ALIGN IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="align="+i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributosHr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unAtributosHr ::= WIDTH IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="width="+i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributosHr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unAtributosHr ::= SIZE IGUAL ORACION_TIPO_ATRIBUTO 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="size=+i";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributosHr",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // s2 ::= conjuntoDeTexto2 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conjuntoDeTexto2 ::= conjuntoDeTexto2 texto2 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conjuntoDeTexto2 ::= texto2 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                     RESULT=e;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto2",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // texto2 ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // texto2 ::= DOS_PUNTOS 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // texto2 ::= LT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // texto2 ::= GT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // texto2 ::= AMP 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // texto2 ::= AACUTE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // texto2 ::= EACUTE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // texto2 ::= IACUTE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // texto2 ::= OACUTE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // texto2 ::= UACUTE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // texto2 ::= NTILDEM 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // texto2 ::= NTILDE 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto2",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i+e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unaInstruccion ::= declaracionDeVariable 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // unaInstruccion ::= asignacionDeVariable 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // unaInstruccion ::= condicional 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unaInstruccion ::= escritura 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unaInstruccion ::= cicloFor 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unaInstruccion ::= cicloWhile 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unaInstruccion ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // cicloWhile ::= WHILE expresionesBooleanas bloque 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloWhile cicloWhile = new CicloWhile(ileft,iright,e,f);
               ManejadorDeCicloWhile manW= new ManejadorDeCicloWhile(cicloWhile,manejadorDeVariables,erroresEnAnalisis);
               manW.realizarOperaciones();
               RESULT=cicloWhile.getTexto();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWhile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // cicloWhile ::= WHILE IDENTIFICADOR bloque 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Identificador id=new Identificador(eleft,eright,e);
               CicloWhile cicloWhile = new CicloWhile(ileft,iright,id,f);
               ManejadorDeCicloWhile manW= new ManejadorDeCicloWhile(cicloWhile,manejadorDeVariables,erroresEnAnalisis);
               manW.realizarOperaciones();
               RESULT=cicloWhile.getTexto();
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWhile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // cicloFor ::= FOR IDENTIFICADOR DOS_PUNTOS IGUAL NUMERO TO NUMERO bloque 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloFor cicloF = new CicloFor(ileft,iright,f,g,h,e,manejadorDeVariables);
            ManejadorDeCicloFor man=new ManejadorDeCicloFor(cicloF,manejadorDeVariables,erroresEnAnalisis);
            man.realizarOperaciones();
            RESULT=cicloF.getTexto();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // condicional ::= IF IDENTIFICADOR THEN bloque ELSE bloque 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Identificador id=new Identificador(eleft,eright,e);
              Condicion condicion= new Condicion(ileft,iright,id,f,g);
              ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables,erroresEnAnalisis);
              manejador.realizarOperaciones();
              //instruccionesParaIf=new ArrayList<>();
              //instruccionesElseParaIf=new ArrayList<>();
              RESULT=condicion.getTexto();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // condicional ::= IF expresionesBooleanas THEN bloque ELSE bloque 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Condicion condicion= new Condicion(ileft,iright,e,f,g);
                ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables,erroresEnAnalisis);
                manejador.realizarOperaciones();
                RESULT=condicion.getTexto();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // bloque ::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas CORCHETE_CERRADO END PUNTO_COMA 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> i = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // bloque ::= unaInstruccionCompleja 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> lista=new ArrayList<>();
           lista.add(i);
           RESULT=lista;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // conjuntoDeInstruccionesComplejas ::= conjuntoDeInstruccionesComplejas unaInstruccionCompleja 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> i = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    i.add(e);
    RESULT=i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // conjuntoDeInstruccionesComplejas ::= unaInstruccionCompleja 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> lista=new ArrayList<>();
                                     lista.add(i);
                                     RESULT=lista;   
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Variable(ileft,iright,i,"entera","0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Variable(ileft,iright,i,"booleana","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Variable(ileft,iright,i,"cadena","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unaInstruccionCompleja ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Asignacion(i, e, manejadorDeVariables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unaInstruccionCompleja ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Asignacion(i, e, manejadorDeVariables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unaInstruccionCompleja ::= IF IDENTIFICADOR THEN bloque ELSE bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ACCION SI");Identificador id=new Identificador(eleft,eright,e);
                        Condicion condicion= new Condicion(ileft,iright,id,f,g);
                        RESULT =condicion;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unaInstruccionCompleja ::= IF expresionesBooleanas THEN bloque ELSE bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Accion con booleanas");
                        Condicion condicion= new Condicion(ileft,iright,e,f,g);
                        RESULT =condicion;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unaInstruccionCompleja ::= PRINT PARENTESIS_ABIERTO conjuntoDeTexto ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            e.add(f);
            Escritura escritura=new Escritura(ileft,iright,e);
            RESULT=escritura;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unaInstruccionCompleja ::= PRINT PARENTESIS_ABIERTO ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Nodo> lista = new ArrayList<>();
            lista.add(e);
            Escritura escritura=new Escritura(ileft,iright,lista);
            RESULT =escritura;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unaInstruccionCompleja ::= FOR IDENTIFICADOR DOS_PUNTOS IGUAL NUMERO TO NUMERO bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloFor cicloF = new CicloFor(ileft,iright,f,g,h,e,manejadorDeVariables);
              RESULT =cicloF;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unaInstruccionCompleja ::= WHILE expresionesBooleanas bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloWhile cicloWhile = new CicloWhile(ileft,iright,e,f);
                RESULT = cicloWhile;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unaInstruccionCompleja ::= WHILE IDENTIFICADOR bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Identificador id=new Identificador(eleft,eright,e);
               CicloWhile cicloWhile = new CicloWhile(ileft,iright,id,f);
               RESULT=cicloWhile;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // escritura ::= PRINT PARENTESIS_ABIERTO conjuntoDeTexto ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            e.add(f);
            Escritura escritura=new Escritura(ileft,iright,e);
             ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables,erroresEnAnalisis);
             man.manejarEscritura();
             RESULT=escritura.getTextoGenerado();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // escritura ::= PRINT PARENTESIS_ABIERTO ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("PRINT RECONOCIDO");
            ArrayList<Nodo> lista = new ArrayList<>();
            lista.add(e);
            Escritura escritura=new Escritura(ileft,iright,lista);
            ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables,erroresEnAnalisis);
            man.manejarEscritura();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conjuntoDeTexto ::= conjuntoDeTexto unTexto 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> i = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		i.add(e);
                    RESULT=i;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // conjuntoDeTexto ::= unTexto 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> lista = new ArrayList<>();
                    lista.add(e);
                    RESULT=lista;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unTexto ::= ORACION COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Oracion(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unTexto ::= IDENTIFICADOR COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new Identificador(ileft, iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ultimaInstruccion ::= ORACION 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new Oracion(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimaInstruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ultimaInstruccion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identificador(ileft, iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimaInstruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Variable variable = new Variable(ileft,iright,i,"entera","0");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable,erroresEnAnalisis);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Variable variable = new Variable(ileft,iright,i,"booleana","true");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable,erroresEnAnalisis);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Variable variable = new Variable(ileft,iright,i,"cadena","");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable,erroresEnAnalisis);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // asignacionDeVariable ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true,erroresEnAnalisis);
                        nuevaAsignacion.asignacionDeVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // asignacionDeVariable ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion a booleana");
                        Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true,erroresEnAnalisis);
                        nuevaAsignacion.asignacionDeVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionesBooleanas ::= expresionesBooleanas OR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresionesBooleanas ::= expresionesBooleanas AND expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresionesBooleanas ::= expresionesBooleanas OR expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresionesBooleanas ::= expresionesBooleanas AND expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expresionesBooleanas ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expresionesBooleanas ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expresionesBooleanas ::= expresion OR expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expresionesBooleanas ::= expresion AND expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expresionesBooleanas ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,">",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expresionesBooleanas ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expresionesBooleanas ::= expresion MAYOR IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,">=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expresionesBooleanas ::= expresion MENOR IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expresionesBooleanas ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expresionesBooleanas ::= expresion MENOR MAYOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<>",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expresion ::= expresion MAS t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expresion ::= expresion MENOS t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresion ::= t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // t ::= t POR f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // t ::= t DIV f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // t ::= f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // f ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identificador(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // f ::= NUMERO 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Operando(iright,ileft, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // f ::= ORACION 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Cadena(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // f ::= TRUE 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ValorDeVerdad(ileft,iright,"true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // f ::= FALSE 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ValorDeVerdad(ileft,iright,"false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
