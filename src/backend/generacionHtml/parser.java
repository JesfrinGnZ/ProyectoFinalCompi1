
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package backend.generacionHtml;

import java_cup.runtime.*;
import backend.arbolAST.*;
import backend.AccionesMatematicas.*;
import backend.asignacionCreacionDeVariables.*;
import backend.Escritura.*;
import backend.Etiquetas.*;
import backend.condiciones.*;
import backend.ciclos.*;
import backend.expresiones.*;
import backend.expresionesAritmeticas.*;
import backend.expesionesBooleanas.*;
import backend.expresionesConCadenas.*;
import backend.tablaDeSimbolos.*;
import frontend.manejadoresDeGui.ManejadorDeTextArea;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\214\000\002\002\004\000\002\040\012\000\002\040" +
    "\012\000\002\041\012\000\002\041\022\000\002\042\012" +
    "\000\002\043\013\000\002\043\012\000\002\043\013\000" +
    "\002\043\012\000\002\043\013\000\002\043\012\000\002" +
    "\043\013\000\002\043\012\000\002\043\013\000\002\043" +
    "\012\000\002\043\013\000\002\043\012\000\002\043\010" +
    "\000\002\043\007\000\002\044\013\000\002\044\012\000" +
    "\002\044\013\000\002\044\012\000\002\044\013\000\002" +
    "\044\012\000\002\044\013\000\002\044\012\000\002\044" +
    "\013\000\002\044\012\000\002\044\013\000\002\044\012" +
    "\000\002\044\013\000\002\044\012\000\002\044\013\000" +
    "\002\044\012\000\002\044\021\000\002\044\020\000\002" +
    "\044\015\000\002\044\014\000\002\044\013\000\002\044" +
    "\012\000\002\044\010\000\002\044\007\000\002\046\003" +
    "\000\002\046\006\000\002\045\003\000\002\045\004\000" +
    "\002\054\004\000\002\054\003\000\002\051\005\000\002" +
    "\051\005\000\002\051\005\000\002\047\003\000\002\047" +
    "\004\000\002\055\004\000\002\055\003\000\002\055\005" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\050\003\000\002\050\004\000\002\056\004\000\002" +
    "\056\003\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\044\003\000\002\015\004\000\002\015\003" +
    "\000\002\033\003\000\002\033\003\000\002\027\004\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\002\005\000\002\002\005\000\002\003\012" +
    "\000\002\004\010\000\002\004\010\000\002\005\010\000" +
    "\002\005\003\000\002\006\004\000\002\006\003\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\010\000\002\007\010" +
    "\000\002\007\010\000\002\007\007\000\002\007\012\000" +
    "\002\007\005\000\002\007\005\000\002\012\010\000\002" +
    "\012\007\000\002\015\004\000\002\015\003\000\002\013" +
    "\004\000\002\013\004\000\002\014\003\000\002\014\003" +
    "\000\002\010\007\000\002\010\007\000\002\010\007\000" +
    "\002\011\007\000\002\011\007\000\002\021\005\000\002" +
    "\021\005\000\002\021\005\000\002\021\005\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\006\000" +
    "\002\021\006\000\002\021\005\000\002\021\006\000\002" +
    "\016\005\000\002\016\005\000\002\016\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\004\113\004\001\002\000\004\004\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\112\010\001\002\000\004\113\011\001\002\000" +
    "\006\005\025\007\024\001\002\000\004\113\020\001\002" +
    "\000\004\113\014\001\002\000\004\111\015\001\002\000" +
    "\004\004\016\001\002\000\004\112\017\001\002\000\004" +
    "\002\000\001\002\000\004\111\021\001\002\000\004\004" +
    "\022\001\002\000\004\112\023\001\002\000\004\002\uffff" +
    "\001\002\000\004\112\062\001\002\000\004\112\026\001" +
    "\002\000\004\113\027\001\002\000\006\006\030\111\031" +
    "\001\002\000\004\112\036\001\002\000\004\005\032\001" +
    "\002\000\004\112\033\001\002\000\004\113\034\001\002" +
    "\000\004\007\024\001\002\000\004\113\ufffe\001\002\000" +
    "\010\063\041\102\043\114\044\001\002\000\012\063\uffbb" +
    "\102\uffbb\113\uffbb\114\uffbb\001\002\000\012\063\041\102" +
    "\043\113\050\114\044\001\002\000\014\063\uffba\102\uffba" +
    "\113\uffba\114\uffba\120\046\001\002\000\012\063\uff98\102" +
    "\uff98\113\uff98\114\uff98\001\002\000\004\120\045\001\002" +
    "\000\012\063\uffb9\102\uffb9\113\uffb9\114\uffb9\001\002\000" +
    "\012\063\uff97\102\uff97\113\uff97\114\uff97\001\002\000\012" +
    "\063\uff96\102\uff96\113\uff96\114\uff96\001\002\000\012\063" +
    "\uffbc\102\uffbc\113\uffbc\114\uffbc\001\002\000\004\111\052" +
    "\001\002\000\012\063\uff99\102\uff99\113\uff99\114\uff99\001" +
    "\002\000\004\006\053\001\002\000\004\112\054\001\002" +
    "\000\004\113\055\001\002\000\004\111\056\001\002\000" +
    "\004\005\057\001\002\000\004\112\060\001\002\000\004" +
    "\113\034\001\002\000\004\113\ufffd\001\002\000\004\113" +
    "\064\001\002\000\004\113\u01e2\001\002\000\020\007\071" +
    "\010\066\011\074\021\076\025\067\026\065\124\072\001" +
    "\002\000\004\112\u01dc\001\002\000\004\112\u01d6\001\002" +
    "\000\004\112\u01d0\001\002\000\004\112\u01ca\001\002\000" +
    "\012\033\u01c2\034\u01c1\035\u01be\112\uffd3\001\002\000\016" +
    "\062\230\063\236\073\231\076\222\077\224\101\232\001" +
    "\002\000\004\112\u01b5\001\002\000\006\036\u01b2\112\uffd5" +
    "\001\002\000\004\112\116\001\002\000\014\036\104\037" +
    "\103\040\077\041\100\112\uffcc\001\002\000\004\115\114" +
    "\001\002\000\004\115\112\001\002\000\004\112\uffc9\001" +
    "\002\000\004\112\uffcb\001\002\000\004\115\107\001\002" +
    "\000\004\115\105\001\002\000\004\060\106\001\002\000" +
    "\004\112\uffc7\001\002\000\004\060\110\001\002\000\004" +
    "\112\uffc8\001\002\000\004\112\uffca\001\002\000\004\060" +
    "\113\001\002\000\004\112\uffc5\001\002\000\004\060\115" +
    "\001\002\000\004\112\uffc6\001\002\000\012\063\041\102" +
    "\043\113\121\114\044\001\002\000\004\113\u01ae\001\002" +
    "\000\012\063\041\102\043\113\uffbd\114\044\001\002\000" +
    "\032\012\132\013\135\014\130\015\133\016\126\017\136" +
    "\020\125\027\122\030\123\031\124\032\134\124\131\001" +
    "\002\000\012\036\u01a6\037\u01a5\044\u01a2\112\uffc4\001\002" +
    "\000\004\112\u019c\001\002\000\004\045\u0190\001\002\000" +
    "\004\112\u018a\001\002\000\004\112\u0184\001\002\000\004" +
    "\112\u017e\001\002\000\004\112\u0178\001\002\000\016\062" +
    "\230\063\236\073\231\076\222\077\224\101\232\001\002" +
    "\000\004\112\u016f\001\002\000\004\112\u0169\001\002\000" +
    "\004\060\u0161\001\002\000\004\112\u015b\001\002\000\004" +
    "\112\137\001\002\000\012\063\041\102\043\113\121\114" +
    "\044\001\002\000\004\113\141\001\002\000\034\012\152" +
    "\013\156\014\147\015\153\016\145\017\155\020\144\027" +
    "\122\030\142\031\143\032\154\111\151\124\150\001\002" +
    "\000\004\112\u0155\001\002\000\004\045\u0149\001\002\000" +
    "\004\112\u0143\001\002\000\004\112\u013d\001\002\000\004" +
    "\112\u0137\001\002\000\004\112\u0131\001\002\000\016\062" +
    "\230\063\236\073\231\076\222\077\224\101\232\001\002" +
    "\000\004\017\217\001\002\000\004\112\211\001\002\000" +
    "\004\112\203\001\002\000\004\060\173\001\002\000\004" +
    "\112\165\001\002\000\004\112\157\001\002\000\012\063" +
    "\041\102\043\113\121\114\044\001\002\000\004\113\161" +
    "\001\002\000\034\012\152\013\156\014\147\015\153\016" +
    "\145\017\155\020\144\027\122\030\142\031\143\032\154" +
    "\111\162\124\150\001\002\000\004\013\163\001\002\000" +
    "\004\112\164\001\002\000\004\113\uffeb\001\002\000\012" +
    "\063\041\102\043\113\121\114\044\001\002\000\004\113" +
    "\167\001\002\000\034\012\152\013\156\014\147\015\153" +
    "\016\145\017\155\020\144\027\122\030\142\031\143\032" +
    "\154\111\170\124\150\001\002\000\004\017\171\001\002" +
    "\000\004\112\172\001\002\000\004\113\uffe3\001\002\000" +
    "\004\112\174\001\002\000\012\063\041\102\043\113\121" +
    "\114\044\001\002\000\004\113\176\001\002\000\034\012" +
    "\152\013\156\014\147\015\153\016\145\017\155\020\144" +
    "\027\122\030\142\031\143\032\154\111\177\124\150\001" +
    "\002\000\004\032\200\001\002\000\004\060\201\001\002" +
    "\000\004\112\202\001\002\000\004\113\uffdb\001\002\000" +
    "\012\063\041\102\043\113\121\114\044\001\002\000\004" +
    "\113\205\001\002\000\034\012\152\013\156\014\147\015" +
    "\153\016\145\017\155\020\144\027\122\030\142\031\143" +
    "\032\154\111\206\124\150\001\002\000\004\015\207\001" +
    "\002\000\004\112\210\001\002\000\004\113\uffe7\001\002" +
    "\000\012\063\041\102\043\113\121\114\044\001\002\000" +
    "\004\113\213\001\002\000\034\012\152\013\156\014\147" +
    "\015\153\016\145\017\155\020\144\027\122\030\142\031" +
    "\143\032\154\111\214\124\150\001\002\000\004\012\215" +
    "\001\002\000\004\112\216\001\002\000\004\113\uffed\001" +
    "\002\000\004\112\220\001\002\000\004\113\uffe2\001\002" +
    "\000\020\062\uffb4\063\uffb4\073\uffb4\076\uffb4\077\uffb4\101" +
    "\uffb4\124\uffb4\001\002\000\014\061\242\063\u012e\067\241" +
    "\070\246\102\247\001\002\000\020\062\uffb5\063\uffb5\073" +
    "\uffb5\076\uffb5\077\uffb5\101\uffb5\124\uffb5\001\002\000\004" +
    "\063\u0126\001\002\000\020\062\uffb6\063\uffb6\073\uffb6\076" +
    "\uffb6\077\uffb6\101\uffb6\124\uffb6\001\002\000\020\062\230" +
    "\063\236\073\231\076\222\077\224\101\232\124\u0123\001" +
    "\002\000\020\062\uffb1\063\uffb1\073\uffb1\076\uffb1\077\uffb1" +
    "\101\uffb1\124\uffb1\001\002\000\004\063\u011b\001\002\000" +
    "\014\061\242\063\330\067\241\070\246\102\247\001\002" +
    "\000\004\116\314\001\002\000\020\062\uffb7\063\uffb7\073" +
    "\uffb7\076\uffb7\077\uffb7\101\uffb7\124\uffb7\001\002\000\020" +
    "\062\uffb3\063\uffb3\073\uffb3\076\uffb3\077\uffb3\101\uffb3\124" +
    "\uffb3\001\002\000\020\062\uffb2\063\uffb2\073\uffb2\076\uffb2" +
    "\077\uffb2\101\uffb2\124\uffb2\001\002\000\004\114\237\001" +
    "\002\000\004\115\240\001\002\000\014\061\242\063\251" +
    "\067\241\070\246\102\247\001\002\000\046\062\uff77\063" +
    "\uff77\071\uff77\072\uff77\073\uff77\074\uff77\076\uff77\077\uff77" +
    "\101\uff77\104\uff77\106\uff77\107\uff77\110\uff77\111\uff77\112" +
    "\uff77\113\uff77\115\uff77\121\uff77\001\002\000\046\062\uff79" +
    "\063\uff79\071\uff79\072\uff79\073\uff79\074\uff79\076\uff79\077" +
    "\uff79\101\uff79\104\uff79\106\uff79\107\uff79\110\uff79\111\uff79" +
    "\112\uff79\113\uff79\115\uff79\121\uff79\001\002\000\046\062" +
    "\uff7b\063\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\076\uff7b" +
    "\077\uff7b\101\uff7b\104\uff7b\106\uff7b\107\uff7b\110\uff7b\111" +
    "\uff7b\112\uff7b\113\uff7b\115\uff7b\121\uff7b\001\002\000\010" +
    "\071\270\072\271\121\313\001\002\000\022\071\257\072" +
    "\265\106\256\107\262\112\264\113\263\115\260\121\261" +
    "\001\002\000\046\062\uff76\063\uff76\071\uff76\072\uff76\073" +
    "\uff76\074\uff76\076\uff76\077\uff76\101\uff76\104\uff76\106\uff76" +
    "\107\uff76\110\uff76\111\uff76\112\uff76\113\uff76\115\uff76\121" +
    "\uff76\001\002\000\046\062\uff78\063\uff78\071\uff78\072\uff78" +
    "\073\uff78\074\uff78\076\uff78\077\uff78\101\uff78\104\uff78\106" +
    "\uff78\107\uff78\110\uff78\111\uff78\112\uff78\113\uff78\115\uff78" +
    "\121\uff78\001\002\000\046\062\uff7e\063\uff7e\071\uff7e\072" +
    "\uff7e\073\uff7e\074\uff7e\076\uff7e\077\uff7e\101\uff7e\104\uff7e" +
    "\106\uff7e\107\uff7e\110\253\111\252\112\uff7e\113\uff7e\115" +
    "\uff7e\121\uff7e\001\002\000\046\062\uff7a\063\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\074\uff7a\076\uff7a\077\uff7a\101\uff7a\104" +
    "\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a" +
    "\115\uff7a\121\uff7a\001\002\000\014\061\242\063\251\067" +
    "\241\070\246\102\247\001\002\000\014\061\242\063\251" +
    "\067\241\070\246\102\247\001\002\000\046\062\uff7d\063" +
    "\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\076\uff7d\077\uff7d" +
    "\101\uff7d\104\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d\112" +
    "\uff7d\113\uff7d\115\uff7d\121\uff7d\001\002\000\046\062\uff7c" +
    "\063\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c\076\uff7c\077" +
    "\uff7c\101\uff7c\104\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c" +
    "\112\uff7c\113\uff7c\115\uff7c\121\uff7c\001\002\000\014\061" +
    "\242\063\251\067\241\070\246\102\247\001\002\000\014" +
    "\061\242\063\251\067\241\070\246\102\247\001\002\000" +
    "\014\061\242\063\251\067\241\070\246\102\247\001\002" +
    "\000\020\062\uff90\063\uff90\073\uff90\076\uff90\077\uff90\101" +
    "\uff90\124\uff90\001\002\000\014\061\242\063\251\067\241" +
    "\070\246\102\247\001\002\000\020\061\242\063\251\067" +
    "\241\070\246\102\247\112\302\115\303\001\002\000\016" +
    "\061\242\063\251\067\241\070\246\102\247\115\277\001" +
    "\002\000\014\061\242\063\251\067\241\070\246\102\247" +
    "\001\002\000\030\062\uff88\063\uff88\071\270\072\uff88\073" +
    "\uff88\074\uff88\076\uff88\077\uff88\101\uff88\104\uff88\121\uff88" +
    "\001\002\000\042\062\uff8a\063\uff8a\071\257\072\uff8a\073" +
    "\uff8a\074\uff8a\076\uff8a\077\uff8a\101\uff8a\104\uff8a\106\256" +
    "\107\262\112\264\113\263\115\260\121\uff8a\001\002\000" +
    "\014\061\242\063\251\067\241\070\246\102\247\001\002" +
    "\000\014\061\242\063\251\067\241\070\246\102\247\001" +
    "\002\000\030\062\uff8c\063\uff8c\071\270\072\uff8c\073\uff8c" +
    "\074\uff8c\076\uff8c\077\uff8c\101\uff8c\104\uff8c\121\uff8c\001" +
    "\002\000\042\062\uff8e\063\uff8e\071\257\072\uff8e\073\uff8e" +
    "\074\uff8e\076\uff8e\077\uff8e\101\uff8e\104\uff8e\106\256\107" +
    "\262\112\264\113\263\115\260\121\uff8e\001\002\000\030" +
    "\062\uff8b\063\uff8b\071\uff8b\072\uff8b\073\uff8b\074\uff8b\076" +
    "\uff8b\077\uff8b\101\uff8b\104\uff8b\121\uff8b\001\002\000\042" +
    "\062\uff8d\063\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\076" +
    "\uff8d\077\uff8d\101\uff8d\104\uff8d\106\256\107\262\112\264" +
    "\113\263\115\260\121\uff8d\001\002\000\034\062\uff86\063" +
    "\uff86\071\uff86\072\uff86\073\uff86\074\uff86\076\uff86\077\uff86" +
    "\101\uff86\104\uff86\106\256\107\262\121\uff86\001\002\000" +
    "\014\061\242\063\251\067\241\070\246\102\247\001\002" +
    "\000\034\062\uff84\063\uff84\071\uff84\072\uff84\073\uff84\074" +
    "\uff84\076\uff84\077\uff84\101\uff84\104\uff84\106\256\107\262" +
    "\121\uff84\001\002\000\034\062\uff85\063\uff85\071\uff85\072" +
    "\uff85\073\uff85\074\uff85\076\uff85\077\uff85\101\uff85\104\uff85" +
    "\106\256\107\262\121\uff85\001\002\000\014\061\242\063" +
    "\251\067\241\070\246\102\247\001\002\000\014\061\242" +
    "\063\251\067\241\070\246\102\247\001\002\000\034\062" +
    "\uff83\063\uff83\071\uff83\072\uff83\073\uff83\074\uff83\076\uff83" +
    "\077\uff83\101\uff83\104\uff83\106\256\107\262\121\uff83\001" +
    "\002\000\034\062\uff81\063\uff81\071\uff81\072\uff81\073\uff81" +
    "\074\uff81\076\uff81\077\uff81\101\uff81\104\uff81\106\256\107" +
    "\262\121\uff81\001\002\000\046\062\uff7f\063\uff7f\071\uff7f" +
    "\072\uff7f\073\uff7f\074\uff7f\076\uff7f\077\uff7f\101\uff7f\104" +
    "\uff7f\106\uff7f\107\uff7f\110\253\111\252\112\uff7f\113\uff7f" +
    "\115\uff7f\121\uff7f\001\002\000\034\062\uff82\063\uff82\071" +
    "\uff82\072\uff82\073\uff82\074\uff82\076\uff82\077\uff82\101\uff82" +
    "\104\uff82\106\256\107\262\121\uff82\001\002\000\030\062" +
    "\uff87\063\uff87\071\uff87\072\uff87\073\uff87\074\uff87\076\uff87" +
    "\077\uff87\101\uff87\104\uff87\121\uff87\001\002\000\042\062" +
    "\uff89\063\uff89\071\uff89\072\uff89\073\uff89\074\uff89\076\uff89" +
    "\077\uff89\101\uff89\104\uff89\106\256\107\262\112\264\113" +
    "\263\115\260\121\uff89\001\002\000\046\062\uff80\063\uff80" +
    "\071\uff80\072\uff80\073\uff80\074\uff80\076\uff80\077\uff80\101" +
    "\uff80\104\uff80\106\uff80\107\uff80\110\253\111\252\112\uff80" +
    "\113\uff80\115\uff80\121\uff80\001\002\000\020\062\uff8f\063" +
    "\uff8f\073\uff8f\076\uff8f\077\uff8f\101\uff8f\124\uff8f\001\002" +
    "\000\010\063\316\102\320\114\044\001\002\000\010\063" +
    "\316\102\320\114\044\001\002\000\014\063\uffba\102\uffba" +
    "\114\uffba\117\uff94\120\046\001\002\000\004\117\321\001" +
    "\002\000\006\117\uff95\120\045\001\002\000\004\121\322" +
    "\001\002\000\020\062\uff9a\063\uff9a\073\uff9a\076\uff9a\077" +
    "\uff9a\101\uff9a\124\uff9a\001\002\000\004\117\324\001\002" +
    "\000\004\121\325\001\002\000\020\062\uff9b\063\uff9b\073" +
    "\uff9b\076\uff9b\077\uff9b\101\uff9b\124\uff9b\001\002\000\010" +
    "\071\270\072\271\074\u0117\001\002\000\020\071\257\072" +
    "\265\106\256\107\262\112\264\113\263\115\260\001\002" +
    "\000\026\071\uff7a\072\uff7a\074\331\106\uff7a\107\uff7a\110" +
    "\uff7a\111\uff7a\112\uff7a\113\uff7a\115\uff7a\001\002\000\020" +
    "\062\335\063\342\073\336\076\332\077\333\101\337\104" +
    "\340\001\002\000\014\061\242\063\u0114\067\241\070\246" +
    "\102\247\001\002\000\004\063\u010c\001\002\000\004\075" +
    "\u010a\001\002\000\004\063\u0102\001\002\000\014\061\242" +
    "\063\371\067\241\070\246\102\247\001\002\000\004\116" +
    "\360\001\002\000\004\122\351\001\002\000\024\062\uffaa" +
    "\063\uffaa\073\uffaa\075\uffaa\076\uffaa\077\uffaa\101\uffaa\123" +
    "\uffaa\124\uffaa\001\002\000\004\114\343\001\002\000\004" +
    "\115\344\001\002\000\014\061\242\063\251\067\241\070" +
    "\246\102\247\001\002\000\010\071\270\072\271\121\350" +
    "\001\002\000\022\071\257\072\265\106\256\107\262\112" +
    "\264\113\263\115\260\121\347\001\002\000\024\062\uffa4" +
    "\063\uffa4\073\uffa4\075\uffa4\076\uffa4\077\uffa4\101\uffa4\123" +
    "\uffa4\124\uffa4\001\002\000\024\062\uffa3\063\uffa3\073\uffa3" +
    "\075\uffa3\076\uffa3\077\uffa3\101\uffa3\123\uffa3\124\uffa3\001" +
    "\002\000\016\062\335\063\342\073\336\076\332\077\333" +
    "\101\337\001\002\000\020\062\uffa8\063\uffa8\073\uffa8\076" +
    "\uffa8\077\uffa8\101\uffa8\123\uffa8\001\002\000\020\062\335" +
    "\063\342\073\336\076\332\077\333\101\337\123\354\001" +
    "\002\000\004\105\356\001\002\000\020\062\uffa9\063\uffa9" +
    "\073\uffa9\076\uffa9\077\uffa9\101\uffa9\123\uffa9\001\002\000" +
    "\004\121\357\001\002\000\024\062\uffab\063\uffab\073\uffab" +
    "\075\uffab\076\uffab\077\uffab\101\uffab\123\uffab\124\uffab\001" +
    "\002\000\010\063\316\102\320\114\044\001\002\000\010" +
    "\063\316\102\320\114\044\001\002\000\004\117\363\001" +
    "\002\000\004\121\364\001\002\000\024\062\uff9f\063\uff9f" +
    "\073\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\123\uff9f\124" +
    "\uff9f\001\002\000\004\117\366\001\002\000\004\121\367" +
    "\001\002\000\024\062\uffa0\063\uffa0\073\uffa0\075\uffa0\076" +
    "\uffa0\077\uffa0\101\uffa0\123\uffa0\124\uffa0\001\002\000\010" +
    "\071\270\072\271\074\376\001\002\000\026\071\uff7a\072" +
    "\uff7a\074\372\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a" +
    "\113\uff7a\115\uff7a\001\002\000\020\062\335\063\342\073" +
    "\336\076\332\077\333\101\337\104\340\001\002\000\004" +
    "\075\374\001\002\000\020\062\335\063\342\073\336\076" +
    "\332\077\333\101\337\104\340\001\002\000\024\062\uffa2" +
    "\063\uffa2\073\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2\123" +
    "\uffa2\124\uffa2\001\002\000\020\062\335\063\342\073\336" +
    "\076\332\077\333\101\337\104\340\001\002\000\004\075" +
    "\u0100\001\002\000\020\062\335\063\342\073\336\076\332" +
    "\077\333\101\337\104\340\001\002\000\024\062\uffa1\063" +
    "\uffa1\073\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1\123\uffa1" +
    "\124\uffa1\001\002\000\004\114\u0103\001\002\000\010\064" +
    "\u0104\065\u0106\066\u0105\001\002\000\004\121\u0109\001\002" +
    "\000\004\121\u0108\001\002\000\004\121\u0107\001\002\000" +
    "\024\062\uffa6\063\uffa6\073\uffa6\075\uffa6\076\uffa6\077\uffa6" +
    "\101\uffa6\123\uffa6\124\uffa6\001\002\000\024\062\uffa5\063" +
    "\uffa5\073\uffa5\075\uffa5\076\uffa5\077\uffa5\101\uffa5\123\uffa5" +
    "\124\uffa5\001\002\000\024\062\uffa7\063\uffa7\073\uffa7\075" +
    "\uffa7\076\uffa7\077\uffa7\101\uffa7\123\uffa7\124\uffa7\001\002" +
    "\000\020\062\335\063\342\073\336\076\332\077\333\101" +
    "\337\104\340\001\002\000\020\062\uffad\063\uffad\073\uffad" +
    "\076\uffad\077\uffad\101\uffad\124\uffad\001\002\000\004\114" +
    "\u010d\001\002\000\004\115\u010e\001\002\000\004\061\u010f" +
    "\001\002\000\004\100\u0110\001\002\000\004\061\u0111\001" +
    "\002\000\020\062\335\063\342\073\336\076\332\077\333" +
    "\101\337\104\340\001\002\000\024\062\uff9e\063\uff9e\073" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\101\uff9e\123\uff9e\124\uff9e" +
    "\001\002\000\024\062\335\063\342\071\270\072\271\073" +
    "\336\076\332\077\333\101\337\104\340\001\002\000\042" +
    "\062\335\063\342\071\uff7a\072\uff7a\073\336\076\332\077" +
    "\333\101\337\104\340\106\uff7a\107\uff7a\110\uff7a\111\uff7a" +
    "\112\uff7a\113\uff7a\115\uff7a\001\002\000\024\062\uff9c\063" +
    "\uff9c\073\uff9c\075\uff9c\076\uff9c\077\uff9c\101\uff9c\123\uff9c" +
    "\124\uff9c\001\002\000\024\062\uff9d\063\uff9d\073\uff9d\075" +
    "\uff9d\076\uff9d\077\uff9d\101\uff9d\123\uff9d\124\uff9d\001\002" +
    "\000\020\062\335\063\342\073\336\076\332\077\333\101" +
    "\337\104\340\001\002\000\004\075\u0119\001\002\000\020" +
    "\062\335\063\342\073\336\076\332\077\333\101\337\104" +
    "\340\001\002\000\020\062\uffac\063\uffac\073\uffac\076\uffac" +
    "\077\uffac\101\uffac\124\uffac\001\002\000\004\114\u011c\001" +
    "\002\000\010\064\u011d\065\u011f\066\u011e\001\002\000\004" +
    "\121\u0122\001\002\000\004\121\u0121\001\002\000\004\121" +
    "\u0120\001\002\000\020\062\uff92\063\uff92\073\uff92\076\uff92" +
    "\077\uff92\101\uff92\124\uff92\001\002\000\020\062\uff91\063" +
    "\uff91\073\uff91\076\uff91\077\uff91\101\uff91\124\uff91\001\002" +
    "\000\020\062\uff93\063\uff93\073\uff93\076\uff93\077\uff93\101" +
    "\uff93\124\uff93\001\002\000\004\112\u0125\001\002\000\020" +
    "\062\uffb8\063\uffb8\073\uffb8\076\uffb8\077\uffb8\101\uffb8\124" +
    "\uffb8\001\002\000\004\113\uffd7\001\002\000\004\114\u0127" +
    "\001\002\000\004\115\u0128\001\002\000\004\061\u0129\001" +
    "\002\000\004\100\u012a\001\002\000\004\061\u012b\001\002" +
    "\000\020\062\335\063\342\073\336\076\332\077\333\101" +
    "\337\104\340\001\002\000\020\062\uffae\063\uffae\073\uffae" +
    "\076\uffae\077\uffae\101\uffae\124\uffae\001\002\000\024\062" +
    "\335\063\342\071\270\072\271\073\336\076\332\077\333" +
    "\101\337\104\340\001\002\000\042\062\335\063\342\071" +
    "\uff7a\072\uff7a\073\336\076\332\077\333\101\337\104\340" +
    "\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a\115" +
    "\uff7a\001\002\000\020\062\uffaf\063\uffaf\073\uffaf\076\uffaf" +
    "\077\uffaf\101\uffaf\124\uffaf\001\002\000\020\062\uffb0\063" +
    "\uffb0\073\uffb0\076\uffb0\077\uffb0\101\uffb0\124\uffb0\001\002" +
    "\000\012\063\041\102\043\113\121\114\044\001\002\000" +
    "\004\113\u0133\001\002\000\034\012\152\013\156\014\147" +
    "\015\153\016\145\017\155\020\144\027\122\030\142\031" +
    "\143\032\154\111\u0134\124\150\001\002\000\004\014\u0135" +
    "\001\002\000\004\112\u0136\001\002\000\004\113\uffe9\001" +
    "\002\000\012\063\041\102\043\113\121\114\044\001\002" +
    "\000\004\113\u0139\001\002\000\034\012\152\013\156\014" +
    "\147\015\153\016\145\017\155\020\144\027\122\030\142" +
    "\031\143\032\154\111\u013a\124\150\001\002\000\004\027" +
    "\122\001\002\000\004\112\u013c\001\002\000\004\113\uffd9" +
    "\001\002\000\012\063\041\102\043\113\121\114\044\001" +
    "\002\000\004\113\u013f\001\002\000\034\012\152\013\156" +
    "\014\147\015\153\016\145\017\155\020\144\027\122\030" +
    "\142\031\143\032\154\111\u0140\124\150\001\002\000\004" +
    "\016\u0141\001\002\000\004\112\u0142\001\002\000\004\113" +
    "\uffe5\001\002\000\012\063\041\102\043\113\121\114\044" +
    "\001\002\000\004\113\u0145\001\002\000\034\012\152\013" +
    "\156\014\147\015\153\016\145\017\155\020\144\027\122" +
    "\030\142\031\143\032\154\111\u0146\124\150\001\002\000" +
    "\004\020\u0147\001\002\000\004\112\u0148\001\002\000\004" +
    "\113\uffe1\001\002\000\004\115\u014a\001\002\000\004\060" +
    "\u014b\001\002\000\004\112\u014c\001\002\000\012\063\041" +
    "\102\043\113\121\114\044\001\002\000\004\113\u014e\001" +
    "\002\000\034\012\152\013\156\014\147\015\153\016\145" +
    "\017\155\020\144\027\122\030\142\031\143\032\154\111" +
    "\u014f\124\150\001\002\000\004\031\u0150\001\002\000\004" +
    "\045\u0151\001\002\000\004\115\u0152\001\002\000\004\060" +
    "\u0153\001\002\000\004\112\u0154\001\002\000\004\113\uffdd" +
    "\001\002\000\012\063\041\102\043\113\121\114\044\001" +
    "\002\000\004\113\u0157\001\002\000\034\012\152\013\156" +
    "\014\147\015\153\016\145\017\155\020\144\027\122\030" +
    "\142\031\143\032\154\111\u0158\124\150\001\002\000\004" +
    "\030\u0159\001\002\000\004\112\u015a\001\002\000\004\113" +
    "\uffdf\001\002\000\012\063\041\102\043\113\121\114\044" +
    "\001\002\000\004\113\u015d\001\002\000\034\012\152\013" +
    "\156\014\147\015\153\016\145\017\155\020\144\027\122" +
    "\030\142\031\143\032\154\111\u015e\124\150\001\002\000" +
    "\004\013\u015f\001\002\000\004\112\u0160\001\002\000\004" +
    "\113\uffea\001\002\000\004\112\u0162\001\002\000\012\063" +
    "\041\102\043\113\121\114\044\001\002\000\004\113\u0164" +
    "\001\002\000\034\012\152\013\156\014\147\015\153\016" +
    "\145\017\155\020\144\027\122\030\142\031\143\032\154" +
    "\111\u0165\124\150\001\002\000\004\032\u0166\001\002\000" +
    "\004\060\u0167\001\002\000\004\112\u0168\001\002\000\004" +
    "\113\uffda\001\002\000\012\063\041\102\043\113\121\114" +
    "\044\001\002\000\004\113\u016b\001\002\000\034\012\152" +
    "\013\156\014\147\015\153\016\145\017\155\020\144\027" +
    "\122\030\142\031\143\032\154\111\u016c\124\150\001\002" +
    "\000\004\015\u016d\001\002\000\004\112\u016e\001\002\000" +
    "\004\113\uffe6\001\002\000\012\063\041\102\043\113\121" +
    "\114\044\001\002\000\004\113\u0171\001\002\000\034\012" +
    "\152\013\156\014\147\015\153\016\145\017\155\020\144" +
    "\027\122\030\142\031\143\032\154\111\u0172\124\150\001" +
    "\002\000\004\012\u0173\001\002\000\004\112\u0174\001\002" +
    "\000\004\113\uffec\001\002\000\020\062\230\063\236\073" +
    "\231\076\222\077\224\101\232\124\u0176\001\002\000\004" +
    "\112\u0177\001\002\000\004\113\uffd6\001\002\000\012\063" +
    "\041\102\043\113\121\114\044\001\002\000\004\113\u017a" +
    "\001\002\000\034\012\152\013\156\014\147\015\153\016" +
    "\145\017\155\020\144\027\122\030\142\031\143\032\154" +
    "\111\u017b\124\150\001\002\000\004\014\u017c\001\002\000" +
    "\004\112\u017d\001\002\000\004\113\uffe8\001\002\000\012" +
    "\063\041\102\043\113\121\114\044\001\002\000\004\113" +
    "\u0180\001\002\000\034\012\152\013\156\014\147\015\153" +
    "\016\145\017\155\020\144\027\122\030\142\031\143\032" +
    "\154\111\u0181\124\150\001\002\000\004\027\122\001\002" +
    "\000\004\112\u0183\001\002\000\004\113\uffd8\001\002\000" +
    "\012\063\041\102\043\113\121\114\044\001\002\000\004" +
    "\113\u0186\001\002\000\034\012\152\013\156\014\147\015" +
    "\153\016\145\017\155\020\144\027\122\030\142\031\143" +
    "\032\154\111\u0187\124\150\001\002\000\004\016\u0188\001" +
    "\002\000\004\112\u0189\001\002\000\004\113\uffe4\001\002" +
    "\000\012\063\041\102\043\113\121\114\044\001\002\000" +
    "\004\113\u018c\001\002\000\034\012\152\013\156\014\147" +
    "\015\153\016\145\017\155\020\144\027\122\030\142\031" +
    "\143\032\154\111\u018d\124\150\001\002\000\004\020\u018e" +
    "\001\002\000\004\112\u018f\001\002\000\004\113\uffe0\001" +
    "\002\000\004\115\u0191\001\002\000\004\060\u0192\001\002" +
    "\000\004\112\u0193\001\002\000\012\063\041\102\043\113" +
    "\121\114\044\001\002\000\004\113\u0195\001\002\000\034" +
    "\012\152\013\156\014\147\015\153\016\145\017\155\020" +
    "\144\027\122\030\142\031\143\032\154\111\u0196\124\150" +
    "\001\002\000\004\031\u0197\001\002\000\004\045\u0198\001" +
    "\002\000\004\115\u0199\001\002\000\004\060\u019a\001\002" +
    "\000\004\112\u019b\001\002\000\004\113\uffdc\001\002\000" +
    "\012\063\041\102\043\113\121\114\044\001\002\000\004" +
    "\113\u019e\001\002\000\034\012\152\013\156\014\147\015" +
    "\153\016\145\017\155\020\144\027\122\030\142\031\143" +
    "\032\154\111\u019f\124\150\001\002\000\004\030\u01a0\001" +
    "\002\000\004\112\u01a1\001\002\000\004\113\uffde\001\002" +
    "\000\004\115\u01ac\001\002\000\012\036\u01a6\037\u01a5\044" +
    "\u01a2\112\uffc3\001\002\000\012\036\uffc1\037\uffc1\044\uffc1" +
    "\112\uffc1\001\002\000\004\115\u01a9\001\002\000\004\115" +
    "\u01a7\001\002\000\004\060\u01a8\001\002\000\012\036\uffc0" +
    "\037\uffc0\044\uffc0\112\uffc0\001\002\000\004\060\u01aa\001" +
    "\002\000\012\036\uffbe\037\uffbe\044\uffbe\112\uffbe\001\002" +
    "\000\012\036\uffc2\037\uffc2\044\uffc2\112\uffc2\001\002\000" +
    "\004\060\u01ad\001\002\000\012\036\uffbf\037\uffbf\044\uffbf" +
    "\112\uffbf\001\002\000\034\012\152\013\156\014\147\015" +
    "\153\016\145\017\155\020\144\027\122\030\142\031\143" +
    "\032\154\111\u01af\124\150\001\002\000\004\007\u01b0\001" +
    "\002\000\004\112\u01b1\001\002\000\004\113\ufffa\001\002" +
    "\000\004\115\u01b3\001\002\000\004\060\u01b4\001\002\000" +
    "\004\112\uffd4\001\002\000\012\063\041\102\043\113\121" +
    "\114\044\001\002\000\004\113\u01b7\001\002\000\034\012" +
    "\152\013\156\014\147\015\153\016\145\017\155\020\144" +
    "\027\122\030\142\031\143\032\154\111\u01b8\124\150\001" +
    "\002\000\004\021\u01b9\001\002\000\004\112\u01ba\001\002" +
    "\000\004\113\ufff4\001\002\000\020\062\230\063\236\073" +
    "\231\076\222\077\224\101\232\124\u01bc\001\002\000\004" +
    "\112\u01bd\001\002\000\004\113\uffee\001\002\000\004\115" +
    "\u01c8\001\002\000\012\033\uffd0\034\uffd0\035\uffd0\112\uffd0" +
    "\001\002\000\012\033\u01c2\034\u01c1\035\u01be\112\uffd2\001" +
    "\002\000\004\115\u01c5\001\002\000\004\115\u01c3\001\002" +
    "\000\004\060\u01c4\001\002\000\012\033\uffcf\034\uffcf\035" +
    "\uffcf\112\uffcf\001\002\000\004\060\u01c6\001\002\000\012" +
    "\033\uffce\034\uffce\035\uffce\112\uffce\001\002\000\012\033" +
    "\uffd1\034\uffd1\035\uffd1\112\uffd1\001\002\000\004\060\u01c9" +
    "\001\002\000\012\033\uffcd\034\uffcd\035\uffcd\112\uffcd\001" +
    "\002\000\012\063\041\102\043\113\121\114\044\001\002" +
    "\000\004\113\u01cc\001\002\000\034\012\152\013\156\014" +
    "\147\015\153\016\145\017\155\020\144\027\122\030\142" +
    "\031\143\032\154\111\u01cd\124\150\001\002\000\004\011" +
    "\u01ce\001\002\000\004\112\u01cf\001\002\000\004\113\ufff8" +
    "\001\002\000\012\063\041\102\043\113\121\114\044\001" +
    "\002\000\004\113\u01d2\001\002\000\034\012\152\013\156" +
    "\014\147\015\153\016\145\017\155\020\144\027\122\030" +
    "\142\031\143\032\154\111\u01d3\124\150\001\002\000\004" +
    "\025\u01d4\001\002\000\004\112\u01d5\001\002\000\004\113" +
    "\ufff2\001\002\000\012\063\041\102\043\113\121\114\044" +
    "\001\002\000\004\113\u01d8\001\002\000\034\012\152\013" +
    "\156\014\147\015\153\016\145\017\155\020\144\027\122" +
    "\030\142\031\143\032\154\111\u01d9\124\150\001\002\000" +
    "\004\010\u01da\001\002\000\004\112\u01db\001\002\000\004" +
    "\113\ufff6\001\002\000\012\063\041\102\043\113\121\114" +
    "\044\001\002\000\004\113\u01de\001\002\000\034\012\152" +
    "\013\156\014\147\015\153\016\145\017\155\020\144\027" +
    "\122\030\142\031\143\032\154\111\u01df\124\150\001\002" +
    "\000\004\026\u01e0\001\002\000\004\112\u01e1\001\002\000" +
    "\004\113\ufff0\001\002\000\022\007\071\010\u01e4\011\074" +
    "\021\076\025\u01e5\026\u01e3\111\u01e9\124\u01e7\001\002\000" +
    "\004\112\u020e\001\002\000\004\112\u0208\001\002\000\004" +
    "\112\u0202\001\002\000\004\112\u01fc\001\002\000\016\062" +
    "\230\063\236\073\231\076\222\077\224\101\232\001\002" +
    "\000\004\112\u01f3\001\002\000\004\007\u01f1\001\002\000" +
    "\004\112\u01eb\001\002\000\012\063\041\102\043\113\121" +
    "\114\044\001\002\000\004\113\u01ed\001\002\000\034\012" +
    "\152\013\156\014\147\015\153\016\145\017\155\020\144" +
    "\027\122\030\142\031\143\032\154\111\u01ee\124\150\001" +
    "\002\000\004\007\u01ef\001\002\000\004\112\u01f0\001\002" +
    "\000\004\113\ufffb\001\002\000\004\112\u01f2\001\002\000" +
    "\004\113\ufffc\001\002\000\012\063\041\102\043\113\121" +
    "\114\044\001\002\000\004\113\u01f5\001\002\000\034\012" +
    "\152\013\156\014\147\015\153\016\145\017\155\020\144" +
    "\027\122\030\142\031\143\032\154\111\u01f6\124\150\001" +
    "\002\000\004\021\u01f7\001\002\000\004\112\u01f8\001\002" +
    "\000\004\113\ufff5\001\002\000\020\062\230\063\236\073" +
    "\231\076\222\077\224\101\232\124\u01fa\001\002\000\004" +
    "\112\u01fb\001\002\000\004\113\uffef\001\002\000\012\063" +
    "\041\102\043\113\121\114\044\001\002\000\004\113\u01fe" +
    "\001\002\000\034\012\152\013\156\014\147\015\153\016" +
    "\145\017\155\020\144\027\122\030\142\031\143\032\154" +
    "\111\u01ff\124\150\001\002\000\004\011\u0200\001\002\000" +
    "\004\112\u0201\001\002\000\004\113\ufff9\001\002\000\012" +
    "\063\041\102\043\113\121\114\044\001\002\000\004\113" +
    "\u0204\001\002\000\034\012\152\013\156\014\147\015\153" +
    "\016\145\017\155\020\144\027\122\030\142\031\143\032" +
    "\154\111\u0205\124\150\001\002\000\004\025\u0206\001\002" +
    "\000\004\112\u0207\001\002\000\004\113\ufff3\001\002\000" +
    "\012\063\041\102\043\113\121\114\044\001\002\000\004" +
    "\113\u020a\001\002\000\034\012\152\013\156\014\147\015" +
    "\153\016\145\017\155\020\144\027\122\030\142\031\143" +
    "\032\154\111\u020b\124\150\001\002\000\004\010\u020c\001" +
    "\002\000\004\112\u020d\001\002\000\004\113\ufff7\001\002" +
    "\000\012\063\041\102\043\113\121\114\044\001\002\000" +
    "\004\113\u0210\001\002\000\034\012\152\013\156\014\147" +
    "\015\153\016\145\017\155\020\144\027\122\030\142\031" +
    "\143\032\154\111\u0211\124\150\001\002\000\004\026\u0212" +
    "\001\002\000\004\112\u0213\001\002\000\004\113\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0211\000\004\040\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\041\012\042\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\041\015\037\033\036\001\001\000\002" +
    "\001\001\000\006\013\050\033\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\060\001\001\000\002" +
    "\001\001\000\004\043\062\001\001\000\002\001\001\000" +
    "\010\045\074\046\067\047\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\051\u01be\054\u01bf\001\001\000\022\002\226\003\234" +
    "\004\220\010\224\011\222\012\233\027\u01ba\030\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\052\100\055\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\041\015\117\033\036" +
    "\044\116\001\001\000\002\001\001\000\006\013\050\033" +
    "\046\001\001\000\004\050\126\001\001\000\006\053\u01a3" +
    "\056\u01a2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\226\003\234\004\220\010\224\011" +
    "\222\012\233\027\u0174\030\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\041\015\117\033\036\044\137" +
    "\001\001\000\002\001\001\000\004\050\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\002" +
    "\226\003\234\004\220\010\224\011\222\012\233\027\225" +
    "\030\232\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\041\015\117\033\036\044\157\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\041\015\117\033\036\044\165\001\001\000\002\001\001" +
    "\000\004\050\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\041" +
    "\015\117\033\036\044\174\001\001\000\002\001\001\000" +
    "\004\050\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\041\015" +
    "\117\033\036\044\203\001\001\000\002\001\001\000\004" +
    "\050\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\041\015\117\033\036\044\211" +
    "\001\001\000\002\001\001\000\004\050\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\326\017\247\020\242\021\u012c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\226\003" +
    "\234\004\220\010\224\011\222\012\233\030\u0123\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\326\017" +
    "\247\020\242\021\325\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\244\017\247\020\242" +
    "\021\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\254\001\001\000\004\020\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\311\020" +
    "\242\001\001\000\012\016\310\017\247\020\242\021\307" +
    "\001\001\000\010\016\306\017\247\020\242\001\001\000" +
    "\002\001\001\000\006\017\305\020\242\001\001\000\010" +
    "\016\300\017\247\020\242\001\001\000\010\016\275\017" +
    "\247\020\242\001\001\000\012\016\266\017\247\020\242" +
    "\021\265\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\274\017\247\020\242\021\273\001\001\000\012" +
    "\016\272\017\247\020\242\021\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\277\017\247\020\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\016\304" +
    "\017\247\020\242\001\001\000\010\016\303\017\247\020" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\041" +
    "\014\316\015\314\033\036\001\001\000\010\013\050\014" +
    "\322\033\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\333\007\340\001\001\000\012\016\326\017\247\020\242" +
    "\021\u0112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\326\017\247\020\242\021\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\345" +
    "\017\247\020\242\021\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\352\007\351\001\001\000\002\001\001\000\004\007" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\041\014\361\015" +
    "\360\033\036\001\001\000\010\013\050\014\364\033\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\372\007" +
    "\340\001\001\000\002\001\001\000\006\005\374\007\340" +
    "\001\001\000\002\001\001\000\006\005\376\007\340\001" +
    "\001\000\002\001\001\000\006\005\u0100\007\340\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u010a\007\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\u0111\007\340\001\001\000\002" +
    "\001\001\000\006\005\u0115\007\340\001\001\000\006\005" +
    "\u0114\007\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\u0117\007\340\001\001\000\002\001\001\000" +
    "\006\005\u0119\007\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\u012b\007\340\001\001\000\002\001\001\000\006\005\u012f" +
    "\007\340\001\001\000\006\005\u012e\007\340\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\041\015\117" +
    "\033\036\044\u0131\001\001\000\002\001\001\000\004\050" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\041\015\117\033\036\044\u0137\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\004" +
    "\050\u013a\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\041\015\117\033\036\044\u013d\001\001\000\002" +
    "\001\001\000\004\050\145\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\041\015\117" +
    "\033\036\044\u0143\001\001\000\002\001\001\000\004\050" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\041\015\117\033\036\044\u014c\001\001" +
    "\000\002\001\001\000\004\050\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\041\015" +
    "\117\033\036\044\u0155\001\001\000\002\001\001\000\004" +
    "\050\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\041\015\117\033\036\044\u015b" +
    "\001\001\000\002\001\001\000\004\050\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\041\015\117\033\036\044\u0162\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\041\015\117\033\036\044\u0169\001\001" +
    "\000\002\001\001\000\004\050\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\041" +
    "\015\117\033\036\044\u016f\001\001\000\002\001\001\000" +
    "\004\050\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\226\003\234\004\220\010" +
    "\224\011\222\012\233\030\u0123\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\041\015\117\033\036\044" +
    "\u0178\001\001\000\002\001\001\000\004\050\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\041\015\117\033\036\044\u017e\001\001\000\002" +
    "\001\001\000\004\050\145\001\001\000\004\050\u0181\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\041" +
    "\015\117\033\036\044\u0184\001\001\000\002\001\001\000" +
    "\004\050\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\041\015\117\033\036\044" +
    "\u018a\001\001\000\002\001\001\000\004\050\145\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\041\015\117\033\036\044\u0193\001\001\000\002\001" +
    "\001\000\004\050\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\041\015\117\033\036" +
    "\044\u019c\001\001\000\002\001\001\000\004\050\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\u01aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\041\015\117\033\036\044\u01b5\001" +
    "\001\000\002\001\001\000\004\050\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\002" +
    "\226\003\234\004\220\010\224\011\222\012\233\030\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u01c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\041\015" +
    "\117\033\036\044\u01ca\001\001\000\002\001\001\000\004" +
    "\050\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\041\015\117\033\036\044\u01d0" +
    "\001\001\000\002\001\001\000\004\050\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\041\015\117\033\036\044\u01d6\001\001\000\002\001" +
    "\001\000\004\050\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\041\015\117\033" +
    "\036\044\u01dc\001\001\000\002\001\001\000\004\050\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\045\u01e9\046\u01e5\047\u01e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\226\003\234\004\220\010\224\011\222" +
    "\012\233\027\u01f8\030\232\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\013\041\015\117" +
    "\033\036\044\u01eb\001\001\000\002\001\001\000\004\050" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\013" +
    "\041\015\117\033\036\044\u01f3\001\001\000\002\001\001" +
    "\000\004\050\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\226\003\234\004\220" +
    "\010\224\011\222\012\233\030\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\041\015\117\033\036" +
    "\044\u01fc\001\001\000\002\001\001\000\004\050\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\041\015\117\033\036\044\u0202\001\001\000" +
    "\002\001\001\000\004\050\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\041\015" +
    "\117\033\036\044\u0208\001\001\000\002\001\001\000\004" +
    "\050\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\041\015\117\033\036\044\u020e" +
    "\001\001\000\002\001\001\000\004\050\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ManejadorDeTextArea manejadorDeTextArea;
    private ArrayList<Variable> tablaDeSimbolos;
    private ManejadorDeTablaDeSimbolos manejadorDeVariables;//----->Quizas no lo necesitemos
    ArrayList<Nodo> instruccionesParaIf;
    ArrayList<Nodo> instruccionesElseParaIf;
    ArrayList<Nodo> instruccionesPrint;
    ArrayList<String> textoAEscribir;
    ArrayList<AtributoDeEtiqueta> atributos;
    ArrayList<Etiqueta> etiquetas;

    // Connect this parser to a scanner!
    public parser(AnalizadorDeCodigoEmbebido lex,ArrayList<Variable> tablaDeSimbolos,ManejadorDeTextArea manejadorDeTextArea) {
	super(lex);
        this.manejadorDeTextArea=manejadorDeTextArea;
        this.tablaDeSimbolos=tablaDeSimbolos;
        this.manejadorDeVariables = new ManejadorDeTablaDeSimbolos(tablaDeSimbolos);
        this.instruccionesParaIf=new ArrayList<>();
        this.instruccionesElseParaIf=new ArrayList<>();
        this.instruccionesPrint=new ArrayList<>();
        this.textoAEscribir=new ArrayList<>();
        this.atributos=new ArrayList<>();
        this.etiquetas=new ArrayList<>();
    }

//Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        System.out.println("ERROR EN ESTRUCTURA:"+s.value.toString());
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
                System.out.println("ERROR EN ESTRUCTURA:"+s);
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= p EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // p ::= MENOR E_HTML MAYOR p1 MENOR DIV E_HTML MAYOR 
            {
              Object RESULT =null;
		manejadorDeTextArea.setEtiquetas(etiquetas);
     manejadorDeTextArea.manejarEtiqueta();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // p ::= MENOR E_HTML MAYOR p2 MENOR DIV E_HTML MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // p1 ::= MENOR E_HEAD MAYOR MENOR DIV E_HEAD MAYOR p2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // p1 ::= MENOR E_HEAD MAYOR MENOR E_TITLE MAYOR conjuntoDeTexto MENOR DIV E_TITLE MAYOR MENOR DIV E_HEAD MAYOR p2 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		
    atributos=new ArrayList<>();
    textoAEscribir=new ArrayList<>();
    System.out.println(textoAEscribir.size());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("p1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // p2 ::= MENOR E_BODY MAYOR s1 MENOR DIV E_BODY MAYOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("p2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // s1 ::= s1 MENOR etiquetaBody MAYOR s2 MENOR DIV E_BODY MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // s1 ::= MENOR etiquetaBody MAYOR s2 MENOR DIV E_BODY MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // s1 ::= s1 MENOR etiquetaParrafo MAYOR s2 MENOR DIV E_PARRAFO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // s1 ::= MENOR etiquetaParrafo MAYOR s2 MENOR DIV E_PARRAFO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // s1 ::= s1 MENOR E_CENTER MAYOR s2 MENOR DIV E_CENTER MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s1 ::= MENOR E_CENTER MAYOR s2 MENOR DIV E_CENTER MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s1 ::= s1 MENOR etiquetaFont MAYOR s2 MENOR DIV E_FONT MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // s1 ::= MENOR etiquetaFont MAYOR s2 MENOR DIV E_FONT MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // s1 ::= s1 MENOR E_BR MAYOR s2 MENOR DIV E_BR MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // s1 ::= MENOR E_BR MAYOR s2 MENOR DIV E_BR MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // s1 ::= s1 MENOR E_NOBR MAYOR s2 MENOR DIV E_NOBR MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // s1 ::= MENOR E_NOBR MAYOR s2 MENOR DIV E_NOBR MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // s1 ::= s1 MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // s1 ::= MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s1",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // s2 ::= s2 MENOR E_NEGRILLA MAYOR s2 MENOR DIV E_NEGRILLA MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // s2 ::= MENOR E_NEGRILLA MAYOR s2 MENOR DIV E_NEGRILLA MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // s2 ::= s2 MENOR E_SUBRAYADO MAYOR s2 MENOR DIV E_SUBRAYADO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // s2 ::= MENOR E_SUBRAYADO MAYOR s2 MENOR DIV E_SUBRAYADO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // s2 ::= s2 MENOR E_ITALICA MAYOR s2 MENOR DIV E_ITALICA MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // s2 ::= MENOR E_ITALICA MAYOR s2 MENOR DIV E_ITALICA MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // s2 ::= s2 MENOR E_STRIKE MAYOR s2 MENOR DIV E_STRIKE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // s2 ::= MENOR E_STRIKE MAYOR s2 MENOR DIV E_STRIKE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // s2 ::= s2 MENOR E_BLINK MAYOR s2 MENOR DIV E_BLINK MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // s2 ::= MENOR E_BLINK MAYOR s2 MENOR DIV E_BLINK MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // s2 ::= s2 MENOR E_SUB MAYOR s2 MENOR DIV E_SUB MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // s2 ::= MENOR E_SUB MAYOR s2 MENOR DIV E_SUB MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // s2 ::= s2 MENOR E_SUP MAYOR s2 MENOR DIV E_SUP MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s2 ::= MENOR E_SUP MAYOR s2 MENOR DIV E_SUP MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s2 ::= s2 MENOR E_BLOCKQUOTE MAYOR s2 MENOR DIV E_BLOCKQUOTE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s2 ::= MENOR E_BLOCKQUOTE MAYOR s2 MENOR DIV E_BLOCKQUOTE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s2 ::= s2 MENOR E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s2 ::= MENOR E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s2 ::= s2 MENOR E_HREF ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_HREF ORACION_TIPO_ATRIBUTO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // s2 ::= MENOR E_HREF ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_HREF ORACION_TIPO_ATRIBUTO MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // s2 ::= s2 MENOR etiquetaHR MAYOR s2 MENOR DIV etiquetaHR MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // s2 ::= MENOR etiquetaHR MAYOR s2 MENOR DIV etiquetaHR MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // s2 ::= s2 MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // s2 ::= MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // etiquetaParrafo ::= E_PARRAFO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaParrafo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetaParrafo ::= E_PARRAFO ALIGN IGUAL ORACION_TIPO_ATRIBUTO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaParrafo",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetaBody ::= E_BODY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaBody",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetaBody ::= E_BODY atributosBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaBody",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atributosBody ::= atributosBody unAtributoBody 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosBody",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributosBody ::= unAtributoBody 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosBody",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unAtributoBody ::= BGCOLOR IGUAL ORACION_TIPO_ATRIBUTO 
            {
              AtributoDeEtiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributoBody",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unAtributoBody ::= TEXT IGUAL ORACION_TIPO_ATRIBUTO 
            {
              AtributoDeEtiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributoBody",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unAtributoBody ::= LINK IGUAL ORACION_TIPO_ATRIBUTO 
            {
              AtributoDeEtiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributoBody",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // etiquetaFont ::= E_FONT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaFont",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // etiquetaFont ::= E_FONT atributosFont 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaFont",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // atributosFont ::= atributosFont unAtributoFont 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // atributosFont ::= unAtributoFont 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // atributosFont ::= SIZE IGUAL ORACION_TIPO_ATRIBUTO 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // atributosFont ::= ALIGN IGUAL ORACION_TIPO_ATRIBUTO 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // atributosFont ::= FACE IGUAL ORACION_TIPO_ATRIBUTO 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // atributosFont ::= COLOR IGUAL ORACION_TIPO_ATRIBUTO 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosFont",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // etiquetaHR ::= E_HR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaHR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // etiquetaHR ::= E_HR atributosHR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetaHR",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // atributosHR ::= atributosHR unAtributosHr 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosHR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributosHR ::= unAtributosHr 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributosHR",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unAtributosHr ::= ALIGN IGUAL ORACION_TIPO_ATRIBUTO 
            {
              AtributoDeEtiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributosHr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unAtributosHr ::= WIDTH IGUAL ORACION_TIPO_ATRIBUTO 
            {
              AtributoDeEtiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributosHr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unAtributosHr ::= SIZE IGUAL ORACION_TIPO_ATRIBUTO 
            {
              AtributoDeEtiqueta RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributosHr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // s2 ::= conjuntoDeTexto 
            {
              ArrayList<Etiqueta> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conjuntoDeTexto ::= conjuntoDeTexto texto 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conjuntoDeTexto ::= texto 
            {
              ArrayList<Nodo> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // texto ::= IDENTIFICADOR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // texto ::= DOS_PUNTOS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("texto",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conjuntoDeInstrucciones ::= conjuntoDeInstrucciones unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conjuntoDeInstrucciones ::= unaInstruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstrucciones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unaInstruccion ::= declaracionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unaInstruccion ::= asignacionDeVariable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unaInstruccion ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // unaInstruccion ::= escritura 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // unaInstruccion ::= cicloFor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unaInstruccion ::= cicloWhile 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cicloWhile ::= WHILE expresionesBooleanas bloque 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloWhile cicloWhile = new CicloWhile(ileft,iright,e,f);
               ManejadorDeCicloWhile manW= new ManejadorDeCicloWhile(cicloWhile,manejadorDeVariables);
               manW.realizarOperaciones();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWhile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cicloWhile ::= WHILE IDENTIFICADOR bloque 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Identificador id=new Identificador(eleft,eright,e);
               CicloWhile cicloWhile = new CicloWhile(ileft,iright,id,f);
               ManejadorDeCicloWhile manW= new ManejadorDeCicloWhile(cicloWhile,manejadorDeVariables);
               manW.realizarOperaciones();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloWhile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cicloFor ::= FOR IDENTIFICADOR DOS_PUNTOS IGUAL NUMERO TO NUMERO bloque 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloFor cicloF = new CicloFor(ileft,iright,f,g,h,e,manejadorDeVariables);
            ManejadorDeCicloFor man=new ManejadorDeCicloFor(cicloF,manejadorDeVariables);
            man.realizarOperaciones();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cicloFor",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicional ::= IF IDENTIFICADOR THEN bloque ELSE bloque 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
              Identificador id=new Identificador(eleft,eright,e);
              Condicion condicion= new Condicion(ileft,iright,id,f,g);
              ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
              manejador.realizarOperaciones();
              instruccionesParaIf=new ArrayList<>();
              instruccionesElseParaIf=new ArrayList<>();
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicional ::= IF expresionesBooleanas THEN bloque ELSE bloque 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                Condicion condicion= new Condicion(ileft,iright,e,f,g);
                ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
                manejador.realizarOperaciones();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // bloque ::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas CORCHETE_CERRADO END PUNTO_COMA 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> i = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bloque ::= unaInstruccionCompleja 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> lista=new ArrayList<>();
           lista.add(i);
           RESULT=lista;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // conjuntoDeInstruccionesComplejas ::= conjuntoDeInstruccionesComplejas unaInstruccionCompleja 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> i = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    i.add(e);
    RESULT=i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // conjuntoDeInstruccionesComplejas ::= unaInstruccionCompleja 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo i = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> lista=new ArrayList<>();
                                     lista.add(i);
                                     RESULT=lista;   
                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeInstruccionesComplejas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Variable(ileft,iright,i,"entera","0");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Variable(ileft,iright,i,"booleana","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // unaInstruccionCompleja ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Variable(ileft,iright,i,"cadena","");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // unaInstruccionCompleja ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Asignacion(i, e, manejadorDeVariables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // unaInstruccionCompleja ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Asignacion(i, e, manejadorDeVariables);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // unaInstruccionCompleja ::= IF IDENTIFICADOR THEN bloque ELSE bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("ACCION SI");Identificador id=new Identificador(eleft,eright,e);
                        Condicion condicion= new Condicion(ileft,iright,id,f,g);
                        RESULT =condicion;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unaInstruccionCompleja ::= IF expresionesBooleanas THEN bloque ELSE bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> g = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Accion con booleanas");
                        Condicion condicion= new Condicion(ileft,iright,e,f,g);
                        RESULT =condicion;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unaInstruccionCompleja ::= PRINT PARENTESIS_ABIERTO conjuntoDeTexto ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            e.add(f);
            Escritura escritura=new Escritura(ileft,iright,e);
            RESULT=escritura;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unaInstruccionCompleja ::= PRINT PARENTESIS_ABIERTO ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            ArrayList<Nodo> lista = new ArrayList<>();
            lista.add(e);
            Escritura escritura=new Escritura(ileft,iright,lista);
            RESULT =escritura;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // unaInstruccionCompleja ::= FOR IDENTIFICADOR DOS_PUNTOS IGUAL NUMERO TO NUMERO bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> h = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloFor cicloF = new CicloFor(ileft,iright,f,g,h,e,manejadorDeVariables);
              RESULT =cicloF;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unaInstruccionCompleja ::= WHILE expresionesBooleanas bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		CicloWhile cicloWhile = new CicloWhile(ileft,iright,e,f);
                RESULT = cicloWhile;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unaInstruccionCompleja ::= WHILE IDENTIFICADOR bloque 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Nodo> f = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		Identificador id=new Identificador(eleft,eright,e);
               CicloWhile cicloWhile = new CicloWhile(ileft,iright,id,f);
               RESULT=cicloWhile;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaInstruccionCompleja",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // escritura ::= PRINT PARENTESIS_ABIERTO conjuntoDeTexto ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Nodo> e = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo f = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            e.add(f);
            Escritura escritura=new Escritura(ileft,iright,e);
             ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables);
             man.manejarEscritura();
             instruccionesPrint=new ArrayList<>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // escritura ::= PRINT PARENTESIS_ABIERTO ultimaInstruccion PARENTESIS_CERRADO PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("PRINT RECONOCIDO");
            ArrayList<Nodo> lista = new ArrayList<>();
            lista.add(e);
            Escritura escritura=new Escritura(ileft,iright,lista);
            ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables);
            man.manejarEscritura();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("escritura",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // conjuntoDeTexto ::= conjuntoDeTexto unTexto 
            {
              ArrayList<Nodo> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Nodo> i = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		i.add(e);
                    RESULT=i;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // conjuntoDeTexto ::= unTexto 
            {
              ArrayList<Nodo> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<Nodo> lista = new ArrayList<>();
                    lista.add(e);
                    RESULT=lista;
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeTexto",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unTexto ::= ORACION COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Oracion(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unTexto ::= IDENTIFICADOR COMA 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new Identificador(ileft, iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unTexto",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ultimaInstruccion ::= ORACION 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =new Oracion(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimaInstruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ultimaInstruccion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identificador(ileft, iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ultimaInstruccion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS INTEGER PUNTO_COMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Variable variable = new Variable(ileft,iright,i,"entera","0");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS BOOLEAN PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Variable variable = new Variable(ileft,iright,i,"booleana","true");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // declaracionDeVariable ::= VAR IDENTIFICADOR DOS_PUNTOS STRING PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Variable variable = new Variable(ileft,iright,i,"cadena","");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionDeVariable",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // asignacionDeVariable ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresion PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // asignacionDeVariable ::= IDENTIFICADOR DOS_PUNTOS IGUAL expresionesBooleanas PUNTO_COMA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Asignacion a booleana");
                        Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacionDeVariable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expresionesBooleanas ::= expresionesBooleanas OR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expresionesBooleanas ::= expresionesBooleanas AND expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expresionesBooleanas ::= expresionesBooleanas OR expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expresionesBooleanas ::= expresionesBooleanas AND expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expresionesBooleanas ::= expresion OR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expresionesBooleanas ::= expresion AND expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expresionesBooleanas ::= expresion OR expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"or", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expresionesBooleanas ::= expresion AND expresionesBooleanas 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new OperacionBooleana(ileft,iright,"and", i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expresionesBooleanas ::= expresion MAYOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,">",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expresionesBooleanas ::= expresion MENOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expresionesBooleanas ::= expresion MAYOR IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,">=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expresionesBooleanas ::= expresion MENOR IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expresionesBooleanas ::= expresion IGUAL expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"=",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expresionesBooleanas ::= expresion MENOR MAYOR expresion 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Comparacion(ileft,iright,"<>",i,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresionesBooleanas",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expresion ::= expresion MAS t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"+");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expresion ::= expresion MENOS t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"-");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expresion ::= t 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // t ::= t POR f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"*");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // t ::= t DIV f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new OperacionBinaria(iright, ileft, i, e,"/");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // t ::= f 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion i = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=i;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("t",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // f ::= IDENTIFICADOR 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identificador(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // f ::= NUMERO 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new Operando(iright,ileft, i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // f ::= ORACION 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Cadena(ileft,iright,i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // f ::= TRUE 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ValorDeVerdad(ileft,iright,"true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // f ::= FALSE 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ValorDeVerdad(ileft,iright,"false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("f",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
