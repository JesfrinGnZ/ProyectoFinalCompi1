/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes

package backend.generacionHtml;
import java_cup.runtime.*;
import backend.arbolAST.*;
import backend.AccionesMatematicas.*;

import backend.asignacionCreacionDeVariables.*;
import backend.condiciones.*;
import backend.expresiones.*;
import backend.expresionesAritmeticas.*;
import backend.expesionesBooleanas.*;
import backend.expresionesConCadenas.*;
import backend.tablaDeSimbolos.*;
import java.util.ArrayList;


parser code {:

    private ArrayList<Variable> tablaDeSimbolos;
    private ManejadorDeTablaDeSimbolos manejadorDeVariables;//----->Quizas no lo necesitemos
    ArrayList<Nodo> instruccionesParaIf;
    ArrayList<Nodo> instruccionesElseParaIf;

    // Connect this parser to a scanner!
    public parser(AnalizadorDeCodigoEmbebido lex,ArrayList<Variable> tablaDeSimbolos) {
	super(lex);
        this.tablaDeSimbolos=tablaDeSimbolos;
        this.manejadorDeVariables = new ManejadorDeTablaDeSimbolos(tablaDeSimbolos);
        this.instruccionesParaIf=new ArrayList<>();
        this.instruccionesElseParaIf=new ArrayList<>();
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        System.out.println("ERROR EN ESTRUCTURA:"+s);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
                System.out.println("ERROR EN ESTRUCTURA:"+s);
    }

:}


/*--------------- 2da Area: Declaraciones -----------------------*/

//---------------------------------------------TERMINALES-----------------------------------

/****************************************Expresiones*************************/

terminal String NUMERO;

/****************************************Definición de variables*************************/

terminal String     VAR,IDENTIFICADOR;

terminal String     INTEGER,BOOLEAN,STRING,TRUE,FALSE;


/****************************************Operaciones logicas*************************/

terminal String     AND,OR;

/****************************************Condicional(If)*************************/

terminal String     IF,THEN,ELSE;

/***************************************Ciclos***********************************/

terminal String     WHILE,FOR,TO;

/***************************************Escritura***********************************/

terminal String     PRINT,ORACION,URL;

/***************************************Bloques***********************************/

terminal String     BEGIN,END;



/****************************************Definición de simbolos*************************/

terminal String         MAS,MENOS,POR,DIV,MAYOR,MENOR,DOS_PUNTOS,IGUAL,PARENTESIS_ABIERTO,PARENTESIS_CERRADO,
                        COMA,PUNTO_COMA,CORCHETE_ABIERTO,CORCHETE_CERRADO,PORCENTAJE;//Expresiones matematicas





//--------------------------------------------NO TERMINALES-------------------------------------

/****************************************Condiconal***********************/

non terminal Object             condicional;
non terminal Object             bloque,bloque2;
non terminal Object             conjuntoDeInstruccionesComplejas;
non terminal Nodo               unaInstruccionCompleja;
non terminal Object             conjuntoDeInstruccionesComplejas2;
non terminal Nodo               unaInstruccionCompleja2;

/****************************************Asignaciones***********************/

non terminal String declaracionDeVariable,asignacionDeVariable;


/****************************************Expresiones ***********************/
non terminal Expresion     expresion,t,f; //Expresiones matematicas y cadenas

non terminal Expresion        expresionesBooleanas,exB,exB1;//Expresiones booleanas
/****************************************Expresiones Con cadenas***********************/

non terminal ExpresionConCadena     expresionCadena,cadena,tipoDeCadena;



non terminal Object             conjuntoDeInstrucciones,unaInstruccion;
/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

precedence left OR;
precedence left AND;


start with conjuntoDeInstrucciones;



conjuntoDeInstrucciones::= conjuntoDeInstrucciones unaInstruccion | unaInstruccion;
unaInstruccion::=declaracionDeVariable;
unaInstruccion::=asignacionDeVariable;
unaInstruccion::=condicional;
 //----------------------------------------------------Condicional(IF)-------------------------------
condicional::=IF:i IDENTIFICADOR:e THEN bloque ELSE bloque2
              {:
              Identificador id=new Identificador(eleft,eright,e);
              Condicion condicion= new Condicion(ileft,iright,id,instruccionesParaIf,instruccionesElseParaIf);
              ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
              manejador.realizarOperaciones();
              instruccionesParaIf=new ArrayList<>();
              instruccionesElseParaIf=new ArrayList<>();
              :};


condicional::=IF:i expresionesBooleanas:e THEN bloque ELSE bloque2
                {:
                Condicion condicion= new Condicion(ileft,iright,e,instruccionesParaIf,instruccionesElseParaIf);
                ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
                manejador.realizarOperaciones();
                instruccionesParaIf=new ArrayList<>();
                instruccionesElseParaIf=new ArrayList<>();
                :};



bloque::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas CORCHETE_CERRADO END PUNTO_COMA
          {::};

bloque::=unaInstruccionCompleja;

conjuntoDeInstruccionesComplejas::=conjuntoDeInstruccionesComplejas unaInstruccionCompleja|unaInstruccionCompleja;

unaInstruccionCompleja::= VAR:a IDENTIFICADOR:i DOS_PUNTOS INTEGER PUNTO_COMA
                          {:instruccionesParaIf.add(new Variable(ileft,iright,i,"entera","0"));:}|
                          VAR IDENTIFICADOR:i DOS_PUNTOS BOOLEAN:e PUNTO_COMA
                          {:instruccionesParaIf.add(new Variable(ileft,iright,i,"booleana","true"));:}|
                          VAR IDENTIFICADOR:i DOS_PUNTOS STRING:e PUNTO_COMA
                          {:instruccionesParaIf.add(new Variable(ileft,iright,i,"cadena",""));:};

unaInstruccionCompleja::=IDENTIFICADOR:i DOS_PUNTOS IGUAL expresion:e PUNTO_COMA
                         {:instruccionesParaIf.add(new Asignacion(i, e, manejadorDeVariables));:}|
                         IDENTIFICADOR:i DOS_PUNTOS IGUAL expresionesBooleanas:e PUNTO_COMA
                         {:instruccionesParaIf.add(new Asignacion(i, e, manejadorDeVariables));:};




bloque2::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas2 CORCHETE_CERRADO END PUNTO_COMA
          {::};

bloque2::=unaInstruccionCompleja2;

conjuntoDeInstruccionesComplejas2::=conjuntoDeInstruccionesComplejas2 unaInstruccionCompleja2|unaInstruccionCompleja2;

unaInstruccionCompleja2::= VAR:a IDENTIFICADOR:i DOS_PUNTOS INTEGER PUNTO_COMA
                          {:instruccionesElseParaIf.add(new Variable(ileft,iright,i,"entera","0"));:}|
                          VAR IDENTIFICADOR:i DOS_PUNTOS BOOLEAN:e PUNTO_COMA
                          {:instruccionesElseParaIf.add(new Variable(ileft,iright,i,"booleana","true"));:}|
                          VAR IDENTIFICADOR:i DOS_PUNTOS STRING:e PUNTO_COMA
                          {:instruccionesElseParaIf.add(new Variable(ileft,iright,i,"cadena",""));:};

unaInstruccionCompleja2::=IDENTIFICADOR:i DOS_PUNTOS IGUAL expresion:e PUNTO_COMA
                         {:instruccionesElseParaIf.add(new Asignacion(i, e, manejadorDeVariables));:}|
                         IDENTIFICADOR:i DOS_PUNTOS IGUAL expresionesBooleanas:e PUNTO_COMA
                         {:instruccionesElseParaIf.add(new Asignacion(i, e, manejadorDeVariables));:};




 //----------------------------------------------------Declaracion de variables-------------------------------

declaracionDeVariable::=VAR:a IDENTIFICADOR:i DOS_PUNTOS INTEGER PUNTO_COMA
                        {:Variable variable = new Variable(ileft,iright,i,"entera","0");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();:}|
                        VAR IDENTIFICADOR:i DOS_PUNTOS BOOLEAN:e PUNTO_COMA
                        {:Variable variable = new Variable(ileft,iright,i,"booleana","true");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();:}|
                        VAR IDENTIFICADOR:i DOS_PUNTOS STRING:e PUNTO_COMA
                        {:Variable variable = new Variable(ileft,iright,i,"cadena","");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();:};
 //----------------------------------------------------Asignacion de variables-------------------------------

asignacionDeVariable::= IDENTIFICADOR:i DOS_PUNTOS IGUAL expresion:e PUNTO_COMA
                        {:Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();:}|
                        IDENTIFICADOR:i DOS_PUNTOS IGUAL expresionesBooleanas:e PUNTO_COMA
                        {:System.out.println("Asignacion a booleana");
                        Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();:};    
                        

 //----------------------------------------------------EXPRESIONES CON BOOLEANOS-------------------------------

expresionesBooleanas::= expresionesBooleanas:i OR  expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"or", i,e);:};

expresionesBooleanas::= expresionesBooleanas:i AND  expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};


expresionesBooleanas::= expresionesBooleanas:i OR expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"or",i,e);:};

expresionesBooleanas::= expresionesBooleanas:i AND expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};

expresionesBooleanas::=expresion:i OR expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"or", i,e);:};

expresionesBooleanas::=expresion:i AND expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};

expresionesBooleanas::=expresion:i OR expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"or", i,e);:};

expresionesBooleanas::=expresion:i AND expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};


expresionesBooleanas::=expresion:i MAYOR expresion:e
{:RESULT= new Comparacion(ileft,iright,">",i,e);:};

expresionesBooleanas::=expresion:i MENOR expresion:e
{:RESULT= new Comparacion(ileft,iright,"<",i,e);:};

expresionesBooleanas::=expresion:i MAYOR IGUAL expresion:e
{:RESULT= new Comparacion(ileft,iright,">=",i,e);:};

expresionesBooleanas::=expresion:i MENOR IGUAL expresion:e
{:RESULT= new Comparacion(ileft,iright,"<=",i,e);:};

expresionesBooleanas::=expresion:i IGUAL expresion:e
{:RESULT= new Comparacion(ileft,iright,"=",i,e);:};

expresionesBooleanas::=expresion:i MENOR MAYOR expresion:e
{:RESULT= new Comparacion(ileft,iright,"<>",i,e);:};



/*
expresionesBooleanas::=exB;

exB::=  exB AND exB1;

exB::=  exB1;

exB1::= expresion MAYOR expresion;

exB1::= expresion MENOR expresion;

exB1::= expresion MAYOR IGUAL expresion;

exB1::= expresion MENOR IGUAL expresion;

exB1::= expresion MAYOR MENOR expresion;

exB1::= IDENTIFICADOR;
*/
 //----------------------------------------------------EXPRESIONES MATEMATICAS Y CON CADENAS-------------------------------



expresion::=expresion:i MAS t:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"+");:};

expresion::=expresion:i MENOS t:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"-");:};

expresion::=t:i
    {:RESULT=i;:};

t::=t:i POR f:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"*");:};

t::=t:i DIV f:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"/");:};


t::=f:i
    {:RESULT=i;:};

f::=IDENTIFICADOR:i//Se debe buscar el identificador, y si se encuenra RESULT=valor de lo contrario mostrar error
    {:RESULT=new Identificador(ileft,iright,i);:};

f::=NUMERO:i
    {:RESULT= new Operando(iright,ileft, i);:};

f::= ORACION:i
     {:RESULT=new Cadena(ileft,iright,i);:};

f::=TRUE:i
    {:RESULT= new ValorDeVerdad(ileft,iright,"true");:};

f::=FALSE:i
    {:RESULT= new ValorDeVerdad(ileft,iright,"false");:};