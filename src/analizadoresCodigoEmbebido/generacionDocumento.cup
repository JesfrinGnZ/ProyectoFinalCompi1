/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes

package backend.generacionHtml;
import java_cup.runtime.*;
import backend.arbol.*;
import backend.AccionesMatematicas.*;
import backend.expresionesAritmeticas.*;
import backend.expresionesConCadenas.*;
import backend.tablaDeSimbolos.*;
import backend.variablesEnteras.*;
import java.util.ArrayList;


parser code {:

    private ArrayList<Variable> tablaDeSimbolos;
    private ManejadorDeTablaDeSimbolos manejadorDeVariables;//----->Quizas no lo necesitemos

    // Connect this parser to a scanner!
    public parser(AnalizadorDeCodigoEmbebido lex,ArrayList<Variable> tablaDeSimbolos) {
	super(lex);
        this.tablaDeSimbolos=tablaDeSimbolos;
        this.manejadorDeVariables = new ManejadorDeTablaDeSimbolos(tablaDeSimbolos);
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        //System.out.println("ERROR EN ESTRUCTURA");
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
                //System.out.println("ERROR EN ESTRUCTURA");
    }

:}


/*--------------- 2da Area: Declaraciones -----------------------*/

//---------------------------------------------TERMINALES-----------------------------------

/****************************************Expresiones*************************/

terminal String NUMERO;

/****************************************Definición de variables*************************/

terminal String     VAR,IDENTIFICADOR;

terminal String     INTEGER,BOOLEAN,STRING,TRUE,FALSE;


/****************************************Operaciones logicas*************************/

terminal String     AND,OR;

/****************************************Condicional(If)*************************/

terminal String     IF,THEN,ELSE;

/***************************************Ciclos***********************************/

terminal String     WHILE,FOR,TO;

/***************************************Escritura***********************************/

terminal String     PRINT,ORACION,URL;

/***************************************Bloques***********************************/

terminal String     BEGIN,END;



/****************************************Definición de simbolos*************************/

terminal String         MAS,MENOS,POR,DIV,MAYOR,MENOR,DOS_PUNTOS,IGUAL,PARENTESIS_ABIERTO,PARENTESIS_CERRADO,
                        COMA,PUNTO_COMA,CORCHETE_ABIERTO,CORCHETE_CERRADO,PORCENTAJE;//Expresiones matematicas





//--------------------------------------------NO TERMINALES-------------------------------------

//non terminal Object     operacion;//Inicio de gramatica


/****************************************Asignaciones***********************/

non terminal String declaracionDeVariable,asignacionDeVariable;


/****************************************Expresiones Aritmeticas***********************/
non terminal ExpresionMatematica     expresion,t,f; //Expresiones matematicas

/****************************************Expresiones Con cadenas***********************/

non terminal ExpresionConCadena     expresionCadena,cadena,tipoDeCadena;



non terminal Object     conjuntoDeInstrucciones,unaInstruccion;
/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

start with conjuntoDeInstrucciones;



conjuntoDeInstrucciones::= conjuntoDeInstrucciones unaInstruccion | unaInstruccion;
unaInstruccion::=declaracionDeVariable;
unaInstruccion::=asignacionDeVariable;

 //----------------------------------------------------Declaracion de variables-------------------------------

declaracionDeVariable::=VAR:a IDENTIFICADOR:i DOS_PUNTOS INTEGER PUNTO_COMA
                        {:AsignacionEntero asignacion = new AsignacionEntero(aright,aleft,i, null);
                          ManejadorAsignacionesEnteras.recorridoDeAsignaciones(asignacion,manejadorDeVariables);:}|
                        VAR IDENTIFICADOR:i DOS_PUNTOS BOOLEAN:e PUNTO_COMA
                        {::}|
                        VAR IDENTIFICADOR:i DOS_PUNTOS STRING:e PUNTO_COMA
                        {::};
 //----------------------------------------------------Asignacion de variables-------------------------------

asignacionDeVariable::= IDENTIFICADOR:i DOS_PUNTOS IGUAL expresion:e PUNTO_COMA
                        {:AsignacionEntero asignacion = new AsignacionEntero(iright,ileft,i, e);
                          ManejadorAsignacionesEnteras.recorridoDeAsignaciones(asignacion,manejadorDeVariables);:};
                        
asignacionDeVariable::=IDENTIFICADOR DOS_PUNTOS IGUAL expresionCadena PUNTO_COMA;
 //----------------------------------------------------EXPRESIONES CON CADENAS-------------------------------

expresionCadena::=expresionCadena:i MAS cadena:e
                  {:RESULT= new OperacionBinariaCadena(ileft,iright,i,e);:};

expresionCadena::= cadena:i
                   {:RESULT=i;:};

cadena::= tipoDeCadena:i
          {:RESULT=i;:};

tipoDeCadena::= ORACION:i
                {:RESULT=new Cadena(ileft,iright,i);:};



 //----------------------------------------------------EXPRESIONES MATEMATICAS-------------------------------

//operacion::=expresion:t 
//  {:ManejadorDeExpresionesAritmeticas man= new ManejadorDeExpresionesAritmeticas(manejadorDeVariables);
//    int valor=man.recorridoDeOperaciones(t);
//    System.out.println("Valor calculado de operacion nueva:"+valor);
// :};

expresion::=expresion:i MAS t:e
    {:System.out.println(i+"+"+e);
    RESULT= new OperacionBinaria(iright, ileft, i, e,"+");:};

expresion::=expresion:i MENOS t:e
    {:System.out.println(i+"-"+e);
    RESULT= new OperacionBinaria(iright, ileft, i, e,"-");
    :};

expresion::=t:i
    {:RESULT=i;:};


t::=t:i POR f:e
    {:System.out.println(i+"*"+e);
     RESULT= new OperacionBinaria(iright, ileft, i, e,"*");:};

t::=t:i DIV f:e
    {:System.out.println(i+"/"+e);
    RESULT= new OperacionBinaria(iright, ileft, i, e,"/");:};

t::=f:i
    {:RESULT=i;:};


f::=IDENTIFICADOR:i//Se debe buscar el identificador, y si se encuenra RESULT=valor de lo contrario mostrar error
    {:RESULT=new IdentificadorTipoInt(ileft,iright,i);:};

f::=NUMERO:i
    {:RESULT= new Operando(iright,ileft, i);:};

