/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes

package backend.generacionHtml;
import java_cup.runtime.*;
import backend.arbolAST.*;
import backend.AccionesMatematicas.*;

import backend.asignacionCreacionDeVariables.*;
import backend.Escritura.*;
import backend.Etiquetas.*;
import backend.condiciones.*;
import backend.ciclos.*;
import backend.expresiones.*;
import backend.expresionesAritmeticas.*;
import backend.expesionesBooleanas.*;
import backend.expresionesConCadenas.*;
import backend.tablaDeSimbolos.*;
import frontend.manejadoresDeGui.ManejadorDeTextArea;
import java.util.ArrayList;


parser code {:

    private ManejadorDeTextArea manejadorDeTextArea;
    private ArrayList<Variable> tablaDeSimbolos;
    private ManejadorDeTablaDeSimbolos manejadorDeVariables;//----->Quizas no lo necesitemos
    ArrayList<Nodo> instruccionesParaIf;
    ArrayList<Nodo> instruccionesElseParaIf;
    ArrayList<Nodo> instruccionesPrint;
    ArrayList<String> textoAEscribir;
    ArrayList<AtributoDeEtiqueta> atributos;
    ArrayList<Etiqueta> etiquetas;

    // Connect this parser to a scanner!
    public parser(AnalizadorDeCodigoEmbebido lex,ArrayList<Variable> tablaDeSimbolos,ManejadorDeTextArea manejadorDeTextArea) {
	super(lex);
        this.manejadorDeTextArea=manejadorDeTextArea;
        this.tablaDeSimbolos=tablaDeSimbolos;
        this.manejadorDeVariables = new ManejadorDeTablaDeSimbolos(tablaDeSimbolos);
        this.instruccionesParaIf=new ArrayList<>();
        this.instruccionesElseParaIf=new ArrayList<>();
        this.instruccionesPrint=new ArrayList<>();
        this.textoAEscribir=new ArrayList<>();
        this.atributos=new ArrayList<>();
        this.etiquetas=new ArrayList<>();
    }

//Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        System.out.println("ERROR EN ESTRUCTURA:"+s.value.toString());
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
                System.out.println("ERROR EN ESTRUCTURA:"+s);
    }



:}


/*--------------- 2da Area: Declaraciones -----------------------*/

//---------------------------------------------TERMINALES-----------------------------------
/****************************************HTML Y OTROS*************************/

terminal String E_HTML,
E_HEAD,
E_TITLE,
E_BODY,
E_CENTER,
E_PARRAFO,
E_NEGRILLA,
E_SUBRAYADO,
E_ITALICA,
E_STRIKE,
E_BLINK,
E_SUB,
E_SUP,
E_FONT,
E_UL,
E_LI,
E_OL,
E_BR,
E_NOBR,
E_HR,
E_BLOCKQUOTE,
E_A,
E_HREF;

terminal String BGCOLOR,
TEXT,
LINK,
ALIGN,
SIZE,
FACE,
COLOR,
TYPE,
START,
WIDTH,
NAME;

terminal String LT,
GT,
AMP,
AACUTE,
EACUTE,
IACUTE,
OACUTE,
UACUTE,
NTILDEM,
NTILDE;

terminal String ORACION_TIPO_ATRIBUTO;

/****************************************Expresiones*************************/

terminal String NUMERO;


/****************************************Definición de variables*************************/

terminal String     VAR,IDENTIFICADOR;

terminal String     INTEGER,BOOLEAN,STRING,TRUE,FALSE;


/****************************************Operaciones logicas*************************/

terminal String     AND,OR;

/****************************************Condicional(If)*************************/

terminal String     IF,THEN,ELSE;

/***************************************Ciclos***********************************/

terminal String     WHILE,FOR,TO;

/***************************************Escritura***********************************/

terminal String     PRINT,ORACION,URL;

/***************************************Bloques***********************************/

terminal String     BEGIN,END;



/****************************************Definición de simbolos*************************/

terminal String         MAS,MENOS,POR,DIV,MAYOR,MENOR,DOS_PUNTOS,IGUAL,PARENTESIS_ABIERTO,PARENTESIS_CERRADO,
                        COMA,PUNTO_COMA,CORCHETE_ABIERTO,CORCHETE_CERRADO,PORCENTAJE;//Expresiones matematicas





//--------------------------------------------NO TERMINALES-------------------------------------

/****************************************Condiconal***********************/

non terminal Object             cicloWhile,cicloFor,condicional;
non terminal ArrayList<Nodo>    bloque,conjuntoDeInstruccionesComplejas;
non terminal Nodo               unaInstruccionCompleja;

/****************************************Asignaciones***********************/

non terminal String declaracionDeVariable,asignacionDeVariable;

/****************************************Escritura*************************/
non terminal String  escritura;
non terminal Nodo unTexto,ultimaInstruccion;
non terminal ArrayList<Nodo> conjuntoDeTexto;
/****************************************Expresiones ***********************/
non terminal Expresion     expresion,t,f; //Expresiones matematicas y cadenas

non terminal Expresion        expresionesBooleanas,exB,exB1;//Expresiones booleanas
/****************************************Expresiones Con cadenas***********************/

non terminal ExpresionConCadena     expresionCadena,cadena,tipoDeCadena;



non terminal Object             conjuntoDeInstrucciones,unaInstruccion;

/****************************************HTML***********************/

non terminal String     conjuntoDeEtiquetas,etiqueta,texto,atributos,unAtributo,etiquetaNoAnidable;
non terminal Object     atributosParrafo;
non terminal Object     p,p1,p2;
non terminal ArrayList<Etiqueta> s1,s2;
non terminal Object etiquetaBody,etiquetaParrafo,etiquetaFont,etiquetaHR;
non terminal AtributoDeEtiqueta     unAtributoBody,unAtributoFont,unAtributosHr;
non terminal ArrayList<Etiqueta>    atributosBody,atributosFont,atributosHR;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

precedence left OR;
precedence left AND;


start with p;


//-----------------------------------------HTML-----------------------------------------

                                            //Encabezado//
p::=MENOR E_HTML MAYOR p1 MENOR DIV E_HTML MAYOR//Con head
    {:manejadorDeTextArea.setEtiquetas(etiquetas);
     manejadorDeTextArea.manejarEtiqueta();:};
p::=MENOR E_HTML MAYOR p2 MENOR DIV E_HTML MAYOR;//Sin head
                                            //Head//
p1::=MENOR E_HEAD MAYOR MENOR DIV E_HEAD MAYOR p2;
p1::=MENOR E_HEAD MAYOR MENOR E_TITLE:i MAYOR conjuntoDeTexto MENOR DIV E_TITLE MAYOR MENOR DIV E_HEAD MAYOR p2
    {:
    atributos=new ArrayList<>();
    textoAEscribir=new ArrayList<>();
    System.out.println(textoAEscribir.size());:};

                                           //Body//
p2::=MENOR E_BODY MAYOR s1 MENOR DIV E_BODY MAYOR;

s1::=s1 MENOR etiquetaBody MAYOR s2 MENOR DIV E_BODY MAYOR|
        MENOR etiquetaBody MAYOR s2 MENOR DIV E_BODY MAYOR|
     s1 MENOR etiquetaParrafo MAYOR s2 MENOR DIV E_PARRAFO MAYOR|
        MENOR etiquetaParrafo MAYOR s2 MENOR DIV E_PARRAFO MAYOR|
     s1 MENOR E_CENTER MAYOR s2 MENOR DIV E_CENTER MAYOR|
        MENOR E_CENTER MAYOR s2 MENOR DIV E_CENTER MAYOR|
     s1 MENOR etiquetaFont MAYOR s2 MENOR DIV E_FONT MAYOR|
        MENOR etiquetaFont MAYOR s2 MENOR DIV E_FONT MAYOR|
     s1 MENOR E_BR MAYOR s2 MENOR DIV E_BR MAYOR|
        MENOR E_BR MAYOR s2 MENOR DIV E_BR MAYOR|
     s1 MENOR E_NOBR MAYOR s2 MENOR DIV E_NOBR MAYOR|
        MENOR E_NOBR MAYOR s2 MENOR DIV E_NOBR MAYOR|
     s1 MENOR PORCENTAJE  conjuntoDeInstrucciones PORCENTAJE MAYOR|
        MENOR PORCENTAJE  conjuntoDeInstrucciones PORCENTAJE MAYOR;

s2::=s2 MENOR E_NEGRILLA MAYOR s2 MENOR DIV E_NEGRILLA MAYOR|
        MENOR E_NEGRILLA MAYOR s2 MENOR DIV E_NEGRILLA MAYOR|
     s2 MENOR E_SUBRAYADO MAYOR s2 MENOR DIV E_SUBRAYADO MAYOR|
        MENOR E_SUBRAYADO MAYOR s2 MENOR DIV E_SUBRAYADO MAYOR|
     s2 MENOR E_ITALICA MAYOR s2 MENOR DIV E_ITALICA MAYOR|
        MENOR E_ITALICA MAYOR s2 MENOR DIV E_ITALICA MAYOR|
     s2 MENOR E_STRIKE MAYOR s2 MENOR DIV E_STRIKE MAYOR|
        MENOR E_STRIKE MAYOR s2 MENOR DIV E_STRIKE MAYOR|
     s2 MENOR E_BLINK MAYOR s2 MENOR DIV E_BLINK MAYOR|
        MENOR E_BLINK MAYOR s2 MENOR DIV E_BLINK MAYOR|
     s2 MENOR E_SUB MAYOR s2 MENOR DIV E_SUB MAYOR|
        MENOR E_SUB MAYOR s2 MENOR DIV E_SUB MAYOR|        
     s2 MENOR E_SUP MAYOR s2 MENOR DIV E_SUP MAYOR|
        MENOR E_SUP MAYOR s2 MENOR DIV E_SUP MAYOR|
     s2 MENOR E_BLOCKQUOTE MAYOR s2 MENOR DIV E_BLOCKQUOTE MAYOR|
        MENOR E_BLOCKQUOTE MAYOR s2 MENOR DIV E_BLOCKQUOTE MAYOR|
     s2 MENOR E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR|
        MENOR E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_A NAME IGUAL ORACION_TIPO_ATRIBUTO MAYOR|
     s2 MENOR E_HREF ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_HREF ORACION_TIPO_ATRIBUTO MAYOR|
        MENOR E_HREF ORACION_TIPO_ATRIBUTO MAYOR s2 MENOR DIV E_HREF ORACION_TIPO_ATRIBUTO MAYOR|
     s2 MENOR etiquetaHR MAYOR s2 MENOR DIV etiquetaHR MAYOR|
        MENOR etiquetaHR MAYOR s2 MENOR DIV etiquetaHR MAYOR|
     s2 MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR|
        MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR;        


                                        //Parrafo
etiquetaParrafo::=E_PARRAFO |
           E_PARRAFO ALIGN IGUAL ORACION_TIPO_ATRIBUTO; 

etiquetaBody::=E_BODY;
etiquetaBody::=E_BODY atributosBody;
atributosBody::=atributosBody unAtributoBody|unAtributoBody;
unAtributoBody::= BGCOLOR IGUAL ORACION_TIPO_ATRIBUTO;
unAtributoBody::= TEXT IGUAL ORACION_TIPO_ATRIBUTO;
unAtributoBody::= LINK IGUAL ORACION_TIPO_ATRIBUTO;

etiquetaFont::=E_FONT;
etiquetaFont::=E_FONT atributosFont;
atributosFont::=atributosFont unAtributoFont | unAtributoFont;
atributosFont::=SIZE IGUAL ORACION_TIPO_ATRIBUTO;
atributosFont::=ALIGN IGUAL ORACION_TIPO_ATRIBUTO;
atributosFont::=FACE IGUAL ORACION_TIPO_ATRIBUTO;
atributosFont::=COLOR IGUAL ORACION_TIPO_ATRIBUTO;


etiquetaHR::=E_HR;
etiquetaHR::=E_HR atributosHR;
atributosHR::=atributosHR unAtributosHr|unAtributosHr;
unAtributosHr::=ALIGN IGUAL ORACION_TIPO_ATRIBUTO;
unAtributosHr::=WIDTH IGUAL ORACION_TIPO_ATRIBUTO;
unAtributosHr::=SIZE IGUAL ORACION_TIPO_ATRIBUTO;


s2::=conjuntoDeTexto;
                                            //Texto//
conjuntoDeTexto::= conjuntoDeTexto texto|texto;
texto::= IDENTIFICADOR;
texto::= DOS_PUNTOS;


/*


                                            //Etiquetas//
conjuntoDeEtiquetas::=conjuntoDeEtiquetas etiqueta | etiqueta;
etiqueta::=MENOR PORCENTAJE conjuntoDeInstrucciones PORCENTAJE MAYOR;
etiqueta::=MENOR E_CENTER MAYOR conjuntoDeTexto MENOR conjuntoDeTexto DIV E_CENTER MAYOR;//CENTER
etiqueta::=MENOR E_PARRAFO MAYOR conjuntoDeTexto MENOR DIV E_PARRAFO MAYOR;//P
etiqueta::=MENOR E_PARRAFO:i atributosParrafo MAYOR conjuntoDeTexto MENOR DIV E_PARRAFO MAYOR//P con atributos
{:Etiqueta etiqueta = new Etiqueta(i,atributos,textoAEscribir);
  etiquetas.add(etiqueta);
   atributos=new ArrayList<>();
   textoAEscribir=new ArrayList<>();
   System.out.println("ETIQUETA:"+textoAEscribir.size()); :};
etiqueta::=MENOR E_NEGRILLA MAYOR conjuntoDeTexto MENOR DIV E_NEGRILLA MAYOR;//Negrilla
etiqueta::=MENOR E_SUBRAYADO MAYOR conjuntoDeTexto  MENOR DIV E_SUBRAYADO MAYOR;//Subrayado
etiqueta::=MENOR E_ITALICA MAYOR conjuntoDeTexto MENOR DIV E_ITALICA MAYOR;//Negrilla
etiqueta::=MENOR E_STRIKE MAYOR conjuntoDeTexto MENOR DIV E_STRIKE MAYOR;//TACHADO
etiqueta::=MENOR E_BLINK MAYOR conjuntoDeTexto MENOR DIV E_BLINK MAYOR;//Parapadeante
etiqueta::=MENOR E_SUB MAYOR conjuntoDeTexto MENOR DIV E_SUB MAYOR;//SubIndicce
etiqueta::=MENOR E_SUP MAYOR conjuntoDeTexto MENOR DIV E_SUP MAYOR;//SuperIndice
etiqueta::=MENOR E_FONT MAYOR conjuntoDeTexto MENOR DIV E_FONT MAYOR;//Tipo de letra
etiqueta::=MENOR E_FONT atributos MAYOR conjuntoDeTexto MENOR DIV E_FONT MAYOR;//Tipo de letra con atributos
etiqueta::=MENOR E_UL MAYOR MENOR DIV E_UL MAYOR;//Lista desordenada
etiqueta::=MENOR E_UL atributos MAYOR MENOR DIV E_UL MAYOR;//Lista desordenada
etiqueta::=MENOR E_OL  MAYOR MENOR DIV E_OL MAYOR;//Lista ORDENADA
etiqueta::=MENOR E_OL atributos MAYOR MENOR DIV E_OL MAYOR;//Lista ORDENADA CON ATRIBUTOS
etiqueta::=MENOR E_BR MAYOR;//Cambio de linea
etiqueta::=MENOR E_NOBR MAYOR conjuntoDeTexto MENOR DIV E_NOBR MAYOR;//Texto sin cambios
etiqueta::=MENOR E_HR atributos MAYOR;//Linea horizontal
etiqueta::=MENOR E_BLOCKQUOTE MAYOR conjuntoDeTexto MENOR DIV E_BLOCKQUOTE MAYOR;//Aumenta la sangria
etiqueta::=MENOR E_A MAYOR conjuntoDeTexto MENOR DIV E_A MAYOR;//Enlaces
etiqueta::=MENOR E_HREF MAYOR conjuntoDeTexto MENOR DIV E_HREF MAYOR;//Texto sin cambios

                                            //Texto//
conjuntoDeTexto::= conjuntoDeTexto texto|texto;
texto::= IDENTIFICADOR:i{:textoAEscribir.add(i);:};
texto::= DOS_PUNTOS:i{:textoAEscribir.add(i);:};


                                               //ATRIBUTOS//

atributosBody::=atributosBody unAtributoBody|unAtributoBody;
unAtributoBody::=BGCOLOR:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributoBody::= TEXT:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributoBody::= LINK:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};


atributosParrafo::= ALIGN:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};



atributos::= atributos unAtributo|unAtributo;
unAtributo::= BGCOLOR:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= TEXT:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= LINK:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= ALIGN:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= SIZE:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= FACE:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= COLOR:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= TYPE:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= START:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= WIDTH:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};
unAtributo::= NAME:i IGUAL ORACION_TIPO_ATRIBUTO:e 
{:atributos.add(new AtributoDeEtiqueta(ileft,iright,i,e));:};

*/


//-----------------------------------------Instrucciones posibles-----------------------------------------

conjuntoDeInstrucciones::= conjuntoDeInstrucciones unaInstruccion | unaInstruccion;
unaInstruccion::=declaracionDeVariable;
unaInstruccion::=asignacionDeVariable;
unaInstruccion::=condicional;
unaInstruccion::=escritura;
unaInstruccion::=cicloFor;
unaInstruccion::=cicloWhile;

 //----------------------------------------------------CicloWhile(For)-------------------------------

cicloWhile::=WHILE:i expresionesBooleanas:e bloque:f
             {:CicloWhile cicloWhile = new CicloWhile(ileft,iright,e,f);
               ManejadorDeCicloWhile manW= new ManejadorDeCicloWhile(cicloWhile,manejadorDeVariables);
               manW.realizarOperaciones();
             :};

cicloWhile::=WHILE:i IDENTIFICADOR:e bloque:f
             {:Identificador id=new Identificador(eleft,eright,e);
               CicloWhile cicloWhile = new CicloWhile(ileft,iright,id,f);
               ManejadorDeCicloWhile manW= new ManejadorDeCicloWhile(cicloWhile,manejadorDeVariables);
               manW.realizarOperaciones();
              :};


 //----------------------------------------------------CicloFor(For)-------------------------------

cicloFor::=FOR:i IDENTIFICADOR:e DOS_PUNTOS IGUAL NUMERO:f TO NUMERO:g bloque:h
            {:CicloFor cicloF = new CicloFor(ileft,iright,f,g,h,e,manejadorDeVariables);
            ManejadorDeCicloFor man=new ManejadorDeCicloFor(cicloF,manejadorDeVariables);
            man.realizarOperaciones();
            :};

 //----------------------------------------------------Condicional(IF)-------------------------------
condicional::=IF:i IDENTIFICADOR:e THEN bloque:f ELSE bloque:g
              {:
              Identificador id=new Identificador(eleft,eright,e);
              Condicion condicion= new Condicion(ileft,iright,id,f,g);
              ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
              manejador.realizarOperaciones();
              instruccionesParaIf=new ArrayList<>();
              instruccionesElseParaIf=new ArrayList<>();
              :};


condicional::=IF:i expresionesBooleanas:e THEN bloque:f ELSE bloque:g
                {:
                Condicion condicion= new Condicion(ileft,iright,e,f,g);
                ManejadorDeCondiciones manejador = new ManejadorDeCondiciones(condicion,manejadorDeVariables);
                manejador.realizarOperaciones();
                :};


 //----------------------------------------------------Bloque-------------------------------

bloque::= BEGIN CORCHETE_ABIERTO conjuntoDeInstruccionesComplejas:i CORCHETE_CERRADO END PUNTO_COMA
          {:RESULT=i;:};

bloque::=unaInstruccionCompleja:i
         {:ArrayList<Nodo> lista=new ArrayList<>();
           lista.add(i);
           RESULT=lista;  :};


 //----------------------------------------------------Instrucciones para guardar en lista-------------------------------
                    
conjuntoDeInstruccionesComplejas::=conjuntoDeInstruccionesComplejas:i unaInstruccionCompleja:e
{:
    i.add(e);
    RESULT=i;
:};
conjuntoDeInstruccionesComplejas::=unaInstruccionCompleja:i
                                    {:ArrayList<Nodo> lista=new ArrayList<>();
                                     lista.add(i);
                                     RESULT=lista;   
                                    :};

unaInstruccionCompleja::= VAR:a IDENTIFICADOR:i DOS_PUNTOS INTEGER PUNTO_COMA
                          {:RESULT=new Variable(ileft,iright,i,"entera","0");:}|
                          VAR IDENTIFICADOR:i DOS_PUNTOS BOOLEAN:e PUNTO_COMA
                          {:RESULT=new Variable(ileft,iright,i,"booleana","true");:}|
                          VAR IDENTIFICADOR:i DOS_PUNTOS STRING:e PUNTO_COMA
                          {:RESULT=new Variable(ileft,iright,i,"cadena","");:};

unaInstruccionCompleja::=IDENTIFICADOR:i DOS_PUNTOS IGUAL expresion:e PUNTO_COMA
                         {:RESULT=new Asignacion(i, e, manejadorDeVariables);:}|
                         IDENTIFICADOR:i DOS_PUNTOS IGUAL expresionesBooleanas:e PUNTO_COMA
                         {:RESULT=new Asignacion(i, e, manejadorDeVariables);:};


unaInstruccionCompleja::=IF:i IDENTIFICADOR:e THEN bloque:f ELSE bloque:g
{:System.out.println("ACCION SI");Identificador id=new Identificador(eleft,eright,e);
                        Condicion condicion= new Condicion(ileft,iright,id,f,g);
                        RESULT =condicion;
                        :};


unaInstruccionCompleja::=IF:i expresionesBooleanas:e THEN bloque:f ELSE bloque:g
                        {:
                        System.out.println("Accion con booleanas");
                        Condicion condicion= new Condicion(ileft,iright,e,f,g);
                        RESULT =condicion;
                        :};


unaInstruccionCompleja::=PRINT:i PARENTESIS_ABIERTO conjuntoDeTexto:e ultimaInstruccion:f PARENTESIS_CERRADO PUNTO_COMA
           {:
            e.add(f);
            Escritura escritura=new Escritura(ileft,iright,e);
            RESULT=escritura;
            :};

unaInstruccionCompleja::=PRINT:i PARENTESIS_ABIERTO ultimaInstruccion:e PARENTESIS_CERRADO PUNTO_COMA
            {:
            ArrayList<Nodo> lista = new ArrayList<>();
            lista.add(e);
            Escritura escritura=new Escritura(ileft,iright,lista);
            RESULT =escritura;
            :};

unaInstruccionCompleja::=FOR:i IDENTIFICADOR:e DOS_PUNTOS IGUAL NUMERO:f TO NUMERO:g bloque:h
            {:CicloFor cicloF = new CicloFor(ileft,iright,f,g,h,e,manejadorDeVariables);
              RESULT =cicloF;
            :};

unaInstruccionCompleja::=WHILE:i expresionesBooleanas:e bloque:f
             {:CicloWhile cicloWhile = new CicloWhile(ileft,iright,e,f);
                RESULT = cicloWhile;
             :};
unaInstruccionCompleja::=WHILE:i IDENTIFICADOR:e bloque:f
              {:Identificador id=new Identificador(eleft,eright,e);
               CicloWhile cicloWhile = new CicloWhile(ileft,iright,id,f);
               RESULT=cicloWhile;
              :};

 //----------------------------------------------------Escritura-------------------------------
escritura::=PRINT:i PARENTESIS_ABIERTO conjuntoDeTexto:e ultimaInstruccion:f PARENTESIS_CERRADO PUNTO_COMA
           {:
            e.add(f);
            Escritura escritura=new Escritura(ileft,iright,e);
             ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables);
             man.manejarEscritura();
             instruccionesPrint=new ArrayList<>();
            :};

escritura::=PRINT:i PARENTESIS_ABIERTO ultimaInstruccion:e PARENTESIS_CERRADO PUNTO_COMA
            {:System.out.println("PRINT RECONOCIDO");
            ArrayList<Nodo> lista = new ArrayList<>();
            lista.add(e);
            Escritura escritura=new Escritura(ileft,iright,lista);
            ManejadorDeEscritura  man =new ManejadorDeEscritura(escritura,manejadorDeVariables);
            man.manejarEscritura();
            :};

conjuntoDeTexto::=conjuntoDeTexto:i unTexto:e
                  {:i.add(e);
                    RESULT=i;
                  :};
conjuntoDeTexto::=unTexto:e
                  {:ArrayList<Nodo> lista = new ArrayList<>();
                    lista.add(e);
                    RESULT=lista;
                   :};

unTexto::=ORACION:i COMA{:RESULT=new Oracion(ileft,iright,i);:};
unTexto::=IDENTIFICADOR:i COMA{:RESULT =new Identificador(ileft, iright,i);:};
ultimaInstruccion::=ORACION:i{:RESULT =new Oracion(ileft,iright,i);:};
ultimaInstruccion::=IDENTIFICADOR:i{:RESULT=new Identificador(ileft, iright,i);:};


 //----------------------------------------------------Declaracion de variables-------------------------------

declaracionDeVariable::=VAR:a IDENTIFICADOR:i DOS_PUNTOS INTEGER PUNTO_COMA
                        {:Variable variable = new Variable(ileft,iright,i,"entera","0");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();:}|
                        VAR IDENTIFICADOR:i DOS_PUNTOS BOOLEAN:e PUNTO_COMA
                        {:Variable variable = new Variable(ileft,iright,i,"booleana","true");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();:}|
                        VAR IDENTIFICADOR:i DOS_PUNTOS STRING:e PUNTO_COMA
                        {:Variable variable = new Variable(ileft,iright,i,"cadena","");
                        ManejadorDeCreacionDeVariables man = new ManejadorDeCreacionDeVariables(manejadorDeVariables,variable);
                        man.crearVariable();:};

//----------------------------------------------------Asignacion de variables-------------------------------

asignacionDeVariable::= IDENTIFICADOR:i DOS_PUNTOS IGUAL expresion:e PUNTO_COMA
                        {:Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();:}|
                        IDENTIFICADOR:i DOS_PUNTOS IGUAL expresionesBooleanas:e PUNTO_COMA
                        {:System.out.println("Asignacion a booleana");
                        Asignacion asignacion = new Asignacion(i, e, manejadorDeVariables);
                        ManejadorDeAsignacionDeExpresiones nuevaAsignacion = new ManejadorDeAsignacionDeExpresiones(manejadorDeVariables, asignacion,true);
                        nuevaAsignacion.asignacionDeVariable();:};    
                        

 //----------------------------------------------------EXPRESIONES CON BOOLEANOS-------------------------------

expresionesBooleanas::= expresionesBooleanas:i OR  expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"or", i,e);:};

expresionesBooleanas::= expresionesBooleanas:i AND  expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};


expresionesBooleanas::= expresionesBooleanas:i OR expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"or",i,e);:};

expresionesBooleanas::= expresionesBooleanas:i AND expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};

expresionesBooleanas::=expresion:i OR expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"or", i,e);:};

expresionesBooleanas::=expresion:i AND expresion:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};

expresionesBooleanas::=expresion:i OR expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"or", i,e);:};

expresionesBooleanas::=expresion:i AND expresionesBooleanas:e
{:RESULT=new OperacionBooleana(ileft,iright,"and", i,e);:};


expresionesBooleanas::=expresion:i MAYOR expresion:e
{:RESULT= new Comparacion(ileft,iright,">",i,e);:};

expresionesBooleanas::=expresion:i MENOR expresion:e
{:RESULT= new Comparacion(ileft,iright,"<",i,e);:};

expresionesBooleanas::=expresion:i MAYOR IGUAL expresion:e
{:RESULT= new Comparacion(ileft,iright,">=",i,e);:};

expresionesBooleanas::=expresion:i MENOR IGUAL expresion:e
{:RESULT= new Comparacion(ileft,iright,"<=",i,e);:};

expresionesBooleanas::=expresion:i IGUAL expresion:e
{:RESULT= new Comparacion(ileft,iright,"=",i,e);:};

expresionesBooleanas::=expresion:i MENOR MAYOR expresion:e
{:RESULT= new Comparacion(ileft,iright,"<>",i,e);:};



/*
expresionesBooleanas::=exB;

exB::=  exB AND exB1;

exB::=  exB1;

exB1::= expresion MAYOR expresion;

exB1::= expresion MENOR expresion;

exB1::= expresion MAYOR IGUAL expresion;

exB1::= expresion MENOR IGUAL expresion;

exB1::= expresion MAYOR MENOR expresion;

exB1::= IDENTIFICADOR;
*/
 //----------------------------------------------------EXPRESIONES MATEMATICAS Y CON CADENAS-------------------------------



expresion::=expresion:i MAS t:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"+");:};

expresion::=expresion:i MENOS t:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"-");:};

expresion::=t:i
    {:RESULT=i;:};

t::=t:i POR f:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"*");:};

t::=t:i DIV f:e
    {:RESULT= new OperacionBinaria(iright, ileft, i, e,"/");:};


t::=f:i
    {:RESULT=i;:};

f::=IDENTIFICADOR:i//Se debe buscar el identificador, y si se encuenra RESULT=valor de lo contrario mostrar error
    {:RESULT=new Identificador(ileft,iright,i);:};

f::=NUMERO:i
    {:RESULT= new Operando(iright,ileft, i);:};

f::= ORACION:i
     {:RESULT=new Cadena(ileft,iright,i);:};

f::=TRUE:i
    {:RESULT= new ValorDeVerdad(ileft,iright,"true");:};

f::=FALSE:i
    {:RESULT= new ValorDeVerdad(ileft,iright,"false");:};

